/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __reflectGet = Reflect.get;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  RpgManagerSettingTab: () => RpgManagerSettingTab,
  default: () => RpgManager
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/Controller.ts
var import_obsidian5 = require("obsidian");

// src/enums/DataType.ts
var DataType = /* @__PURE__ */ ((DataType2) => {
  DataType2[DataType2["Campaign"] = 0] = "Campaign";
  DataType2[DataType2["Adventure"] = 1] = "Adventure";
  DataType2[DataType2["Session"] = 2] = "Session";
  DataType2[DataType2["Scene"] = 3] = "Scene";
  DataType2[DataType2["Character"] = 4] = "Character";
  DataType2[DataType2["NonPlayerCharacter"] = 5] = "NonPlayerCharacter";
  DataType2[DataType2["Location"] = 6] = "Location";
  DataType2[DataType2["Event"] = 7] = "Event";
  DataType2[DataType2["Clue"] = 8] = "Clue";
  DataType2[DataType2["Faction"] = 9] = "Faction";
  DataType2[DataType2["Note"] = 10] = "Note";
  DataType2[DataType2["Timeline"] = 11] = "Timeline";
  return DataType2;
})(DataType || {});

// src/RpgFunctions.ts
var import_obsidian = require("obsidian");
var RpgFunctions = class {
  static initialise(app, settings) {
    this.app = app;
    this.settings = settings;
    this.initialiseRoots();
  }
  static initialiseRoots() {
    if (this.app.vault.getFiles().length !== 0) {
      const filePath = this.app.vault.getFiles()[0].path;
      let slashCount = 0;
      let p = filePath.indexOf("/");
      while (p !== -1) {
        slashCount++;
        p = filePath.indexOf("/", p + 1);
      }
      slashCount++;
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        this.root = this.app.vault.getResourcePath(file);
      }
      if (this.root === null) {
        console.log("Rpg Manager failed to find the root folder!");
        return;
      }
      if (this.root.includes("?")) {
        this.root = this.root.substring(0, this.root.lastIndexOf("?"));
      }
      for (let removedSlash = slashCount; removedSlash > 0; removedSlash--) {
        this.root = this.root.slice(0, this.root.lastIndexOf("/"));
      }
      if (!this.root.endsWith("/")) {
        this.root += "/";
      }
      this.attachmentRoot = this.root + this.app.vault.config.attachmentFolderPath + "/";
    }
  }
  static fileExists(path) {
    const abstractFile = this.app.vault.getAbstractFileByPath(path);
    let response = false;
    if (abstractFile instanceof import_obsidian.TAbstractFile) {
      response = abstractFile ? true : false;
    }
    return response;
  }
  static getImageLink(page) {
    const imageExtensions = ["jpeg", "jpg", "png", "webp"];
    for (let extensionCount = 0; extensionCount < imageExtensions.length; extensionCount++) {
      const fileName = this.app.vault.config.attachmentFolderPath + "/" + (page == null ? void 0 : page.file.name) + "." + imageExtensions[extensionCount];
      if (this.fileExists(fileName)) {
        if (this.root == null) {
          this.initialiseRoots();
        }
        return this.root + fileName;
      }
    }
    return null;
  }
  static getImageElement(page, width = 75, height = 75) {
    let imageFile = null;
    if (page !== void 0) {
      imageFile = this.getImageLink(page);
    }
    if (imageFile === null) {
      return null;
    }
    if (width !== 75 && height === 75) {
      height = void 0;
    } else if (width === 75 && height !== 75) {
      width = void 0;
    }
    const response = new Image(width, height);
    response.src = imageFile;
    response.style.objectFit = "cover";
    return response;
  }
  static getImage(page, width = 75, height = 75) {
    let imageFile = null;
    if (page !== void 0) {
      imageFile = this.getImageLink(page);
    }
    let minimalDimensions = false;
    let dimensions = "width: " + width + "px; height: " + height + "px;";
    if (width !== 75 && height === 75) {
      dimensions = "width: " + width + "px;";
    } else if (width === 75 && height !== 75) {
      dimensions = "height: " + height + "px;";
    } else if (width === 75 && height === 75) {
      minimalDimensions = true;
    }
    if (imageFile === null) {
      if (!minimalDimensions) {
        return "";
      } else {
        return '<div style="' + dimensions + '"></div>';
      }
    }
    return '<img src="' + imageFile + '" style="object-fit: cover;' + dimensions + '">';
  }
  static getDataType(tags) {
    let response = null;
    (tags || []).forEach((tag) => {
      if (tag.startsWith(this.settings.campaignTag)) {
        response = 0 /* Campaign */;
      } else if (tag.startsWith(this.settings.adventureTag)) {
        response = 1 /* Adventure */;
      } else if (tag.startsWith(this.settings.sessionTag)) {
        response = 2 /* Session */;
      } else if (tag.startsWith(this.settings.sceneTag)) {
        response = 3 /* Scene */;
      } else if (tag.startsWith(this.settings.npcTag)) {
        response = 5 /* NonPlayerCharacter */;
      } else if (tag.startsWith(this.settings.pcTag)) {
        response = 4 /* Character */;
      } else if (tag.startsWith(this.settings.clueTag)) {
        response = 8 /* Clue */;
      } else if (tag.startsWith(this.settings.locationTag)) {
        response = 6 /* Location */;
      } else if (tag.startsWith(this.settings.factionTag)) {
        response = 9 /* Faction */;
      } else if (tag.startsWith(this.settings.eventTag)) {
        response = 7 /* Event */;
      } else if (tag.startsWith(this.settings.timelineTag)) {
        response = 11 /* Timeline */;
      } else if (tag.startsWith(this.settings.noteTag)) {
        response = 10 /* Note */;
      }
    });
    return response;
  }
  static getTagId(tags, type) {
    if (tags == null) {
      throw new Error();
    }
    let response = "";
    tags.forEach((tag) => {
      if (response === "") {
        if (tag.startsWith(this.settings.campaignTag)) {
          if (type === 0 /* Campaign */) {
            response = tag.substring(this.settings.campaignTag.length + 1);
          } else {
            throw new Error();
          }
        } else if (tag.startsWith(this.settings.adventureTag)) {
          const parts = tag.substring(this.settings.adventureTag.length + 1).split("/");
          if (parts.length === 2) {
            if (type === 0 /* Campaign */) {
              response = parts[0];
            } else if (type === 1 /* Adventure */) {
              response = parts[1];
            }
          } else if (parts.length === 1 && type === 1 /* Adventure */) {
            response = parts[0];
          }
        } else if (tag.startsWith(this.settings.sessionTag)) {
          const parts = tag.substring(this.settings.sessionTag.length + 1).split("/");
          if (parts.length === 3) {
            if (type === 0 /* Campaign */) {
              response = parts[0];
            } else if (type === 1 /* Adventure */) {
              response = parts[1];
            } else if (type === 2 /* Session */) {
              response = parts[2];
            }
          } else if (parts.length === 2) {
            if (type === 1 /* Adventure */) {
              response = parts[0];
            } else if (type === 2 /* Session */) {
              response = parts[1];
            }
          }
        } else if (tag.startsWith(this.settings.sceneTag)) {
          const parts = tag.substring(this.settings.sceneTag.length + 1).split("/");
          if (parts.length === 4) {
            if (type === 0 /* Campaign */) {
              response = parts[0];
            } else if (type === 1 /* Adventure */) {
              response = parts[1];
            } else if (type === 2 /* Session */) {
              response = parts[2];
            } else if (type === 3 /* Scene */) {
              response = parts[3];
            }
          } else if (parts.length === 3) {
            if (type === 1 /* Adventure */) {
              response = parts[0];
            } else if (type === 2 /* Session */) {
              response = parts[1];
            } else if (type === 3 /* Scene */) {
              response = parts[2];
            }
          }
        } else {
          let tagLength = 0;
          if (tag.startsWith(this.settings.npcTag)) {
            tagLength = this.settings.npcTag.length;
          } else if (tag.startsWith(this.settings.pcTag)) {
            tagLength = this.settings.pcTag.length;
          } else if (tag.startsWith(this.settings.eventTag)) {
            tagLength = this.settings.eventTag.length;
          } else if (tag.startsWith(this.settings.factionTag)) {
            tagLength = this.settings.factionTag.length;
          } else if (tag.startsWith(this.settings.locationTag)) {
            tagLength = this.settings.locationTag.length;
          } else if (tag.startsWith(this.settings.clueTag)) {
            tagLength = this.settings.clueTag.length;
          } else if (tag.startsWith(this.settings.timelineTag)) {
            tagLength = this.settings.timelineTag.length;
          }
          if (tagLength !== 0 && tag.length > tagLength && type === 0 /* Campaign */) {
            response = tag.substring(tagLength + 1);
          }
        }
      }
    });
    if (response === "") {
      throw new Error();
    }
    return +response;
  }
  static formatDate(date, type = null) {
    if (!date || date === void 0)
      return "";
    let options = null;
    if (type === "long") {
      options = {
        day: "numeric",
        month: "long",
        year: "numeric"
      };
      return date.toLocaleString(options);
    }
    if (type === "short") {
      options = {
        weekday: "short",
        month: "short",
        day: "numeric",
        year: "numeric"
      };
    }
    if (options !== null) {
      return date.toLocaleString(options);
    } else {
      return date.toISODate();
    }
  }
  static formatTime(date) {
    if (!date || date === void 0)
      return "";
    const options = {
      hour12: false,
      hour: "2-digit",
      minute: "2-digit"
    };
    return date.toLocaleString(options);
  }
  static calculateDuration(start, end) {
    if (!start || !end)
      return "";
    const dtStart = new Date(start);
    const dtEnd = new Date(end);
    const difference = dtEnd.valueOf() - dtStart.valueOf();
    const minutes = difference / 6e4;
    const remaining = difference - minutes * 6e4;
    const seconds = remaining > 0 ? remaining / 1e3 : 0;
    return minutes + ":" + (seconds < 10 ? "0" + seconds : seconds);
  }
  static getDeathStatus(page) {
    return page.dates.death !== null ? "<br/>_(Deceased " + this.formatDate(page.dates.death) + ")_ " : "";
  }
  static calculateAge(page, currentDate) {
    if (page === void 0)
      return "";
    if (!(page == null ? void 0 : page.dates.dob))
      return "";
    const end = page.dates.death || currentDate;
    const startDate = new Date(page.dates.dob);
    const endDate = new Date(end);
    const ageDifMs = endDate.valueOf() - startDate.valueOf();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970).toString();
  }
};

// src/abstracts/AbstractData.ts
var AbstractData = class {
  constructor(data) {
    this.data = data;
    this.link = data.file.link;
    this.name = data.file.name;
    this.path = data.file.path;
    this.completed = data.completed != null ? data.completed : true;
  }
};
var AbstractImageData = class extends AbstractData {
  constructor(data) {
    super(data);
    this.imageSrc = RpgFunctions.getImageLink(data);
    this.imageSrcElement = RpgFunctions.getImageElement(data);
    this.image = this.imageSrc !== null ? RpgFunctions.getImage(data) : "";
  }
  getImage(width = 75, height = 75) {
    if (this.imageSrc === null)
      return "";
    return RpgFunctions.getImage(this.data, width, height);
  }
};
var AbstractDataList = class {
  constructor(campaign) {
    this.campaign = campaign;
  }
  add(data) {
    this.elements.push(data);
  }
  map(data) {
    const response = /* @__PURE__ */ new Map();
    const character = this.elements.find((t) => t.link === data.link);
    if (character !== void 0) {
      Object.entries(character).forEach(([key, value]) => {
        response.set(key, value);
      });
    }
    return response;
  }
};

// src/settings/Agnostic/data/AdventureData.ts
var AdventureData = class extends AbstractData {
  constructor(data, campaign) {
    super(data);
    this.campaign = campaign;
    this.id = RpgFunctions.getTagId(data.tags, 1 /* Adventure */);
    this.synopsis = data.synopsis;
  }
};

// src/settings/Agnostic/data/AdventureList.ts
var AdventureList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/enums/CampaignSetting.ts
var CampaignSetting = /* @__PURE__ */ ((CampaignSetting2) => {
  CampaignSetting2[CampaignSetting2["Agnostic"] = 0] = "Agnostic";
  CampaignSetting2[CampaignSetting2["Raw"] = 1] = "Raw";
  CampaignSetting2[CampaignSetting2["Vampire"] = 2] = "Vampire";
  return CampaignSetting2;
})(CampaignSetting || {});

// src/factories/ErrorFactory.ts
var ErrorFactory = class {
  static create(errorMessage) {
    console.log("RpgManager Error: " + errorMessage);
  }
};

// src/settings/Agnostic/data/CampaignData.ts
var CampaignData = class extends AbstractImageData {
  constructor(data) {
    super(data);
    this.currentDate = data.dates.current;
    this.id = RpgFunctions.getTagId(data.tags, 0 /* Campaign */);
    if (data.settings == null) {
      this.settings = 0 /* Agnostic */;
    } else {
      try {
        this.settings = CampaignSetting[data.settings];
      } catch (e) {
        ErrorFactory.create("Campaign Settings is not correct");
        this.settings = 0 /* Agnostic */;
      }
    }
  }
};

// src/factories/PronounFactory.ts
var PronounFactory = class {
  static create(pronoun) {
    let response = null;
    if (pronoun != null) {
      switch (pronoun.toLowerCase()) {
        case "t":
        case "they":
          response = 0 /* they */;
          break;
        case "s":
        case "she":
          response = 1 /* she */;
          break;
        case "h":
        case "he":
          response = 2 /* he */;
          break;
        default:
          response = null;
          break;
      }
    }
    return response;
  }
  static readPronoun(pronoun) {
    switch (pronoun) {
      case 0 /* they */:
        return "They/Them";
        break;
      case 1 /* she */:
        return "She/Her";
        break;
      case 2 /* he */:
        return "He/Him";
        break;
    }
  }
};

// src/settings/Agnostic/data/CharacterData.ts
var CharacterData = class extends AbstractImageData {
  constructor(data, campaign, useAdditionalInformation = null) {
    super(data);
    this.campaign = campaign;
    this.age = "";
    this.image = RpgFunctions.getImage(data);
    this.age = RpgFunctions.calculateAge(data, campaign.currentDate);
    this.isDead = data.dates.death != void 0;
    this.goals = data.goals != void 0 ? data.goals : null;
    this.pronoun = PronounFactory.create(data.pronoun);
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};

// src/settings/Agnostic/data/CharacterList.ts
var CharacterList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/ClueData.ts
var ClueData = class extends AbstractImageData {
  constructor(data, campaign, useAdditionalInformation = null) {
    super(data);
    this.campaign = campaign;
    this.image = RpgFunctions.getImage(data);
    if (data.dates.found !== null && data.dates.found !== void 0 && data.dates.found !== false) {
      this.found = RpgFunctions.formatDate(data.dates.found, "long");
    } else {
      this.found = false;
    }
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};

// src/settings/Agnostic/data/ClueList.ts
var ClueList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/EventData.ts
var EventData = class extends AbstractImageData {
  constructor(data, campaign, useAdditionalInformation = null) {
    super(data);
    this.campaign = campaign;
    if (data.dates.event != null)
      this.date = RpgFunctions.formatDate(data.dates.event, "short");
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};

// src/settings/Agnostic/data/EventList.ts
var EventList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/FactionData.ts
var FactionData = class extends AbstractImageData {
  constructor(data, campaign, useAdditionalInformation = null) {
    super(data);
    this.campaign = campaign;
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};

// src/settings/Agnostic/data/FactionList.ts
var FactionList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/LocationData.ts
var LocationData = class extends AbstractImageData {
  constructor(data, campaign, useAdditionalInformation = null) {
    super(data);
    this.campaign = campaign;
    this.address = data.address;
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};

// src/settings/Agnostic/data/LocationList.ts
var LocationList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/SceneData.ts
var SceneData = class extends AbstractImageData {
  constructor(data, campaign, additionalInformation, adventure = null, session = null, previousScene = null, nextScene = null) {
    var _a, _b;
    super(data);
    this.campaign = campaign;
    this.adventure = adventure;
    this.session = session;
    this.previousScene = previousScene;
    this.nextScene = nextScene;
    this.duration = "";
    this.action = data.action != void 0 ? data.action : "";
    this.synopsis = data.synopsis != void 0 ? data.synopsis : "";
    this.startTime = RpgFunctions.formatTime((_a = data.time) == null ? void 0 : _a.start);
    this.endTime = RpgFunctions.formatTime((_b = data.time) == null ? void 0 : _b.end);
    this.id = RpgFunctions.getTagId(data.tags, 3 /* Scene */);
    this.sessionId = RpgFunctions.getTagId(data.tags, 2 /* Session */);
    this.adventureId = RpgFunctions.getTagId(data.tags, 1 /* Adventure */);
    if (this.startTime !== "" && this.endTime !== "") {
      this.duration = RpgFunctions.calculateDuration(data.time.start, data.time.end);
    }
  }
};

// src/settings/Agnostic/data/SceneList.ts
var SceneList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/SessionData.ts
var SessionData = class extends AbstractData {
  constructor(data, campaign, additionalInformation = "", adventure = null, previousSession = null, nextSession = null) {
    super(data);
    this.campaign = campaign;
    this.additionalInformation = additionalInformation;
    this.adventure = adventure;
    this.previousSession = previousSession;
    this.nextSession = nextSession;
    this.id = RpgFunctions.getTagId(data.tags, 2 /* Session */);
    this.adventureId = RpgFunctions.getTagId(data.tags, 1 /* Adventure */);
    this.synopsis = data.synopsis;
    if (data.dates.session !== null && data.dates.session !== void 0)
      this.date = RpgFunctions.formatDate(data.dates.session, "short");
    if (data.dates.irl !== null && data.dates.irl !== void 0)
      this.irl = RpgFunctions.formatDate(data.dates.irl);
  }
};

// src/settings/Agnostic/data/SessionList.ts
var SessionList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};

// src/settings/Agnostic/data/SynopsisData.ts
var SynopsisData = class extends AbstractData {
  constructor(data, title = null) {
    var _a, _b;
    super(data);
    this.title = title;
    this.synopsis = data.synopsis !== null ? data.synopsis : "";
    this.death = ((_a = data.dates) == null ? void 0 : _a.death) !== void 0 && ((_b = data.dates) == null ? void 0 : _b.death) !== void 0 ? RpgFunctions.formatDate(data.dates.death, "short") : "";
    this.isCharacter = false;
    data.tags.forEach((tag) => {
      if (tag.startsWith(RpgFunctions.settings.npcTag) || tag.startsWith(RpgFunctions.settings.pcTag)) {
        this.isCharacter = true;
        this.pronoun = PronounFactory.create(data.pronoun);
      }
    });
  }
};

// src/settings/Agnostic/data/TimelineList.ts
var TimelineList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
  sort() {
    this.elements.sort((a, b) => {
      return a.datetime - b.datetime;
    });
  }
};

// src/abstracts/AbstractView.ts
var AbstractView = class {
  constructor(sourcePath) {
    this.sourcePath = sourcePath;
  }
};

// src/settings/Agnostic/views/StringView.ts
var StringView = class extends AbstractView {
  render(container, data) {
    const divContainer = container.createDiv();
    data.content.fillContent(divContainer, this.sourcePath);
  }
};

// src/settings/Agnostic/views/TableView.ts
var TableView = class extends AbstractView {
  render(container, data) {
    const divContainer = container.createDiv();
    if (data.title != null) {
      divContainer.createEl("h2", { text: data.title });
    }
    const table = divContainer.createEl("table");
    table.addClass("rpgm-table");
    const header = table.createEl("tr");
    data.headers.forEach((content) => {
      const cell = header.createEl("th");
      content.fillContent(cell, this.sourcePath);
      if (content.isInLine) {
        cell.addClass("inline");
      }
    });
    data.content.forEach((element) => {
      const row = table.createEl("tr");
      element.forEach((content) => {
        const cell = row.createEl("td");
        content.fillContent(cell, this.sourcePath);
        if (content.isInLine) {
          cell.addClass("inline");
        }
      });
    });
  }
};

// src/factories/ViewFactory.ts
var ViewsMap = {
  AgnosticString: StringView,
  AgnosticTable: TableView
};
var ViewFactory = class {
  static create(k, sourcePath) {
    return new ViewsMap[k](sourcePath);
  }
};

// src/enums/ResponseType.ts
var ResponseType = /* @__PURE__ */ ((ResponseType2) => {
  ResponseType2[ResponseType2["Table"] = 0] = "Table";
  ResponseType2[ResponseType2["String"] = 1] = "String";
  return ResponseType2;
})(ResponseType || {});

// src/data/ImageData.ts
var ImageData = class extends AbstractImageData {
  constructor(data, width = 75, height = 75) {
    super(data);
    this.image = this.imageSrc !== null ? RpgFunctions.getImage(data, width, height) : "";
  }
};

// src/settings/Vampire/data/VampireCharacterData.ts
var VampireCharacterData = class extends CharacterData {
};

// src/settings/Raw/data/RawCharacterData.ts
var RawCharacterData = class extends CharacterData {
};

// src/factories/DataFactory.ts
var DatasMap = {
  AgnosticCampaign: CampaignData,
  AgnosticAdventure: AdventureData,
  AgnosticSession: SessionData,
  AgnosticScene: SceneData,
  AgnosticCharacter: CharacterData,
  AgnosticNonPlayerCharacter: CharacterData,
  AgnosticClue: ClueData,
  AgnosticEvent: EventData,
  AgnosticFaction: FactionData,
  AgnosticLocation: LocationData,
  RawCharacter: RawCharacterData,
  VampireCharacter: VampireCharacterData
};
var DataFactory = class {
  static create(k, current, campaign, additionalInformation = "") {
    return new DatasMap[k](current, campaign, additionalInformation);
  }
};

// src/factories/DataListFactory.ts
var DataListsMap = {
  AgnosticAdventure: AdventureList,
  AgnosticCharacter: CharacterList,
  AgnosticClue: ClueList,
  AgnosticEvent: EventList,
  AgnosticFaction: FactionList,
  AgnosticLocation: LocationList,
  AgnosticScene: SceneList,
  AgnosticSession: SessionList,
  AgnosticTimeline: TimelineList
};
var DataListFactory = class {
  static create(k, campaign) {
    return new DataListsMap[k](campaign);
  }
};

// src/abstracts/AbstractIo.ts
var AbstractIo = class {
  constructor(app, campaign, dv, current) {
    this.app = app;
    this.campaign = campaign;
    this.dv = dv;
    this.current = current;
    this.id = null;
    var _a;
    this.outlinks = [];
    this.readOutlinks();
    if (((_a = this.current) == null ? void 0 : _a.tags) != null) {
      this.current.tags.forEach((tag) => {
        if (tag.startsWith(RpgFunctions.settings.campaignTag)) {
          RpgFunctions.getTagId(this.current.tags, 0 /* Campaign */);
        } else if (tag.startsWith(RpgFunctions.settings.adventureTag)) {
          RpgFunctions.getTagId(this.current.tags, 1 /* Adventure */);
        } else if (tag.startsWith(RpgFunctions.settings.sessionTag)) {
          RpgFunctions.getTagId(this.current.tags, 2 /* Session */);
        } else if (tag.startsWith(RpgFunctions.settings.sceneTag)) {
          RpgFunctions.getTagId(this.current.tags, 3 /* Scene */);
        }
      });
    }
  }
  readOutlinks() {
    if (this.current != void 0) {
      this.current.file.outlinks.forEach((file) => {
        const page = this.dv.page(file.path);
        if (page != void 0) {
          this.outlinks.push(page);
        }
      });
    }
  }
  isAlreadyPresent(list, element) {
    let response = false;
    list.elements.forEach((existingElement) => {
      if (element.file.path === existingElement.path) {
        response = true;
        return true;
      }
    });
    return response;
  }
  getCorrectTag(type) {
    let response = "";
    switch (type) {
      case 4 /* Character */:
        response = "(#" + RpgFunctions.settings.npcTag + "/" + this.campaign.id + " or #" + RpgFunctions.settings.pcTag + "/" + this.campaign.id + ")";
        break;
      case 8 /* Clue */:
        response = "#" + RpgFunctions.settings.clueTag + "/" + this.campaign.id;
        break;
      case 6 /* Location */:
        response = "#" + RpgFunctions.settings.locationTag + "/" + this.campaign.id;
        break;
      case 9 /* Faction */:
        response = "#" + RpgFunctions.settings.factionTag + "/" + this.campaign.id;
        break;
      case 7 /* Event */:
        response = "#" + RpgFunctions.settings.eventTag + "/" + this.campaign.id;
        break;
    }
    return response;
  }
  getAdventureList() {
    const response = new AdventureList(this.campaign);
    const query = "#" + RpgFunctions.settings.adventureTag + "/" + this.campaign.id;
    this.dv.pages(query).sort((adventure) => -RpgFunctions.getTagId(adventure.tags, 1 /* Adventure */)).forEach((adventure) => {
      response.add(new AdventureData(adventure, this.campaign));
    });
    return response;
  }
  getAdventure(adventureId) {
    let response = null;
    const query = "#" + RpgFunctions.settings.adventureTag + "/" + this.campaign.id + "/" + adventureId;
    const adventures = this.dv.pages(query);
    if (adventures !== null && adventures.length === 1) {
      response = new AdventureData(adventures[0], this.campaign);
    }
    return response;
  }
  getSession(adventureId, sessionId) {
    let response = null;
    let sessions;
    if (adventureId != null) {
      const query = "#" + RpgFunctions.settings.sessionTag + "/" + this.campaign.id + "/" + adventureId + "/" + sessionId;
      sessions = this.dv.pages(query);
    } else {
      const query = "#" + RpgFunctions.settings.sessionTag + "/" + this.campaign.id;
      sessions = this.dv.pages(query).where((session) => RpgFunctions.getTagId(session.tags, 2 /* Session */) === sessionId);
    }
    if (sessions !== null && sessions.length === 1) {
      response = new SessionData(sessions[0], this.campaign);
    }
    return response;
  }
  getSessionList(adventureId = null) {
    const response = new SessionList(this.campaign);
    const query = "#" + RpgFunctions.settings.sessionTag + "/" + this.campaign.id + (adventureId !== null ? "/" + adventureId : "");
    this.dv.pages(query).sort((session) => -RpgFunctions.getTagId(session.tags, 2 /* Session */)).forEach((session) => {
      response.add(new SessionData(session, this.campaign));
    });
    return response;
  }
  getSceneList(adventureId, sessionId) {
    const response = new SceneList(this.campaign);
    const query = "#" + RpgFunctions.settings.sceneTag + "/" + this.campaign.id + "/" + adventureId + "/" + sessionId;
    this.dv.pages(query).sort((scene) => RpgFunctions.getTagId(scene.tags, 3 /* Scene */)).forEach((scene) => {
      response.add(DataFactory.create(CampaignSetting[this.campaign.settings] + "Scene", scene, this.campaign));
    });
    return response;
  }
  getCharacterList() {
    const response = new CharacterList(this.campaign);
    const query = "(#" + RpgFunctions.settings.npcTag + "/" + this.campaign.id + " or #" + RpgFunctions.settings.pcTag + "/" + this.campaign.id + ")";
    this.dv.pages(query).sort((character) => character.file.name).forEach((character) => {
      response.add(new CharacterData(character, this.campaign));
    });
    return response;
  }
  getClue() {
    return new ClueData(this.current, this.campaign);
  }
  getImage(width = 75, height = 75) {
    return new ImageData(this.current, width, height);
  }
  getSynopsis(title = null) {
    return new SynopsisData(this.current, title);
  }
  getScene(adventureId, sessionId, sceneId) {
    let response = null;
    if (adventureId === null || sessionId === null || sceneId === null) {
      response = DataFactory.create(CampaignSetting[this.campaign.settings] + "Scene", this.current, this.campaign);
    } else {
      const query = "#" + RpgFunctions.settings.sceneTag + "/" + this.campaign.id + "/" + adventureId + "/" + sessionId + "/" + sceneId;
      const scenes = this.dv.pages(query);
      if (scenes !== null && scenes.length === 1) {
        response = DataFactory.create(CampaignSetting[this.campaign.settings] + "Scene", this.current, this.campaign);
      }
    }
    return response;
  }
  getRelationshipList(type, parentType = null, sorting = null) {
    const response = DataListFactory.create(CampaignSetting[this.campaign.settings] + DataType[type], this.campaign);
    this.variableSingular = DataType[type].toLowerCase();
    this.variablePlural = this.variableSingular + "s";
    const defaultSorting = function(page) {
      return page.file.name;
    };
    let comparison;
    if (parentType === null) {
      comparison = function(page) {
        return this.current.relationships != void 0 && this.current.relationships[this.variablePlural] != void 0 && this.current.relationships[this.variablePlural][page.file.name] !== void 0;
      }.bind(this);
    } else {
      this.variableParentSingular = DataType[parentType].toLowerCase();
      this.variableParentPlural = this.variableParentSingular + "s";
      comparison = function(page) {
        return page.relationships != void 0 && page.relationships[this.variableParentPlural] != void 0 && page.relationships[this.variableParentPlural][this.current.file.name] !== void 0;
      }.bind(this);
    }
    const query = this.getCorrectTag(type);
    this.dv.pages(query).where(comparison).sort(sorting !== null ? sorting : defaultSorting).forEach((page) => {
      const dataName = CampaignSetting[this.campaign.settings] + DataType[type];
      response.add(DataFactory.create(dataName, page, this.campaign, parentType === null ? this.current.relationships[this.variablePlural][page.file.name] : page.relationships[DataType[parentType].toLowerCase() + "s"][this.current.file.name]));
    });
    this.outlinks.forEach((page) => {
      if (page.tags != void 0 && type === RpgFunctions.getDataType(page.tags) && !this.isAlreadyPresent(response, page)) {
        response.add(DataFactory.create(CampaignSetting[this.campaign.settings] + DataType[type], page, this.campaign, "_in main description_"));
      }
    });
    return response;
  }
};

// src/settings/Agnostic/io/Io.ts
var Io = class extends AbstractIo {
};

// src/factories/Iofactory.ts
var IosMap = {
  AgnosticIo: Io
};
var IoFactory = class {
  static create(k, app, campaign, dv, current) {
    return new IosMap[k](app, campaign, dv, current);
  }
};

// src/abstracts/AbstractModel.ts
var AbstractModel = class {
  constructor(app, campaign, current, dv, source) {
    this.app = app;
    this.campaign = campaign;
    this.current = current;
    this.dv = dv;
    this.source = source;
    this.io = IoFactory.create(CampaignSetting[this.campaign.settings] + "Io", this.app, this.campaign, this.dv, this.current);
    this.dataType = RpgFunctions.getDataType(this.current.tags);
    if (this.dataType != null) {
      this.specificData = DataFactory.create(CampaignSetting[this.campaign.settings] + DataType[this.dataType], this.current, this.campaign, "");
    }
    if (this.dataType === 2 /* Session */) {
      this.specificData.adventure = this.io.getAdventure(this.specificData.adventureId);
    } else if (this.dataType === 3 /* Scene */) {
      this.specificData.adventure = this.io.getAdventure(this.specificData.adventureId);
      this.specificData.session = this.io.getSession(this.specificData.adventureId, this.specificData.sessionId);
      this.specificData.previousScene = this.io.getScene(this.specificData.adventureId, this.specificData.sessionId, this.specificData.id - 1);
      this.specificData.nextScene = this.io.getScene(this.specificData.adventureId, this.specificData.sessionId, this.specificData.id + 1);
    }
  }
};

// src/abstracts/AbstractComponent.ts
var AbstractComponent = class {
  constructor(io) {
    this.io = io;
  }
};

// src/abstracts/AbstractResponse.ts
var AbstractResponse = class {
  addTitle(title) {
    this.title = title;
  }
};

// src/data/ResponseTable.ts
var ResponseTable = class extends AbstractResponse {
  constructor() {
    super();
    this.responseType = 0 /* Table */;
    this.headers = [];
    this.content = [];
  }
  addHeaders(headers) {
    this.headers = headers;
  }
  addContent(content) {
    this.content.push(content);
  }
  addContentList(content) {
    this.content = content;
  }
};

// src/abstracts/AbstractContent.ts
var AbstractContent = class {
  constructor(content, isInLine = null) {
    this.isInLine = false;
    this.content = content;
    if (isInLine != null) {
      this.isInLine = isInLine;
    }
  }
};

// src/data/content/StringContent.ts
var StringContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    container.textContent = this.content != null ? this.content : "";
  }
};

// src/data/content/LinkContent.ts
var import_obsidian2 = require("obsidian");
var LinkContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      import_obsidian2.MarkdownRenderer.renderMarkdown(this.content.toString(), container, sourcePath, null);
    } else {
      container.textContent = "";
    }
  }
};

// src/data/content/NumberContent.ts
var NumberContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    container.textContent = this.content != null ? this.content.toString() : "";
  }
};

// src/data/content/ObjectContent.ts
var import_obsidian3 = require("obsidian");
var ObjectContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      import_obsidian3.MarkdownRenderer.renderMarkdown(this.content.toString(), container, sourcePath, null);
    } else {
      container.textContent = "";
    }
  }
};

// src/data/content/MarkdownContent.ts
var import_obsidian4 = require("obsidian");
var MarkdownContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      import_obsidian4.MarkdownRenderer.renderMarkdown(this.content, container, sourcePath, null);
    } else {
      container.textContent = "";
    }
  }
};

// src/data/content/ImageContent.ts
var ImageContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      this.content.style.width = "75px";
      this.content.style.height = "75px";
      this.content.style.objectFit = "cover";
      container.append(this.content);
      container.style.width = this.content.style.width;
    } else {
      container.textContent = "";
    }
  }
};

// src/factories/ContentFactory.ts
var ContentFactory = class {
  static create(content, type, isInline = false) {
    switch (type) {
      case 0 /* String */:
        return new StringContent(content, isInline);
        break;
      case 2 /* Link */:
        return new LinkContent(content, isInline);
        break;
      case 1 /* Number */:
        return new NumberContent(content, isInline);
        break;
      case 3 /* Object */:
        return new ObjectContent(content, isInline);
        break;
      case 4 /* Markdown */:
        return new MarkdownContent(content, isInline);
        break;
      case 5 /* Image */:
        return new ImageContent(content, isInline);
        break;
    }
  }
};

// src/settings/Agnostic/components/SessionTableComponent.ts
var SessionTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Sessions");
    response.addHeaders([
      ContentFactory.create("#", 0 /* String */, true),
      ContentFactory.create("Session", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */),
      ContentFactory.create("Date", 0 /* String */),
      ContentFactory.create("Play Date", 0 /* String */)
    ]);
    data.elements.forEach((session) => {
      response.addContent([
        ContentFactory.create(session.id, 1 /* Number */, true),
        ContentFactory.create(session.link, 2 /* Link */),
        ContentFactory.create(session.synopsis, 4 /* Markdown */),
        ContentFactory.create(session.date, 0 /* String */, true),
        ContentFactory.create(session.irl, 0 /* String */, true)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/AdventureTableComponent.ts
var AdventureTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Adventures");
    response.addHeaders([
      ContentFactory.create("#", 0 /* String */, true),
      ContentFactory.create("Adventure", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */)
    ]);
    data.elements.forEach((adventure) => {
      response.addContent([
        ContentFactory.create(adventure.id, 1 /* Number */, true),
        ContentFactory.create(adventure.link, 2 /* Link */),
        ContentFactory.create(adventure.synopsis, 4 /* Markdown */)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/CharacterTableComponent.ts
var CharacterTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Characters");
    response.addHeaders([
      ContentFactory.create("", 0 /* String */, true),
      ContentFactory.create("Character", 0 /* String */),
      ContentFactory.create("Age", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */)
    ]);
    data.elements.forEach((character) => {
      response.addContent([
        ContentFactory.create(character.imageSrcElement, 5 /* Image */, true),
        ContentFactory.create(character.link, 2 /* Link */, true),
        ContentFactory.create(character.age, 0 /* String */, true),
        ContentFactory.create(character.synopsis, 4 /* Markdown */)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/LocationTableComponent.ts
var LocationTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Locations");
    response.addHeaders([
      ContentFactory.create("", 0 /* String */, true),
      ContentFactory.create("Name", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */)
    ]);
    data.elements.forEach((location) => {
      response.addContent([
        ContentFactory.create(location.imageSrcElement, 5 /* Image */, true),
        ContentFactory.create(location.link, 2 /* Link */, true),
        ContentFactory.create(location.synopsis, 4 /* Markdown */)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/EventTableComponent.ts
var EventTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Events");
    response.addHeaders([
      ContentFactory.create("", 0 /* String */, true),
      ContentFactory.create("Name", 0 /* String */),
      ContentFactory.create("Date", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */)
    ]);
    data.elements.forEach((event) => {
      response.addContent([
        ContentFactory.create(event.imageSrcElement, 5 /* Image */, true),
        ContentFactory.create(event.link, 2 /* Link */, true),
        ContentFactory.create(event.date, 0 /* String */),
        ContentFactory.create(event.synopsis, 4 /* Markdown */)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/ClueTableComponent.ts
var ClueTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Clues");
    response.addHeaders([
      ContentFactory.create("", 0 /* String */, true),
      ContentFactory.create("Clue", 0 /* String */),
      ContentFactory.create("Found", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */)
    ]);
    data.elements.forEach((clue) => {
      response.addContent([
        ContentFactory.create(clue.imageSrcElement, 5 /* Image */, true),
        ContentFactory.create(clue.link, 2 /* Link */, true),
        ContentFactory.create(clue.found === false ? '<span class="rpgm-missing">no</span>' : clue.found, 4 /* Markdown */),
        ContentFactory.create(clue.synopsis, 4 /* Markdown */)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/FactionTableComponent.ts
var FactionTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Factions");
    response.addHeaders([
      ContentFactory.create("", 0 /* String */, true),
      ContentFactory.create("Faction", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */)
    ]);
    data.elements.forEach((faction) => {
      response.addContent([
        ContentFactory.create(faction.imageSrcElement, 5 /* Image */, true),
        ContentFactory.create(faction.link, 2 /* Link */, true),
        ContentFactory.create(faction.synopsis, 4 /* Markdown */)
      ]);
    });
    return response;
  }
};

// src/settings/Agnostic/components/SceneTableComponent.ts
var SceneTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    if (data.elements.length === 0) {
      return null;
    }
    const response = new ResponseTable();
    response.addTitle(title ? title : "Scenes");
    response.addHeaders([
      ContentFactory.create("#", 0 /* String */, true),
      ContentFactory.create("Scene", 0 /* String */),
      ContentFactory.create("Synopsis", 0 /* String */),
      ContentFactory.create("Start", 0 /* String */),
      ContentFactory.create("End", 0 /* String */),
      ContentFactory.create("Duration", 0 /* String */)
    ]);
    data.elements.forEach((scene) => {
      response.addContent([
        ContentFactory.create(scene.completed ? scene.id.toString() : "**" + scene.id + "**", 4 /* Markdown */, true),
        ContentFactory.create(scene.link, 2 /* Link */),
        ContentFactory.create(scene.synopsis, 4 /* Markdown */),
        ContentFactory.create(scene.startTime, 0 /* String */, true),
        ContentFactory.create(scene.endTime, 0 /* String */, true),
        ContentFactory.create(scene.duration, 0 /* String */, true)
      ]);
    });
    return response;
  }
};

// src/factories/ComponentFactory.ts
var ComponentsMap = {
  AgnosticSessionTable: SessionTableComponent,
  AgnosticAdventureTable: AdventureTableComponent,
  AgnosticCharacterTable: CharacterTableComponent,
  AgnosticLocationTable: LocationTableComponent,
  AgnosticEventTable: EventTableComponent,
  AgnosticClueTable: ClueTableComponent,
  AgnosticFactionTable: FactionTableComponent,
  AgnosticSceneTable: SceneTableComponent
};
var ComponentFactory = class {
  static create(k, io, data, title = null) {
    const component = new ComponentsMap[k](io);
    return component.generateData(data, title);
  }
};

// src/data/ResponseData.ts
var ResponseData = class {
  constructor() {
    this.elements = [];
  }
  addElement(element) {
    if (element != null) {
      this.elements.push(element);
    }
  }
};

// src/settings/Agnostic/models/AdventureModel.ts
var AdventureModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    const adventure = new AdventureData(this.current, this.campaign);
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "SessionTable", this.io, this.io.getSessionList(adventure.id)));
    return response;
  }
};

// src/settings/Agnostic/models/CampaignModel.ts
var CampaignModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "AdventureTable", this.io, this.io.getAdventureList()));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "SessionTable", this.io, this.io.getSessionList()));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getCharacterList()));
    return response;
  }
};

// src/settings/Agnostic/models/ClueModel.ts
var ClueModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "EventTable", this.io, this.io.getRelationshipList(7 /* Event */, 8 /* Clue */)));
    return response;
  }
};

// src/settings/Agnostic/models/ErrorModel.ts
var ErrorModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    return response;
  }
};

// src/settings/Agnostic/models/EventModel.ts
var EventModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "ClueTable", this.io, this.io.getRelationshipList(8 /* Clue */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */)));
    return response;
  }
};

// src/settings/Agnostic/models/FactionModel.ts
var FactionModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */, 9 /* Faction */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */)));
    return response;
  }
};

// src/settings/Agnostic/models/LocationModel.ts
var LocationModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */, 9 /* Faction */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "EventTable", this.io, this.io.getRelationshipList(7 /* Event */, 6 /* Location */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "ClueTable", this.io, this.io.getRelationshipList(8 /* Clue */, 6 /* Location */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */), "Contained locations"));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */, 6 /* Location */), "Part of locations"));
    return response;
  }
};

// src/settings/Agnostic/models/NotesModel.ts
var NotesModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    return response;
  }
};

// src/settings/Agnostic/models/NpcModel.ts
var NpcModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "FactionTable", this.io, this.io.getRelationshipList(9 /* Faction */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "EventTable", this.io, this.io.getRelationshipList(7 /* Event */, 4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "ClueTable", this.io, this.io.getRelationshipList(8 /* Clue */, 4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */)));
    return response;
  }
};

// src/settings/Agnostic/models/PcModel.ts
var PcModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "FactionTable", this.io, this.io.getRelationshipList(9 /* Faction */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "LocationTable", this.io, this.io.getRelationshipList(6 /* Location */)));
    return response;
  }
};

// src/settings/Agnostic/models/SceneModel.ts
var SceneModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "CharacterTable", this.io, this.io.getRelationshipList(4 /* Character */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "FactionTable", this.io, this.io.getRelationshipList(9 /* Faction */)));
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "ClueTable", this.io, this.io.getRelationshipList(8 /* Clue */)));
    return response;
  }
};

// src/settings/Agnostic/models/SessionModel.ts
var SessionModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    response.addElement(ComponentFactory.create(CampaignSetting[this.campaign.settings] + "SceneTable", this.io, this.io.getSceneList(RpgFunctions.getTagId(this.current.tags, 1 /* Adventure */), RpgFunctions.getTagId(this.current.tags, 2 /* Session */))));
    return response;
  }
};

// src/settings/Agnostic/models/SessionNavigationModel.ts
var SessionNavigationModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    return response;
  }
};

// src/settings/Agnostic/models/TimelineModel.ts
var TimelineModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    return response;
  }
};

// src/settings/Agnostic/models/SceneNavigationModel.ts
var SceneNavigationModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    return response;
  }
};

// src/settings/Agnostic/models/CampaignNavigationModel.ts
var CampaignNavigationModel = class extends AbstractModel {
  generateData() {
    const response = new ResponseData();
    return response;
  }
};

// src/factories/ModelFactory.ts
var ModelsMap = {
  AgnosticAdventure: AdventureModel,
  AgnosticCampaign: CampaignModel,
  AgnosticCampaignNavigation: CampaignNavigationModel,
  AgnosticClue: ClueModel,
  AgnosticError: ErrorModel,
  AgnosticEvent: EventModel,
  AgnosticFaction: FactionModel,
  AgnosticLocation: LocationModel,
  AgnosticNotes: NotesModel,
  AgnosticNpc: NpcModel,
  AgnosticPc: PcModel,
  AgnosticScene: SceneModel,
  AgnosticSceneNavigation: SceneNavigationModel,
  AgnosticSession: SessionModel,
  AgnosticSessionNavigation: SessionNavigationModel,
  AgnosticTimeline: TimelineModel
};
var ModelFactory = class {
  static create(k, app, campaign, current, dv, source) {
    return new ModelsMap[k](app, campaign, current, dv, source);
  }
};

// src/Controller.ts
var Controller = class extends import_obsidian5.MarkdownRenderChild {
  constructor(app, container, source, component, sourcePath) {
    super(container);
    this.app = app;
    this.container = container;
    this.source = source;
    this.component = component;
    this.sourcePath = sourcePath;
    this.isActive = false;
    this.dv = this.app.plugins.plugins.dataview.localApi(this.sourcePath, this.component, this.container);
  }
  initialise() {
    const current = this.dv.current();
    if (current == null) {
      this.isActive = false;
    } else {
      this.isActive = true;
      this.current = current;
      this.loadCampaign();
      let model = this.source.replace(/[\n\r]/g, "").toLowerCase();
      model = model[0].toUpperCase() + model.substring(1);
      model = model.replace("navigation", "Navigation");
      const modelName = CampaignSetting[this.campaign.settings] + model;
      this.model = ModelFactory.create(modelName, this.app, this.campaign, this.current, this.dv, this.source);
    }
  }
  onload() {
    this.registerEvent(this.app.workspace.on("rpgmanager:refresh-views", function() {
      this.render();
    }.bind(this)));
  }
  loadCampaign() {
    const campaignId = RpgFunctions.getTagId(this.current.tags, 0 /* Campaign */);
    const campaigns = this.dv.pages("#" + RpgFunctions.settings.campaignTag + "/" + campaignId);
    if (campaigns.length !== 1) {
      throw new Error("Campaign Missing");
    }
    this.campaign = new CampaignData(campaigns[0]);
  }
  render() {
    return __async(this, null, function* () {
      this.initialise();
      if (this.isActive) {
        this.render = (0, import_obsidian5.debounce)(this.render, 1e3, true);
        const activeLeaf = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
        if (activeLeaf != null && activeLeaf.file.path === this.sourcePath) {
          this.container.empty();
          this.model.generateData().elements.forEach((element) => {
            const viewName = CampaignSetting[this.campaign.settings] + ResponseType[element.responseType];
            const view = ViewFactory.create(viewName, this.sourcePath);
            view.render(this.container, element);
          });
        }
      }
    });
  }
};

// src/main.ts
var RpgManager = class extends import_obsidian6.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("Loading RpgManager " + this.manifest.version);
      yield this.loadSettings();
      this.addSettingTab(new RpgManagerSettingTab(this.app, this));
      RpgFunctions.initialise(this.app, this.settings);
      this.registerEvents();
      this.registerCodeBlock();
      this.registerCommands();
    });
  }
  onunload() {
    return __async(this, null, function* () {
      __superGet(RpgManager.prototype, this, "onunload").call(this);
      this.app.workspace.off("resolved", this.refreshViews);
      this.app.workspace.off("modify", this.refreshViews);
    });
  }
  refreshViews() {
    this.app.workspace.trigger("rpgmanager:refresh-views");
  }
  createRpgView(source, el, component, sourcePath) {
    return __async(this, null, function* () {
      component.addChild(new Controller(this.app, el, source, component, sourcePath));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  registerEvents() {
    this.registerEvent(this.app.metadataCache.on("resolved", function() {
      console.log("EVENT: RESOLVED");
      this.refreshViews();
    }.bind(this)));
    this.registerEvent(this.app.workspace.on("file-open", function() {
      console.log("EVENT: FILE-OPEN");
      this.refreshViews();
    }.bind(this)));
    this.registerEvent(this.app.workspace.on("dataview:refresh-views", function() {
      console.log("EVENT: REFRESH-VIEWS");
      this.refreshViews();
    }.bind(this)));
  }
  registerCodeBlock() {
    this.registerMarkdownCodeBlockProcessor("RpgManager", (source, el, ctx) => __async(this, null, function* () {
      return this.createRpgView(source, el, ctx, ctx.sourcePath);
    }));
  }
  registerCommands() {
  }
};
var DEFAULT_SETTINGS = {
  campaignTag: "rpgm/outline/campaign",
  adventureTag: "rpgm/outline/adventure",
  sessionTag: "rpgm/outline/session",
  sceneTag: "rpgm/outline/scene",
  npcTag: "rpgm/element/character/npc",
  pcTag: "rpgm/element/character/pc",
  locationTag: "rpgm/element/location",
  factionTag: "rpgm/element/faction",
  eventTag: "rpgm/element/event",
  clueTag: "rpgm/element/clue",
  timelineTag: "rpgm/element/timeline",
  noteTag: "rpgm/element/note"
};
var RpgManagerSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "CampaignSetting for Role Playing Game Manager" });
    containerEl.createEl("h3", { text: "Outlines" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Outlines are the plot part of the campaign.");
      frag.createEl("br");
      frag.appendText("The outlines are organised as campaigns > adventures > sessions > scenes");
      frag.createEl("br");
      frag.appendText("Each tag that identifies an outline should be followed by the ids of the parent outlines and end with a unique identifier for the current outline");
      frag.createEl("br");
      frag.createEl("span");
      frag.appendText(" ");
    }) });
    new import_obsidian6.Setting(this.containerEl).setName("Campaign Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying the campaign");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/campaign").setValue(this.plugin.settings.campaignTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Adventure Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying an Adventure");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}/{adventureId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/adventure").setValue(this.plugin.settings.adventureTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Session Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying a Session");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}/{adventureId}/{sessionId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/session").setValue(this.plugin.settings.sessionTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Scenes Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying a Scene");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}/{adventureId}/{sessionId}/{sceneId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/scene").setValue(this.plugin.settings.sceneTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Elements" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Elements are all the parts of the campaign which are not a plot.");
      frag.createEl("br");
      frag.appendText("The elements do not have a hyerarchical structure, but they only identify the campaign they belong to.");
      frag.createEl("br");
      frag.appendText("Each tag that identifies an element should be followed by the {campaignId}");
      frag.createEl("br");
      frag.appendText(" ");
    }) });
    new import_obsidian6.Setting(this.containerEl).setName("Player Character Tag").addText((text) => text.setPlaceholder("rpgm/element/character/pc").setValue(this.plugin.settings.pcTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Non Player Character Tag").addText((text) => text.setPlaceholder("rpgm/element/character/npc").setValue(this.plugin.settings.npcTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Location Tag").addText((text) => text.setPlaceholder("rpgm/element/location").setValue(this.plugin.settings.locationTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Faction Tag").addText((text) => text.setPlaceholder("rpgm/element/faction").setValue(this.plugin.settings.factionTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Event Tag").addText((text) => text.setPlaceholder("rpgm/element/event").setValue(this.plugin.settings.eventTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Clue Tag").addText((text) => text.setPlaceholder("rpgm/element/clue").setValue(this.plugin.settings.clueTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Timeline Tag").addText((text) => text.setPlaceholder("rpgm/element/timeline").setValue(this.plugin.settings.timelineTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(this.containerEl).setName("Note Tag").addText((text) => text.setPlaceholder("rpgm/element/note").setValue(this.plugin.settings.noteTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
  }
};
