/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __reflectGet = Reflect.get;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  RpgManagerSettingTab: () => RpgManagerSettingTab,
  default: () => RpgManager
});
module.exports = __toCommonJS(main_exports);
var import_obsidian19 = require("obsidian");

// src/RpgController.ts
var import_obsidian = require("obsidian");

// src/enums/DataType.ts
var DataType = /* @__PURE__ */ ((DataType2) => {
  DataType2[DataType2["Campaign"] = 1] = "Campaign";
  DataType2[DataType2["Adventure"] = 2] = "Adventure";
  DataType2[DataType2["Session"] = 4] = "Session";
  DataType2[DataType2["Scene"] = 8] = "Scene";
  DataType2[DataType2["Character"] = 16] = "Character";
  DataType2[DataType2["NonPlayerCharacter"] = 32] = "NonPlayerCharacter";
  DataType2[DataType2["Location"] = 64] = "Location";
  DataType2[DataType2["Event"] = 128] = "Event";
  DataType2[DataType2["Clue"] = 256] = "Clue";
  DataType2[DataType2["Faction"] = 512] = "Faction";
  DataType2[DataType2["Note"] = 1024] = "Note";
  DataType2[DataType2["Timeline"] = 2048] = "Timeline";
  DataType2[DataType2["Music"] = 4096] = "Music";
  return DataType2;
})(DataType || {});

// src/abstracts/database/AbstractRecord.ts
var AbstractRecord = class {
  constructor(app2, tag, type, file) {
    this.app = app2;
    this.tag = tag;
    this.type = type;
    this.file = file;
    this.synopsis = null;
    this.additionalInformation = null;
    this.imageSrc = void 0;
    this.relationships = /* @__PURE__ */ new Map();
  }
  initialise() {
    return __async(this, null, function* () {
      var _a, _b;
      const metadata = this.app.metadataCache.getFileCache(this.file);
      if (metadata === null)
        throw new Error("metadata is null");
      this.metadata = metadata;
      this.frontmatter = (_a = this.metadata.frontmatter) != null ? _a : {};
      this.tags = this.app.plugins.getPlugin("rpg-manager").tagManager.sanitiseTags((_b = this.frontmatter) == null ? void 0 : _b.tags);
      this.completed = this.frontmatter.completed ? this.frontmatter.completed : true;
      this.synopsis = this.frontmatter.synopsis;
      yield this.app.plugins.getPlugin("rpg-manager").factories.relationships.read(this.file, this.relationships);
      this.loadData();
    });
  }
  loadData() {
  }
  reload() {
    return __async(this, null, function* () {
      yield this.initialise();
      yield this.loadData();
    });
  }
  loadHierarchy(database) {
    return __async(this, null, function* () {
      if (this.type !== 1 /* Campaign */) {
        this.campaign = database.readSingle(database, 1 /* Campaign */, this.tag);
      }
    });
  }
  loadRelationships(database) {
    return __async(this, null, function* () {
      this.relationships.forEach((relationship, name) => {
        const dataList = database.read((data) => data.name === name, void 0);
        switch (dataList.length) {
          case 0:
            relationship.component = void 0;
            break;
          case 1:
            relationship.component = dataList[0];
            break;
        }
      });
    });
  }
  loadReverseRelationships() {
    return __async(this, null, function* () {
      if (!this.isOutline) {
        this.relationships.forEach((relationship, name) => {
          if (relationship.component !== void 0 && relationship.isInFrontmatter === true) {
            relationship.component.addReverseRelationship(this.name, {
              component: this,
              description: relationship.description,
              isReverse: true,
              isInFrontmatter: true
            });
          }
        });
      }
    });
  }
  addReverseRelationship(name, relationship) {
    this.relationships.set(name, relationship);
  }
  get name() {
    return this.file.basename;
  }
  get path() {
    return this.file.path;
  }
  get link() {
    return "[[" + this.name + "]]";
  }
  get imageSrcElement() {
    if (this.imageSrc === null)
      return null;
    return this.app.plugins.getPlugin("rpg-manager").functions.getImgElement(this.image);
  }
  get folder() {
    const lastSlashPosition = this.path.lastIndexOf("/");
    return lastSlashPosition !== -1 ? this.path.substring(0, lastSlashPosition + 1) : "/";
  }
  get image() {
    return this.app.plugins.getPlugin("rpg-manager").functions.getImg(this.name);
  }
  getRelationships(type, requiresReversedRelationship = false) {
    const response = [];
    this.relationships.forEach((data, name) => {
      if (data.component !== void 0 && (type & data.component.type) == data.component.type) {
        if (!requiresReversedRelationship || data.isReverse)
          response.push(data.component);
      }
    });
    return response;
  }
  initialiseDate(date) {
    if (date == null)
      return null;
    const response = new Date(date);
    return response;
  }
};

// src/errors/RpgError.ts
var RpgError = class extends Error {
  constructor(app2, type, tag, campaignId = void 0, adventureId = void 0, sessionId = void 0, sceneId = void 0) {
    super();
    this.app = app2;
    this.type = type;
    this.tag = tag;
    this.campaignId = campaignId;
    this.adventureId = adventureId;
    this.sessionId = sessionId;
    this.sceneId = sceneId;
  }
  showErrorMessage() {
    var _a, _b, _c, _d;
    let response = "";
    if (this.tag !== void 0) {
      this.campaignId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(1 /* Campaign */, this.tag);
      this.adventureId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(2 /* Adventure */, this.tag);
      this.sessionId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(4 /* Session */, this.tag);
      this.sceneId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(8 /* Scene */, this.tag);
    }
    switch (this.type) {
      case 8 /* Scene */:
        response = "sceneId: " + ((_a = this.sceneId) != null ? _a : "_missing id_") + "\n" + response;
      case 1024 /* Note */:
      case 4 /* Session */:
        response = "sessionId: " + ((_b = this.sessionId) != null ? _b : "_missing id_") + "\n" + response;
      case 2 /* Adventure */:
        response = "adventureId: " + ((_c = this.adventureId) != null ? _c : "_missing id_") + "\n" + response;
      default:
        response = "campaignId: " + ((_d = this.campaignId) != null ? _d : "_missing id_") + "\n" + response;
        break;
    }
    return response;
  }
};

// src/errors/ElementDuplicatedError.ts
var ElementDuplicatedError = class extends RpgError {
  showErrorMessage() {
    let response = super.showErrorMessage();
    response += "**Two elements with the same id exists in the data.**\nYou should only have one unique identifier for a " + DataType[this.type] + "\n";
    return response;
  }
};

// src/abstracts/database/AbstractOutlineData.ts
var AbstractOutlineData = class extends AbstractRecord {
  constructor(app2, tag, type, file) {
    super(app2, tag, type, file);
    this.isOutline = true;
    this.dataId = {
      dataType: this.type,
      campaignId: app2.plugins.getPlugin("rpg-manager").tagManager.getId(1 /* Campaign */, tag),
      adventureId: app2.plugins.getPlugin("rpg-manager").tagManager.getOptionalId(2 /* Adventure */, tag),
      sessionId: app2.plugins.getPlugin("rpg-manager").tagManager.getOptionalId(4 /* Session */, tag),
      sceneId: app2.plugins.getPlugin("rpg-manager").tagManager.getOptionalId(8 /* Scene */, tag)
    };
  }
  checkDuplicates(database) {
    const query = (data) => data.dataId === this.dataId;
    const elements = database.read(query, void 0);
    if (elements.length > 0)
      throw new ElementDuplicatedError(this.app, this.type, this.tag);
  }
};

// src/enums/CampaignSetting.ts
var CampaignSetting = /* @__PURE__ */ ((CampaignSetting2) => {
  CampaignSetting2[CampaignSetting2["Agnostic"] = 0] = "Agnostic";
  CampaignSetting2[CampaignSetting2["Raw"] = 1] = "Raw";
  CampaignSetting2[CampaignSetting2["Vampire"] = 2] = "Vampire";
  return CampaignSetting2;
})(CampaignSetting || {});

// src/data/Campaign.ts
var Campaign = class extends AbstractOutlineData {
  loadData() {
    var _a, _b, _c, _d, _e, _f;
    this.campaignId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(this.type, this.tag);
    if ((_b = (_a = this.frontmatter) == null ? void 0 : _a.dates) == null ? void 0 : _b.current)
      this.currentDate = new Date((_d = (_c = this.frontmatter) == null ? void 0 : _c.dates) == null ? void 0 : _d.current);
    this.settings = ((_e = this.frontmatter) == null ? void 0 : _e.settings) ? CampaignSetting[(_f = this.frontmatter) == null ? void 0 : _f.settings] : 0 /* Agnostic */;
    super.loadData();
  }
};

// src/RpgController.ts
var RpgController = class extends import_obsidian.MarkdownRenderChild {
  constructor(app2, container, source, component, sourcePath) {
    super(container);
    this.app = app2;
    this.container = container;
    this.source = source;
    this.component = component;
    this.sourcePath = sourcePath;
    this.isActive = false;
    this.rendering = false;
  }
  initialise() {
    var _a;
    if (((_a = this.app.plugins.getPlugin("rpg-manager")) == null ? void 0 : _a.database) === void 0)
      return;
    const currentElement = this.app.plugins.getPlugin("rpg-manager").database.readByName(void 0, this.sourcePath);
    if (currentElement == null) {
      this.isActive = false;
    } else {
      this.isActive = true;
      this.currentElement = currentElement;
      const sourceLines = this.source.split("\n");
      let modelName = sourceLines[0].toLowerCase();
      modelName = modelName[0].toUpperCase() + modelName.substring(1);
      modelName = modelName.replace("navigation", "Navigation");
      sourceLines.shift();
      const sourceMeta = (0, import_obsidian.parseYaml)(sourceLines.join("\n"));
      this.model = this.app.plugins.getPlugin("rpg-manager").factories.models.create(this.currentElement instanceof Campaign ? this.currentElement.settings : this.currentElement.campaign.settings, modelName, this.currentElement, this.source, this.sourcePath, sourceMeta);
    }
  }
  onload() {
    this.registerEvent(this.app.workspace.on("rpgmanager:refresh-views", this.render.bind(this)));
    this.render();
  }
  render() {
    return __async(this, null, function* () {
      if (!this.rendering) {
        this.initialise();
        if (this.isActive) {
          this.rendering = true;
          this.container.empty();
          this.model.generateData().then((data) => {
            data.elements.forEach((element) => {
              const view = this.app.plugins.getPlugin("rpg-manager").factories.views.create(this.currentElement instanceof Campaign ? this.currentElement.settings : this.currentElement.campaign.settings, element.responseType, this.sourcePath);
              view.render(this.container, element);
            });
            this.rendering = false;
          });
        }
      }
    });
  }
};

// src/helpers/RpgFunctions.ts
var import_obsidian2 = require("obsidian");
var RpgFunctions = class {
  constructor(app2) {
    this.app = app2;
    this.initialiseRoots();
  }
  initialiseRoots() {
    const file = this.app.vault.getAbstractFileByPath("/");
    this.root = this.app.vault.getResourcePath(file);
    if (this.root.includes("?"))
      this.root = this.root.substring(0, this.root.lastIndexOf("?"));
    if (!this.root.endsWith("/"))
      this.root += "/";
  }
  fileExists(path) {
    const abstractFile = this.app.vault.getAbstractFileByPath(path);
    let response = false;
    if (abstractFile instanceof import_obsidian2.TAbstractFile) {
      response = true;
    }
    return response;
  }
  getImg(name) {
    const imageExtensions = ["jpeg", "jpg", "png", "webp"];
    for (let extensionCount = 0; extensionCount < imageExtensions.length; extensionCount++) {
      const fileName = this.app.vault.config.attachmentFolderPath + "/" + name + "." + imageExtensions[extensionCount];
      if (this.fileExists(fileName)) {
        if (this.root == null) {
          this.initialiseRoots();
        }
        return this.root + fileName;
      }
    }
    return null;
  }
  getImgElement(imgSrc, width = 75, height = 75) {
    if (imgSrc === null)
      return null;
    if (width !== 75 && height === 75) {
      height = void 0;
    } else if (width === 75 && height !== 75) {
      width = void 0;
    }
    const response = new Image(width, height);
    response.src = imgSrc;
    response.style.objectFit = "cover";
    return response;
  }
  formatTime(date) {
    if (date == null)
      return "";
    const hours = date.getHours();
    const minutes = date.getMinutes();
    return (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes);
  }
};

// src/abstracts/AbstractComponent.ts
var AbstractComponent = class {
  constructor(app2) {
    this.app = app2;
  }
};

// src/abstracts/AbstractResponse.ts
var AbstractResponse = class {
  constructor(app2) {
    this.app = app2;
  }
  addTitle(title) {
    this.title = title;
  }
};

// src/enums/ResponseType.ts
var ResponseType = /* @__PURE__ */ ((ResponseType2) => {
  ResponseType2[ResponseType2["Table"] = 0] = "Table";
  ResponseType2[ResponseType2["String"] = 1] = "String";
  ResponseType2[ResponseType2["Banner"] = 2] = "Banner";
  ResponseType2[ResponseType2["Scene"] = 3] = "Scene";
  ResponseType2[ResponseType2["Box"] = 4] = "Box";
  ResponseType2[ResponseType2["Breadcrumb"] = 5] = "Breadcrumb";
  ResponseType2[ResponseType2["Timeline"] = 6] = "Timeline";
  ResponseType2[ResponseType2["Image"] = 7] = "Image";
  ResponseType2[ResponseType2["Header"] = 8] = "Header";
  ResponseType2[ResponseType2["AbtPlot"] = 9] = "AbtPlot";
  ResponseType2[ResponseType2["StoryCirclePlot"] = 10] = "StoryCirclePlot";
  ResponseType2[ResponseType2["RawCharacterRecordSheet"] = 11] = "RawCharacterRecordSheet";
  return ResponseType2;
})(ResponseType || {});

// src/data/responses/ResponseTable.ts
var ResponseTable = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.responseType = 0 /* Table */;
    this.class = null;
    this.headers = [];
    this.content = [];
  }
  addHeaders(headers) {
    this.headers = headers;
  }
  addContent(content) {
    this.content.push(content);
  }
  addContentList(content) {
    this.content = content;
  }
};

// src/components/SessionTableComponent.ts
var SessionTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Sessions");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("#", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Session", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Date", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Play Date", 0 /* String */)
      ]);
      data.forEach((session) => {
        var _a, _b;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(session.sessionId, 1 /* Number */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(session.link, 2 /* Link */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(session.synopsis, 4 /* Markdown */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = session.date) == null ? void 0 : _a.toDateString(), 0 /* String */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_b = session.irl) == null ? void 0 : _b.toDateString(), 0 /* String */, true)
        ]);
      });
      return response;
    });
  }
};

// src/components/AdventureTableComponent.ts
var AdventureTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Adventures");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("#", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Adventure", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((adventure) => {
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(adventure.adventureId, 1 /* Number */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(adventure.link, 2 /* Link */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(adventure.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/components/CharacterTableComponent.ts
var CharacterTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Characters");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Character", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Age", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((character) => {
        var _a, _b;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(character.imageSrcElement, 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(character.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = character.age) == null ? void 0 : _a.toString(), 0 /* String */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_b = character.additionalInformation) != null ? _b : character.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/components/LocationTableComponent.ts
var LocationTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Locations");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Name", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((location) => {
        var _a;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(location.imageSrcElement, 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(location.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = location.additionalInformation) != null ? _a : location.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/components/EventTableComponent.ts
var EventTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Events");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Name", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Date", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((event) => {
        var _a, _b;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(event.imageSrcElement, 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(event.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = event.date) == null ? void 0 : _a.toDateString(), 0 /* String */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_b = event.additionalInformation) != null ? _b : event.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/components/ClueTableComponent.ts
var ClueTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Clues");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Clue", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Found", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((clue) => {
        var _a, _b;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(clue.imageSrcElement, 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(clue.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(clue.isFound ? (_a = clue.found) == null ? void 0 : _a.toDateString() : '<span class="rpgm-missing">no</span>', 4 /* Markdown */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_b = clue.additionalInformation) != null ? _b : clue.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/components/FactionTableComponent.ts
var FactionTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Factions");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Faction", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((faction) => {
        var _a;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(faction.imageSrcElement, 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(faction.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = faction.additionalInformation) != null ? _a : faction.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/components/SceneTableComponent.ts
var SceneTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Scenes");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("#", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Scene", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Start", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("End", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Duration", 0 /* String */)
      ]);
      data.forEach((scene) => {
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(scene.completed ? scene.sceneId.toString() : "**" + scene.sceneId + "**", 4 /* Markdown */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(scene.link, 2 /* Link */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(scene.synopsis, 4 /* Markdown */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(this.app.plugins.getPlugin("rpg-manager").functions.formatTime(scene.startTime), 0 /* String */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(this.app.plugins.getPlugin("rpg-manager").functions.formatTime(scene.endTime), 0 /* String */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(scene.duration, 0 /* String */, true)
        ]);
      });
      return response;
    });
  }
};

// src/data/responses/ResponseBanner.ts
var ResponseBanner = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.responseType = 2 /* Banner */;
  }
};

// src/abstracts/database/AbstractElementData.ts
var AbstractElementData = class extends AbstractRecord {
  constructor() {
    super(...arguments);
    this.isOutline = false;
  }
};

// src/data/Timeline.ts
var Timeline = class extends AbstractElementData {
};

// src/components/BannerComponent.ts
var BannerComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      const response = new ResponseBanner(this.app);
      if (data instanceof Campaign) {
        response.image = data.image;
        response.title = data.name;
        response.date = data.currentDate ? data.currentDate.toDateString() : "";
      } else if (data instanceof Timeline) {
        response.image = data.campaign.image;
        response.title = "Timeline";
        response.date = data.campaign.currentDate ? data.campaign.currentDate.toDateString() : "";
        response.subtitle = data.campaign.name;
      }
      return response;
    });
  }
};

// src/data/responses/ResponseLine.ts
var ResponseLine = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.responseType = 1 /* String */;
    this.content = this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */);
  }
  addContent(content) {
    this.content = content;
  }
};

// src/components/CharacterSynopsisComponent.ts
var CharacterSynopsisComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      var _a;
      let fullSynopsis = '<span class="rpgm-missing">Synopsis missing</span>';
      if (data.synopsis != null && data.synopsis !== "") {
        fullSynopsis = "";
        if (data.isDead) {
          fullSynopsis = "_Deceased " + ((_a = data.death) == null ? void 0 : _a.toDateString()) + "_\n";
        }
        fullSynopsis += data.link.toString();
        const pronoun = data.pronoun;
        if (pronoun != null) {
          fullSynopsis += this.app.plugins.getPlugin("rpg-manager").factories.pronouns.readPronoun(pronoun);
        }
        fullSynopsis += data.isDead ? " was " : " is ";
        fullSynopsis += data.synopsis;
      }
      const response = new ResponseLine(this.app);
      response.content = this.app.plugins.getPlugin("rpg-manager").factories.contents.create(fullSynopsis, 4 /* Markdown */);
      return response;
    });
  }
};

// src/abstracts/AbstractFactory.ts
var AbstractFactory = class {
  constructor(app2) {
    this.app = app2;
  }
};

// src/data/responses/ResponseImage.ts
var ResponseImage = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.responseType = 7 /* Image */;
  }
};

// src/components/ImageComponent.ts
var ImageComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      const response = new ResponseImage(this.app);
      response.imgSrc = data.image;
      response.height = 300;
      response.width = 300;
      return response;
    });
  }
};

// src/data/responses/ResponseHeader.ts
var ResponseHeader = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.responseType = 8 /* Header */;
    this.elements = [];
  }
  addElement(element) {
    this.elements.push(element);
  }
};

// src/data/Character.ts
var Character = class extends AbstractElementData {
  loadData() {
    var _a, _b, _c, _d, _e, _f, _g;
    this.dob = this.initialiseDate((_b = (_a = this.frontmatter) == null ? void 0 : _a.dates) == null ? void 0 : _b.dob);
    this.death = this.initialiseDate((_d = (_c = this.frontmatter) == null ? void 0 : _c.dates) == null ? void 0 : _d.death);
    this.goals = (_e = this.frontmatter) == null ? void 0 : _e.goals;
    this.pronoun = ((_f = this.frontmatter) == null ? void 0 : _f.pronoun) ? this.app.plugins.getPlugin("rpg-manager").factories.pronouns.create((_g = this.frontmatter) == null ? void 0 : _g.pronoun) : null;
    super.loadData();
  }
  get age() {
    if (this.dob == null || this.death == null && this.campaign.currentDate == null)
      return null;
    const end = this.death ? this.death : this.campaign.currentDate;
    if (end == null)
      return null;
    const ageDifMs = end.valueOf() - this.dob.valueOf();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  }
  get isDead() {
    return this.death != null;
  }
};

// src/data/Clue.ts
var Clue = class extends AbstractElementData {
  loadData() {
    var _a, _b;
    this.found = this.initialiseDate((_b = (_a = this.frontmatter) == null ? void 0 : _a.dates) == null ? void 0 : _b.found);
    super.loadData();
  }
  get isFound() {
    return this.found != null;
  }
};

// src/data/Location.ts
var Location = class extends AbstractElementData {
  loadData() {
    var _a;
    this.address = (_a = this.frontmatter) == null ? void 0 : _a.address;
    super.loadData();
  }
};

// src/data/Event.ts
var Event = class extends AbstractElementData {
  loadData() {
    var _a, _b;
    this.date = this.initialiseDate((_b = (_a = this.frontmatter) == null ? void 0 : _a.dates) == null ? void 0 : _b.event);
    super.loadData();
  }
};

// src/data/Scene.ts
var Scene = class extends AbstractOutlineData {
  constructor() {
    super(...arguments);
    this.previousScene = null;
    this.nextScene = null;
  }
  loadData() {
    var _a, _b, _c, _d, _e;
    this.sceneId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(this.type, this.tag);
    this.startTime = this.initialiseDate((_b = (_a = this.frontmatter) == null ? void 0 : _a.time) == null ? void 0 : _b.start);
    this.endTime = this.initialiseDate((_d = (_c = this.frontmatter) == null ? void 0 : _c.time) == null ? void 0 : _d.end);
    this.action = (_e = this.frontmatter) == null ? void 0 : _e.action;
    super.loadData();
  }
  loadHierarchy(database) {
    return __async(this, null, function* () {
      __superGet(Scene.prototype, this, "loadHierarchy").call(this, database);
      this.adventure = database.readSingle(database, 2 /* Adventure */, this.tag);
      this.session = database.readSingle(database, 4 /* Session */, this.tag);
      try {
        this.previousScene = database.readSingle(database, 8 /* Scene */, this.tag, this.sceneId - 1);
        this.previousScene.nextScene = this;
      } catch (e) {
      }
      try {
        this.nextScene = database.readSingle(database, 8 /* Scene */, this.tag, this.sceneId + 1);
        this.nextScene.previousScene = this;
      } catch (e) {
      }
    });
  }
  get duration() {
    let response = "";
    if (this.startTime && this.endTime) {
      const duration = this.endTime.getTime() - this.startTime.getTime();
      const hours = Math.floor(duration / (1e3 * 60 * 60));
      const minutes = Math.floor(duration / (1e3 * 60)) % 60;
      response = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes);
    }
    return response;
  }
};

// src/data/responses/ResponseHeaderElement.ts
var ResponseHeaderElement = class extends AbstractResponse {
  constructor(app2, title, content, type) {
    super(app2);
    this.app = app2;
    this.title = title;
    this.type = type;
    this.value = this.app.plugins.getPlugin("rpg-manager").factories.contents.create(content, 4 /* Markdown */);
  }
};

// src/enums/FetcherType.ts
var FetcherType = /* @__PURE__ */ ((FetcherType2) => {
  FetcherType2[FetcherType2["YouTubeImage"] = 0] = "YouTubeImage";
  return FetcherType2;
})(FetcherType || {});

// src/data/Music.ts
var Music = class extends AbstractElementData {
  loadData() {
    var _a;
    this.url = (_a = this.frontmatter) == null ? void 0 : _a.url;
    super.loadData();
  }
  getThumbnail() {
    const imageUrl = this.fetchImage();
    imageUrl.then((imageUrl2) => {
      if (imageUrl2 == null) {
        this.imageSrc = void 0;
      } else {
        this.imageSrc = imageUrl2;
      }
    });
    return imageUrl;
  }
  getDynamicImageSrcElement() {
    return __async(this, null, function* () {
      if (this.imageSrc === null) {
        this.imageSrc = yield this.fetchImage();
      }
      return this.imageSrcElement;
    });
  }
  fetchImage() {
    return __async(this, null, function* () {
      if (this.url == void 0)
        return void 0;
      if (this.url.indexOf("youtube.com") !== -1 || this.url.indexOf("youtu.be") !== -1) {
        const fetcher = this.app.plugins.getPlugin("rpg-manager").factories.fetchers.create(0 /* YouTubeImage */);
        return fetcher.fetchImage(this.url);
      }
    });
  }
};

// src/components/HeaderComponent.ts
var HeaderComponent = class extends AbstractComponent {
  generateData(data, title, additionalInformation = null) {
    return __async(this, null, function* () {
      var _a;
      const response = new ResponseHeader(this.app);
      response.link = this.app.plugins.getPlugin("rpg-manager").factories.contents.create(data.link, 2 /* Link */);
      response.name = data.name;
      let synopsis = '<span class="rpgm-missing">Synopsis missing</span>';
      let synopsisTitle = "Synopsis";
      if (data instanceof Character) {
        if (data.synopsis != null && data.synopsis !== "") {
          synopsis = "";
          synopsis += data.link.toString();
          const pronoun = data.pronoun;
          if (pronoun != null) {
            synopsis += this.app.plugins.getPlugin("rpg-manager").factories.pronouns.readPronoun(pronoun);
          }
          synopsis += data.isDead ? " was " : " is ";
          synopsis += data.synopsis;
        }
        response.addElement(new ResponseHeaderElement(this.app, "Synopsis", synopsis, 1 /* Long */));
        if (data.goals != null)
          response.addElement(new ResponseHeaderElement(this.app, "Goals", data.goals.toString(), 1 /* Long */));
        if (data.pronoun != null)
          response.addElement(new ResponseHeaderElement(this.app, "Pronoun", this.app.plugins.getPlugin("rpg-manager").factories.pronouns.readPronoun(data.pronoun), 0 /* Short */));
        if (data.age != null || data.death != null) {
          response.addElement(new ResponseHeaderElement(this.app, "Status", data.death ? "Dead" : "Alive", 0 /* Short */));
        }
        if (data.death != null) {
          let death = data.death.toDateString();
          if (data.age != null) {
            death += " at age " + data.age;
          }
          response.addElement(new ResponseHeaderElement(this.app, "Death", death, 0 /* Short */));
        } else if (data.age != null) {
          response.addElement(new ResponseHeaderElement(this.app, "Age", data.age.toString(), 0 /* Short */));
        }
      } else {
        if (data instanceof Scene) {
          synopsisTitle = "Scene Goal";
        }
        if (data.synopsis != null && data.synopsis != "") {
          synopsis = data.synopsis;
        }
        response.addElement(new ResponseHeaderElement(this.app, synopsisTitle, synopsis, 1 /* Long */));
        if (data instanceof Clue) {
          const clueFound = data.isFound ? "Clue found on " + ((_a = data.found) == null ? void 0 : _a.toDateString()) : '<span class="rpgm-missing">Clue not found yet</span>';
          response.addElement(new ResponseHeaderElement(this.app, "Found", clueFound, 0 /* Short */));
        } else if (data instanceof Location) {
          if (data.address != null && data.address != "") {
            response.addElement(new ResponseHeaderElement(this.app, "Address", data.address, 0 /* Short */));
          }
        } else if (data instanceof Event) {
          if (data.date != null) {
            response.addElement(new ResponseHeaderElement(this.app, "Date", data.date.toDateString(), 0 /* Short */));
          }
        } else if (data instanceof Scene) {
          if (additionalInformation != null && additionalInformation.trigger != null && additionalInformation.trigger != "") {
            response.addElement(new ResponseHeaderElement(this.app, "Trigger", additionalInformation.trigger, 1 /* Long */));
          }
          if (data.action != null && data.action != "") {
            response.addElement(new ResponseHeaderElement(this.app, "Action", data.action, 1 /* Long */));
          } else if (additionalInformation != null && additionalInformation.action != null && additionalInformation.action != "") {
            response.addElement(new ResponseHeaderElement(this.app, "Action", additionalInformation.action, 1 /* Long */));
          }
        } else if (data instanceof Music) {
          if (data.image === void 0) {
            response.imgSrc = yield data.getThumbnail();
          } else if (data.image !== null) {
            response.imgSrc = data.image;
          }
          if (data.url !== void 0)
            response.addElement(new ResponseHeaderElement(this.app, "link", data.url, 1 /* Long */));
        }
      }
      if (data.image !== null) {
        response.imgSrc = data.image;
        response.imgWidth = 300;
        response.imgHeight = 300;
      }
      return response;
    });
  }
};

// src/data/Adventure.ts
var Adventure = class extends AbstractOutlineData {
  loadData() {
    this.adventureId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(this.type, this.tag);
    super.loadData();
  }
};

// src/components/AbtPlotComponent.ts
var AbtPlotComponent = class extends AbstractComponent {
  generateData(data, title, additionalInformation) {
    return __async(this, null, function* () {
      if (additionalInformation == null || (additionalInformation.need == null || additionalInformation.and == null || additionalInformation.but == null || additionalInformation.therefore == null) || additionalInformation.need === "" && additionalInformation.and === "" && additionalInformation.but === "" && additionalInformation.therefore === "")
        return null;
      const response = new ResponseTable(this.app);
      if (data instanceof Adventure && this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 4 /* Session */, data.campaign.campaignId, data.adventureId).length === 0 && additionalInformation.need !== "" && additionalInformation.and !== "" && additionalInformation.but !== "" && additionalInformation.therefore !== "") {
        response.create = 2 /* Adventure */;
        response.campaignId = data.campaign.campaignId;
        response.adventureId = data.adventureId;
      }
      response.title = "ABT Plot";
      response.class = "rpgm-plot";
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**NEED** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.need ? additionalInformation.need : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**AND** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.and ? additionalInformation.and : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**BUT** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.but ? additionalInformation.but : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**THEREFORE** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.therefore ? additionalInformation.therefore : "", 4 /* Markdown */)
      ]);
      return response;
    });
  }
};

// src/components/StoryCirclePlotComponent.ts
var StoryCirclePlotComponent = class extends AbstractComponent {
  generateData(data, title, additionalInformation) {
    return __async(this, null, function* () {
      if (additionalInformation == null || (additionalInformation.you == null || additionalInformation.need == null || additionalInformation.go == null || additionalInformation.search == null || additionalInformation.find == null || additionalInformation.take == null || additionalInformation.return == null || additionalInformation.change == null) || additionalInformation.you === "" && additionalInformation.need === "" && additionalInformation.go === "" && additionalInformation.search === "" && additionalInformation.find === "" && additionalInformation.take === "" && additionalInformation.return === "" && additionalInformation.change === "")
        return null;
      const response = new ResponseTable(this.app);
      response.title = "Story Circle Plot";
      response.class = "rpgm-plot";
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**YOU** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.you ? additionalInformation.you : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**NEED** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.need ? additionalInformation.need : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**GO** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.go ? additionalInformation.go : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**SEARCH** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.search ? additionalInformation.search : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**FIND** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.find ? additionalInformation.find : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**TAKE** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.take ? additionalInformation.take : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**RETURN** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.return ? additionalInformation.return : "", 4 /* Markdown */)
      ]);
      response.addContent([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("**CHANGE** ", 4 /* Markdown */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create(additionalInformation.change ? additionalInformation.change : "", 4 /* Markdown */)
      ]);
      return response;
    });
  }
};

// src/settings/Vampire/components/VampireCharacterTableComponent.ts
var VampireCharacterTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Characters");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Character", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Generation", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      data.forEach((character) => {
        var _a, _b;
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(character.imageSrcElement, 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(character.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = character.generation) == null ? void 0 : _a.toString(), 0 /* String */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_b = character.additionalInformation) != null ? _b : character.synopsis, 4 /* Markdown */)
        ]);
      });
      return response;
    });
  }
};

// src/settings/Vampire/components/VampireHeaderComponent.ts
var VampireHeaderComponent = class extends HeaderComponent {
  generateData(data, title, additionalInformation = null) {
    return __async(this, null, function* () {
      const response = yield __superGet(VampireHeaderComponent.prototype, this, "generateData").call(this, data, title, additionalInformation);
      if (data.generation != null) {
        response.addElement(new ResponseHeaderElement(this.app, "Generation", data.generation.toString(), 0 /* Short */));
      }
      return response;
    });
  }
};

// src/settings/Raw/enums/RawTrait.ts
var RawTrait = /* @__PURE__ */ ((RawTrait2) => {
  RawTrait2[RawTrait2["Body"] = 0] = "Body";
  RawTrait2[RawTrait2["Mind"] = 1] = "Mind";
  RawTrait2[RawTrait2["Spirit"] = 2] = "Spirit";
  return RawTrait2;
})(RawTrait || {});

// src/settings/Raw/data/responses/RawResponseCharacterRecordSheetAbility.ts
var RawResponseCharacterRecordSheetAbility = class extends AbstractResponse {
  constructor(app2, id, name, value, specialisation, trait, traitValue) {
    super(app2);
    this.id = id;
    this.name = name;
    this.value = value;
    this.specialisation = specialisation;
    this.trait = trait;
    this.traitValue = traitValue;
  }
};

// src/settings/Raw/enums/RawAbility.ts
var RawAbility = /* @__PURE__ */ ((RawAbility2) => {
  RawAbility2[RawAbility2["athletics"] = 0] = "athletics";
  RawAbility2[RawAbility2["drive"] = 1] = "drive";
  RawAbility2[RawAbility2["firearms"] = 2] = "firearms";
  RawAbility2[RawAbility2["handtohand"] = 3] = "handtohand";
  RawAbility2[RawAbility2["intimidate"] = 4] = "intimidate";
  RawAbility2[RawAbility2["melee"] = 5] = "melee";
  RawAbility2[RawAbility2["pilot"] = 6] = "pilot";
  RawAbility2[RawAbility2["repair"] = 7] = "repair";
  RawAbility2[RawAbility2["cryptography"] = 8] = "cryptography";
  RawAbility2[RawAbility2["fasttalk"] = 9] = "fasttalk";
  RawAbility2[RawAbility2["investigation"] = 10] = "investigation";
  RawAbility2[RawAbility2["language"] = 11] = "language";
  RawAbility2[RawAbility2["library"] = 12] = "library";
  RawAbility2[RawAbility2["medicine"] = 13] = "medicine";
  RawAbility2[RawAbility2["perception"] = 14] = "perception";
  RawAbility2[RawAbility2["technology"] = 15] = "technology";
  RawAbility2[RawAbility2["craft"] = 16] = "craft";
  RawAbility2[RawAbility2["empathy"] = 17] = "empathy";
  RawAbility2[RawAbility2["leadership"] = 18] = "leadership";
  RawAbility2[RawAbility2["occult"] = 19] = "occult";
  RawAbility2[RawAbility2["persuasion"] = 20] = "persuasion";
  RawAbility2[RawAbility2["stealth"] = 21] = "stealth";
  RawAbility2[RawAbility2["survival"] = 22] = "survival";
  RawAbility2[RawAbility2["willpower"] = 23] = "willpower";
  return RawAbility2;
})(RawAbility || {});
var RawAbilityTrait = {
  athletics: 0 /* Body */,
  drive: 0 /* Body */,
  firearms: 0 /* Body */,
  handtohand: 0 /* Body */,
  intimidate: 0 /* Body */,
  melee: 0 /* Body */,
  pilot: 0 /* Body */,
  repair: 0 /* Body */,
  cryptography: 1 /* Mind */,
  fasttalk: 1 /* Mind */,
  investigation: 1 /* Mind */,
  language: 1 /* Mind */,
  library: 1 /* Mind */,
  medicine: 1 /* Mind */,
  perception: 1 /* Mind */,
  technology: 1 /* Mind */,
  craft: 2 /* Spirit */,
  empathy: 2 /* Spirit */,
  leadership: 2 /* Spirit */,
  occult: 2 /* Spirit */,
  persuasion: 2 /* Spirit */,
  stealth: 2 /* Spirit */,
  survival: 2 /* Spirit */,
  willpower: 2 /* Spirit */
};

// src/settings/Raw/data/responses/RawResponseCharacterRecordSheetTrait.ts
var RawResponseCharacterRecordSheetTrait = class extends AbstractResponse {
  constructor(app2, trait, metadata) {
    super(app2);
    this.trait = trait;
    this.traitValue = 0;
    this.abilities = [];
    if (metadata != null) {
      this.value = metadata.value != null ? metadata.value : 0;
      if (metadata.abilities != null) {
        Object.entries(metadata.abilities).forEach(([abilityName, value]) => {
          var _a, _b;
          this.abilities.push(new RawResponseCharacterRecordSheetAbility(app2, null, RawAbility[abilityName.toLowerCase()], (_a = value == null ? void 0 : value.value) != null ? _a : -10, (_b = value == null ? void 0 : value.specialisation) != null ? _b : null, this.trait, this.traitValue));
        });
      }
    }
    Object.keys(RawAbilityTrait).filter((abilityKey) => isNaN(Number(abilityKey))).forEach((abilityKey) => {
      const ability = RawAbility[abilityKey];
      if (this.trait === RawAbilityTrait[RawAbility[ability]] && this.getAbility(ability) == null) {
        this.abilities.push(new RawResponseCharacterRecordSheetAbility(app2, null, ability, -10, null, this.trait, this.traitValue));
      }
    });
  }
  get value() {
    return this.traitValue;
  }
  set value(value) {
    this.traitValue = value;
    this.abilities.forEach((ability) => {
      ability.traitValue = this.traitValue;
    });
  }
  getAbility(name, specialisation = null) {
    let response = null;
    this.abilities.forEach((ability) => {
      if (ability.name === name && ability.specialisation === specialisation) {
        response = ability;
      }
    });
    return response;
  }
};

// src/settings/Raw/data/responses/RawResponseCharacterRecordSheet.ts
var RawResponseCharacterRecordSheet = class extends AbstractResponse {
  constructor(app2, metadata) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    super(app2);
    this.responseType = 11 /* RawCharacterRecordSheet */;
    this.body = new RawResponseCharacterRecordSheetTrait(app2, 0 /* Body */, (_b = (_a = metadata == null ? void 0 : metadata.raw) == null ? void 0 : _a.character) == null ? void 0 : _b.body);
    this.mind = new RawResponseCharacterRecordSheetTrait(app2, 1 /* Mind */, (_d = (_c = metadata == null ? void 0 : metadata.raw) == null ? void 0 : _c.character) == null ? void 0 : _d.mind);
    this.spirit = new RawResponseCharacterRecordSheetTrait(app2, 2 /* Spirit */, (_f = (_e = metadata == null ? void 0 : metadata.raw) == null ? void 0 : _e.character) == null ? void 0 : _f.spirit);
    this.damages = (_i = (_h = (_g = metadata == null ? void 0 : metadata.raw) == null ? void 0 : _g.character) == null ? void 0 : _h.damages) != null ? _i : 0;
  }
  get lifePoints() {
    return 30 + this.body.value - this.damages;
  }
  get lifePointsPercentage() {
    return Math.trunc(100 * (30 + this.body.value) / this.lifePoints);
  }
  getAbility(name, specialisation = null) {
    let response = this.body.getAbility(name, specialisation);
    if (response == null)
      response = this.mind.getAbility(name, specialisation);
    if (response == null)
      response = this.spirit.getAbility(name, specialisation);
    return response;
  }
};

// src/settings/Raw/components/RawCharacterRecordSheetComponent.ts
var RawCharacterRecordSheetComponent = class extends AbstractComponent {
  generateData(data, title, additionalInformation) {
    return __async(this, null, function* () {
      const response = new RawResponseCharacterRecordSheet(this.app, additionalInformation);
      return response;
    });
  }
};

// src/components/MusicTableComponent.ts
var MusicTableComponent = class extends AbstractComponent {
  generateData(data, title) {
    return __async(this, null, function* () {
      var _a, _b;
      if (data.length === 0) {
        return null;
      }
      const response = new ResponseTable(this.app);
      response.addTitle(title ? title : "Music");
      response.addHeaders([
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("", 0 /* String */, true),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Music", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("url", 0 /* String */),
        this.app.plugins.getPlugin("rpg-manager").factories.contents.create("Synopsis", 0 /* String */)
      ]);
      for (let musicCounter = 0; musicCounter < data.length; musicCounter++) {
        const music = data[musicCounter];
        response.addContent([
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(yield music.getDynamicImageSrcElement(), 5 /* Image */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create(music.link, 2 /* Link */, true),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_a = music.url) != null ? _a : '<span class="rpgm-missing">No URL provided</span>', 4 /* Markdown */),
          this.app.plugins.getPlugin("rpg-manager").factories.contents.create((_b = music.additionalInformation) != null ? _b : music.synopsis, 4 /* Markdown */)
        ]);
      }
      return response;
    });
  }
};

// src/factories/ComponentFactory.ts
var ComponentsMap = {
  AgnosticSessionTable: SessionTableComponent,
  AgnosticAdventureTable: AdventureTableComponent,
  AgnosticCharacterTable: CharacterTableComponent,
  AgnosticLocationTable: LocationTableComponent,
  AgnosticEventTable: EventTableComponent,
  AgnosticClueTable: ClueTableComponent,
  AgnosticFactionTable: FactionTableComponent,
  AgnosticSceneTable: SceneTableComponent,
  AgnosticBanner: BannerComponent,
  AgnosticCharacterSynopsis: CharacterSynopsisComponent,
  AgnosticImage: ImageComponent,
  AgnosticHeader: HeaderComponent,
  AgnosticAbtPlot: AbtPlotComponent,
  AgnosticStoryCirclePlot: StoryCirclePlotComponent,
  VampireCharacterTable: VampireCharacterTableComponent,
  VampireHeader: VampireHeaderComponent,
  RawCharacterRecordSheet: RawCharacterRecordSheetComponent,
  AgnosticMusicTable: MusicTableComponent
};
var ComponentFactory = class extends AbstractFactory {
  create(settings, type, data, title = null, additionalInformation = null) {
    return __async(this, null, function* () {
      let componentKey = CampaignSetting[settings] + type;
      if (ComponentsMap[componentKey] == null && settings !== 0 /* Agnostic */) {
        componentKey = CampaignSetting[0 /* Agnostic */] + type;
      }
      const component = new ComponentsMap[componentKey](this.app);
      return component.generateData(data, title, additionalInformation);
    });
  }
};

// src/abstracts/AbstractContent.ts
var AbstractContent = class {
  constructor(content, isInLine = null) {
    this.isInLine = false;
    this.content = content;
    if (isInLine != null) {
      this.isInLine = isInLine;
    }
  }
};

// src/data/content/StringContent.ts
var StringContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    container.textContent = this.content != null ? this.content : "";
  }
};

// src/data/content/LinkContent.ts
var import_obsidian3 = require("obsidian");
var LinkContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      import_obsidian3.MarkdownRenderer.renderMarkdown(this.content.toString(), container, sourcePath, null);
    } else {
      container.textContent = "";
    }
  }
};

// src/data/content/NumberContent.ts
var NumberContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    container.textContent = this.content != null ? this.content.toString() : "";
  }
};

// src/data/content/ObjectContent.ts
var import_obsidian4 = require("obsidian");
var ObjectContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      import_obsidian4.MarkdownRenderer.renderMarkdown(this.content.toString(), container, sourcePath, null);
    } else {
      container.textContent = "";
    }
  }
};

// src/data/content/MarkdownContent.ts
var import_obsidian5 = require("obsidian");
var MarkdownContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      import_obsidian5.MarkdownRenderer.renderMarkdown(this.content, container, sourcePath, null);
    } else {
      container.textContent = "";
    }
  }
};

// src/data/content/ImageContent.ts
var ImageContent = class extends AbstractContent {
  fillContent(container, sourcePath) {
    if (this.content != null) {
      this.content.style.width = "75px";
      this.content.style.height = "75px";
      this.content.style.objectFit = "cover";
      container.append(this.content);
      container.style.width = this.content.style.width;
    } else {
      container.textContent = "";
    }
  }
};

// src/factories/ContentFactory.ts
var ContentFactory = class extends AbstractFactory {
  create(content, type, isInline = false) {
    switch (type) {
      case 0 /* String */:
        return new StringContent(content, isInline);
        break;
      case 2 /* Link */:
        return new LinkContent(content, isInline);
        break;
      case 1 /* Number */:
        return new NumberContent(content, isInline);
        break;
      case 3 /* Object */:
        return new ObjectContent(content, isInline);
        break;
      case 4 /* Markdown */:
        return new MarkdownContent(content, isInline);
        break;
      case 5 /* Image */:
        return new ImageContent(content, isInline);
        break;
    }
  }
};

// src/data/Session.ts
var Session = class extends AbstractOutlineData {
  constructor() {
    super(...arguments);
    this.previousSession = null;
    this.nextSession = null;
    this.note = null;
  }
  loadData() {
    var _a, _b, _c, _d;
    this.sessionId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(this.type, this.tag);
    this.date = this.initialiseDate((_b = (_a = this.frontmatter) == null ? void 0 : _a.dates) == null ? void 0 : _b.session);
    this.irl = this.initialiseDate((_d = (_c = this.frontmatter) == null ? void 0 : _c.dates) == null ? void 0 : _d.irl);
    super.loadData();
  }
  loadHierarchy(database) {
    return __async(this, null, function* () {
      __superGet(Session.prototype, this, "loadHierarchy").call(this, database);
      this.adventure = database.readSingle(database, 2 /* Adventure */, this.tag);
      try {
        this.previousSession = database.readSingle(database, 4 /* Session */, this.tag, this.sessionId - 1);
        this.previousSession.nextSession = this;
      } catch (e) {
      }
      try {
        this.nextSession = database.readSingle(database, 4 /* Session */, this.tag, this.sessionId + 1);
        this.nextSession.previousSession = this;
      } catch (e) {
      }
      try {
        this.note = database.readSingle(database, 1024 /* Note */, this.tag);
      } catch (e) {
      }
    });
  }
};

// src/data/Faction.ts
var Faction = class extends AbstractElementData {
};

// src/data/Note.ts
var Note = class extends AbstractOutlineData {
  loadHierarchy(database) {
    return __async(this, null, function* () {
      __superGet(Note.prototype, this, "loadHierarchy").call(this, database);
      this.adventure = database.readSingle(database, 2 /* Adventure */, this.tag);
      const session = database.readSingle(database, 4 /* Session */, this.tag);
      this.sessionId = session.sessionId;
    });
  }
};

// src/settings/Vampire/data/VampireCharacter.ts
var VampireCharacter = class extends Character {
  loadData() {
    return __async(this, null, function* () {
      var _a;
      this.generation = (_a = this.frontmatter) == null ? void 0 : _a.generation;
      __superGet(VampireCharacter.prototype, this, "loadData").call(this);
    });
  }
};

// src/settings/Raw/data/RawCampaign.ts
var RawCampaign = class extends Campaign {
  loadData() {
    return __async(this, null, function* () {
      var _a, _b;
      this.apiCampaignKey = (_b = (_a = this.frontmatter) == null ? void 0 : _a.apiCampaignKey) != null ? _b : null;
      __superGet(RawCampaign.prototype, this, "loadData").call(this);
    });
  }
};

// src/factories/DataFactory.ts
var DatasMap = {
  AgnosticCampaign: Campaign,
  AgnosticAdventure: Adventure,
  AgnosticSession: Session,
  AgnosticScene: Scene,
  AgnosticCharacter: Character,
  AgnosticNonPlayerCharacter: Character,
  AgnosticFaction: Faction,
  AgnosticClue: Clue,
  AgnosticLocation: Location,
  AgnosticEvent: Event,
  AgnosticTimeline: Timeline,
  AgnosticNote: Note,
  VampireCharacter,
  VampireNonPlayerCharacter: VampireCharacter,
  RawCampaign,
  AgnosticMusic: Music
};
var DataFactory = class extends AbstractFactory {
  create(settings, tag, type, file) {
    let dataKey = CampaignSetting[settings] + DataType[type];
    if (DatasMap[dataKey] == null && settings !== 0 /* Agnostic */) {
      dataKey = CampaignSetting[0 /* Agnostic */] + DataType[type];
    }
    return new DatasMap[dataKey](this.app, tag, type, file);
  }
};

// src/factories/ErrorFactory.ts
var ErrorFactory = class extends AbstractFactory {
  create(errorMessage) {
    console.log("RpgManager Error: " + errorMessage);
  }
};

// src/factories/FileFactory.ts
var import_obsidian6 = require("obsidian");
var FileFactory = class extends AbstractFactory {
  create(settings, type, create, templateName, name, campaignId = void 0, adventureId = void 0, sessionId = void 0, sceneId = void 0, additionalInformation = null) {
    return __async(this, null, function* () {
      let folder = "/";
      if (campaignId != null) {
        const campaign = this.app.plugins.getPlugin("rpg-manager").database.readSingleParametrised(void 0, 1 /* Campaign */, campaignId);
        if (campaign !== void 0) {
          settings = campaign.settings;
          folder = campaign.folder;
        }
      }
      const template = this.app.plugins.getPlugin("rpg-manager").factories.templates.create(settings, type, templateName, name, campaignId, adventureId, sessionId, sceneId, additionalInformation);
      const fileName = yield this.generateFilePath(type, folder, name);
      template.generateData().then((data) => {
        if (create) {
          this.createNewFile(data, fileName);
        } else {
          this.editExistingFile(data, fileName);
        }
      });
    });
  }
  createNewFile(data, fileName) {
    return __async(this, null, function* () {
      const newFile = yield app.vault.create(fileName, data);
      const currentLeaf = app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      const leaf = app.workspace.getLeaf(currentLeaf != null);
      yield leaf.openFile(newFile);
    });
  }
  editExistingFile(data, fileName) {
    return __async(this, null, function* () {
      const activeView = app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (activeView != null) {
        const editor = activeView.editor;
        editor.setValue(data + "\n" + editor.getValue());
        let file = activeView.file;
        yield this.app.fileManager.renameFile(file, fileName);
        file = activeView.file;
        app.workspace.getLeaf().openFile(file);
      }
    });
  }
  silentCreate(type, name, campaignId, adventureId = void 0, sessionId = void 0, sceneId = void 0, additionalInformation = void 0) {
    return __async(this, null, function* () {
      let folder = "/";
      let settings = 0 /* Agnostic */;
      const campaign = this.app.plugins.getPlugin("rpg-manager").database.readSingleParametrised(void 0, 1 /* Campaign */, campaignId);
      if (campaign !== void 0) {
        settings = campaign.settings;
        folder = campaign.folder;
      }
      const template = this.app.plugins.getPlugin("rpg-manager").factories.templates.create(settings, type, "internal" + DataType[type], name, campaignId, adventureId, sessionId, sceneId, additionalInformation);
      const fileName = yield this.generateFilePath(type, folder, name);
      const data = yield template.generateData();
      const newFile = yield app.vault.create(fileName, data);
      const leaf = app.workspace.getLeaf(true);
      yield leaf.openFile(newFile);
    });
  }
  generateFilePath(type, folder, name) {
    return __async(this, null, function* () {
      let response = name + ".md";
      if (this.app.plugins.getPlugin("rpg-manager").settings.automaticMove) {
        let fullPath;
        if (type !== 1 /* Campaign */) {
          fullPath = folder + DataType[type] + "s";
          if (fullPath.startsWith("/"))
            fullPath = fullPath.substring(1);
          if (this.app.vault.getAbstractFileByPath(fullPath) == null) {
            yield app.vault.createFolder(fullPath);
          }
        } else {
          fullPath = folder;
          if (fullPath.startsWith("/"))
            fullPath = fullPath.substring(1);
        }
        response = fullPath + "/" + response;
      }
      return response;
    });
  }
};

// src/abstracts/AbstractModalComponent.ts
var AbstractModalComponent = class {
  constructor(app2, modal) {
    this.app = app2;
    this.modal = modal;
  }
  prepareAdditionalInformation() {
    return null;
  }
  save(settings, type, create, templateName, name, campaignId, adventureId = void 0, sessionId = void 0, sceneId = void 0, additionalInformation = null) {
    return __async(this, null, function* () {
      this.app.plugins.getPlugin("rpg-manager").factories.files.create(settings, type, create, templateName, name, campaignId, adventureId, sessionId, sceneId, additionalInformation);
    });
  }
};

// src/modals/components/CampaignModal.ts
var CampaignModal = class extends AbstractModalComponent {
  constructor(app2, modal) {
    super(app2, modal);
    this.campaigns = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 1 /* Campaign */);
  }
  addElement(contentEl) {
    return __async(this, null, function* () {
      const campaignEl = contentEl.createDiv({ cls: "campaignContainer" });
      if (this.modal.type === 1 /* Campaign */) {
        this.addAdditionalElements();
        this.addNewCampaignElements(campaignEl);
      } else {
        if (this.campaigns.length === 0) {
          const mainContent = this.modal.getContentEl();
          mainContent.empty();
          mainContent.createEl("h2", { cls: "rpgm-modal-title", text: "Main campaign missing" });
          mainContent.createSpan({ cls: "", text: "This Obsidian Vault does not contain a Rpg Manager campaign yet. Before creating a " + DataType[this.modal.type] + ", please initialise your first campaign." });
        } else {
          this.childEl = contentEl.createDiv({ cls: "child" });
          this.childEl.id = "CampaignChild";
          this.selectCampaignElements(campaignEl);
        }
      }
      if (this.modal.type === 1 /* Campaign */) {
        this.modal.saver = this;
      }
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
      if (this.modal.type !== 2 /* Adventure */ && this.modal.type !== 4 /* Session */ && this.modal.type !== 8 /* Scene */ && this.modal.type !== 1024 /* Note */) {
        this.modal.elementModal = this.app.plugins.getPlugin("rpg-manager").factories.modals.create(this.modal.settings, this.modal.type, this.modal);
        this.modal.elementModal.addElement(containerEl);
      } else {
        this.modal.adventureModal = this.app.plugins.getPlugin("rpg-manager").factories.modals.create(this.modal.settings, 2 /* Adventure */, this.modal);
        this.modal.adventureModal.addElement(containerEl);
      }
    });
  }
  validate() {
    return true;
  }
  addNewCampaignElements(containerEl) {
    this.modal.campaignId = 1;
    this.campaigns.forEach((data) => {
      if (data.campaignId >= this.modal.campaignId)
        this.modal.campaignId = data.campaignId + 1;
    });
    containerEl.createEl("label", { text: "Select Campaign Settings" });
    this.campaignSettingsEl = containerEl.createEl("select");
    Object.keys(CampaignSetting).filter((v) => isNaN(Number(v))).forEach((setting) => {
      const campaignSettingOption = this.campaignSettingsEl.createEl("option", {
        text: setting,
        value: setting
      });
      if (setting === 0 /* Agnostic */.toString()) {
        campaignSettingOption.selected = true;
      }
    });
    this.selectSetting();
    this.campaignSettingsEl.addEventListener("change", (e) => {
      this.selectSetting();
    });
  }
  selectCampaignElements(containerEl) {
    const groupElement = containerEl.createDiv({ cls: "group" });
    groupElement.createDiv({ cls: "title", text: "Campaign" });
    const selectionContainerEl = groupElement.createDiv({ cls: "container" });
    groupElement.createDiv({ cls: "clear" });
    this.campaignEl = selectionContainerEl.createEl("select");
    if (this.campaigns.length > 1) {
      this.campaignEl.createEl("option", {
        text: "",
        value: ""
      }).selected = true;
    }
    this.campaigns.forEach((campaign) => {
      const campaignOptionEl = this.campaignEl.createEl("option", {
        text: campaign.name,
        value: campaign.campaignId.toString()
      });
      if (this.campaigns.length === 1) {
        campaignOptionEl.selected = true;
        this.selectCampaign();
      }
    });
    this.campaignEl.addEventListener("change", (e) => {
      this.selectCampaign();
    });
    this.campaignErrorEl = containerEl.createEl("p", { cls: "error" });
  }
  selectSetting() {
    this.modal.settings = CampaignSetting[this.campaignSettingsEl.value];
  }
  selectCampaign() {
    this.modal.campaignId = +this.campaignEl.value;
    this.childEl.empty();
    this.loadChild(this.childEl);
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
      if (this.modal.additionalInformationEl.style.display !== "block") {
        this.modal.additionalInformationEl.style.display = "block";
        this.modal.additionalInformationEl.createEl("h2", {
          cls: "rpgm-modal-title",
          text: "Additional Information for the " + DataType[this.modal.type]
        });
        this.modal.additionalInformationEl.createEl("label", { text: "Current Date" });
        this.currentDateEl = this.modal.additionalInformationEl.createEl("input", { type: "text" });
      }
    });
  }
  prepareAdditionalInformation() {
    return {
      current: this.currentDateEl.value
    };
  }
};

// src/modals/components/AdventureModal.ts
var AdventureModal = class extends AbstractModalComponent {
  constructor(app2, modal) {
    super(app2, modal);
    this.adventures = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 2 /* Adventure */, this.modal.campaignId);
  }
  addElement(contentEl) {
    return __async(this, null, function* () {
      const adventureEl = contentEl.createDiv({ cls: "adventureContainer" });
      if (this.modal.type === 2 /* Adventure */) {
        this.addAdditionalElements();
        this.addNewAdventureElements(adventureEl);
      } else {
        if (this.adventures.length === 0) {
          const mainContent = this.modal.getContentEl();
          mainContent.empty();
          mainContent.createEl("h2", { cls: "rpgm-modal-title", text: "Adventures missing" });
          mainContent.createSpan({ cls: "", text: "This Obsidian Vault does not contain a Rpg Manager Adventure for the selected campaign. Before creating a " + DataType[this.modal.type] + ", please initialise your first adventure for the campaign." });
        } else {
          this.childEl = contentEl.createDiv({ cls: "child" });
          this.childEl.id = "AdventureChild";
          this.selectAdventureElements(adventureEl);
        }
      }
      if (this.modal.type === 2 /* Adventure */) {
        this.modal.saver = this;
        this.modal.enableButton();
      }
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
      this.modal.sessionModal = this.app.plugins.getPlugin("rpg-manager").factories.modals.create(this.modal.settings, 4 /* Session */, this.modal);
      this.modal.sessionModal.addElement(containerEl);
    });
  }
  validate() {
    return true;
  }
  addNewAdventureElements(containerEl) {
    this.modal.adventureId = 1;
    this.adventures.forEach((data) => {
      var _a;
      if (data.adventureId >= ((_a = this.modal.adventureId) != null ? _a : 0))
        this.modal.adventureId = data.adventureId + 1;
    });
  }
  selectAdventureElements(containerEl) {
    const groupElement = containerEl.createDiv({ cls: "group" });
    groupElement.createDiv({ cls: "title", text: "Adventure" });
    const selectionContainerEl = groupElement.createDiv({ cls: "container" });
    groupElement.createDiv({ cls: "clear" });
    this.adventureEl = selectionContainerEl.createEl("select");
    if (this.adventures.length > 1) {
      this.adventureEl.createEl("option", {
        text: "",
        value: ""
      }).selected = true;
    }
    this.adventures.forEach((adventure) => {
      const adventureOptionEl = this.adventureEl.createEl("option", {
        text: adventure.name,
        value: adventure.adventureId.toString()
      });
      if (this.adventures.length === 1) {
        adventureOptionEl.selected = true;
        this.selectAdventure();
      }
    });
    this.adventureEl.addEventListener("change", (e) => {
      this.selectAdventure();
    });
    this.adventureErrorEl = containerEl.createEl("p", { cls: "error" });
  }
  selectAdventure() {
    this.modal.adventureId = +this.adventureEl.value;
    this.childEl.empty();
    this.loadChild(this.childEl);
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/SessionModal.ts
var SessionModal = class extends AbstractModalComponent {
  constructor(app2, modal) {
    super(app2, modal);
    this.sessions = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 4 /* Session */, this.modal.campaignId, this.modal.adventureId);
  }
  addElement(contentEl) {
    return __async(this, null, function* () {
      const sessionEl = contentEl.createDiv({ cls: "sessionContainer" });
      if (this.modal.type === 4 /* Session */) {
        this.addNewSessionElements(sessionEl);
      } else {
        if (this.sessions.length === 0) {
          const mainContent = this.modal.getContentEl();
          mainContent.empty();
          mainContent.createEl("h2", { cls: "rpgm-modal-title", text: "Sessions missing" });
          mainContent.createSpan({ cls: "", text: "This Obsidian Vault does not contain a Rpg Manager Session for the selected adventure. Before creating a " + DataType[this.modal.type] + ", please initialise your first session for the adventure." });
        } else {
          this.childEl = contentEl.createDiv({ cls: "child" });
          this.childEl.id = "SessionChild";
          this.selectSessionElements(sessionEl);
        }
      }
      if (this.modal.type === 4 /* Session */) {
        this.modal.saver = this;
        this.modal.enableButton();
      }
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
      this.modal.sceneModal = this.app.plugins.getPlugin("rpg-manager").factories.modals.create(this.modal.settings, 8 /* Scene */, this.modal);
      this.modal.sceneModal.addElement(containerEl);
    });
  }
  validate() {
    return true;
  }
  addNewSessionElements(containerEl) {
    this.modal.sessionId = 1;
    this.sessions.forEach((data) => {
      var _a;
      if (data.sessionId >= ((_a = this.modal.sessionId) != null ? _a : 0))
        this.modal.sessionId = data.sessionId + 1;
    });
  }
  selectSessionElements(containerEl) {
    const groupElement = containerEl.createDiv({ cls: "group" });
    groupElement.createDiv({ cls: "title", text: "Session" });
    const selectionContainerEl = groupElement.createDiv({ cls: "container" });
    groupElement.createDiv({ cls: "clear" });
    this.sessionEl = selectionContainerEl.createEl("select");
    if (this.sessions.length > 1) {
      this.sessionEl.createEl("option", {
        text: "",
        value: ""
      }).selected = true;
    }
    this.sessions.forEach((session) => {
      const sessionOptionEl = this.sessionEl.createEl("option", {
        text: session.name,
        value: session.sessionId.toString()
      });
      if (this.sessions.length === 1) {
        sessionOptionEl.selected = true;
        this.selectSession();
      }
    });
    this.sessionEl.addEventListener("change", (e) => {
      this.selectSession();
    });
    this.sessionErrorEl = containerEl.createEl("p", { cls: "error" });
  }
  selectSession() {
    this.modal.sessionId = +this.sessionEl.value;
    this.childEl.empty();
    this.loadChild(this.childEl);
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/SceneModal.ts
var SceneModal = class extends AbstractModalComponent {
  constructor(app2, modal) {
    super(app2, modal);
    if (this.modal.adventureId != null && this.modal.sessionId != null) {
      this.scenes = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 8 /* Scene */, this.modal.campaignId, this.modal.adventureId, this.modal.sessionId);
    } else {
      this.scenes = [];
    }
  }
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "sceneContainer" });
      this.modal.sceneId = 1;
      this.scenes.forEach((data) => {
        var _a;
        if (data.sceneId >= ((_a = this.modal.sceneId) != null ? _a : 0))
          this.modal.sceneId = data.sceneId + 1;
      });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/CharacterModal.ts
var CharacterModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "characterContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/ClueModal.ts
var ClueModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "clueContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/EventModal.ts
var EventModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "eventContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/FactionModal.ts
var FactionModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "factionContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/LocationModal.ts
var LocationModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "locationContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/NonPlayerCharacterModal.ts
var NonPlayerCharacterModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "characterContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/NoteModal.ts
var NoteModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "noteContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/TimelineModal.ts
var TimelineModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "timelineContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/modals/components/MusicModal.ts
var MusicModal = class extends AbstractModalComponent {
  addElement(contentEl) {
    return __async(this, null, function* () {
      contentEl.createDiv({ cls: "musicContainer" });
      this.modal.saver = this;
      this.modal.enableButton();
    });
  }
  loadChild(containerEl) {
    return __async(this, null, function* () {
    });
  }
  validate() {
    return true;
  }
  addAdditionalElements() {
    return __async(this, null, function* () {
    });
  }
};

// src/factories/ModalFactory.ts
var ModalsMap = {
  AgnosticCampaign: CampaignModal,
  AgnosticAdventure: AdventureModal,
  AgnosticSession: SessionModal,
  AgnosticScene: SceneModal,
  AgnosticCharacter: CharacterModal,
  AgnosticClue: ClueModal,
  AgnosticEvent: EventModal,
  AgnosticFaction: FactionModal,
  AgnosticLocation: LocationModal,
  AgnosticNonPlayerCharacter: NonPlayerCharacterModal,
  AgnosticNote: NoteModal,
  AgnosticTimeline: TimelineModal,
  AgnosticMusic: MusicModal
};
var ModalFactory = class extends AbstractFactory {
  create(settings, type, modal) {
    let modalKey = CampaignSetting[settings] + DataType[type];
    if (ModalsMap[modalKey] == null && settings !== 0 /* Agnostic */) {
      modalKey = CampaignSetting[0 /* Agnostic */] + DataType[type];
    }
    return new ModalsMap[modalKey](this.app, modal);
  }
};

// src/data/responses/ResponseBreadcrumb.ts
var ResponseBreadcrumb = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.title = null;
    this.isInNewLine = false;
    this.mainTitle = null;
    this.function = null;
    this.responseType = 5 /* Breadcrumb */;
  }
};

// src/abstracts/AbstractModel.ts
var AbstractModel = class {
  constructor(app2, currentElement, source, sourcePath, sourceMeta) {
    this.app = app2;
    this.currentElement = currentElement;
    this.source = source;
    this.sourcePath = sourcePath;
    this.sourceMeta = sourceMeta;
    this.noteCreator = function(session, fileFactory) {
      fileFactory.silentCreate(1024 /* Note */, "Note - " + session.name, session.campaign.campaignId, session.adventure.adventureId, session.sessionId);
    };
    this.sceneCreator = function(scene, fileFactory) {
      const newSceneId = scene.sceneId + 1;
      fileFactory.silentCreate(8 /* Scene */, "s" + (scene.session.sessionId < 10 ? "0" + scene.session.sessionId.toString() : scene.session.sessionId.toString()) + "e" + (newSceneId < 10 ? "0" + newSceneId.toString() : newSceneId.toString()), scene.campaign.campaignId, scene.adventure.adventureId, scene.session.sessionId, newSceneId);
    };
    this.io = this.app.plugins.getPlugin("rpg-manager").database;
  }
  generateBreadcrumb() {
    const response = this.generateElementBreadcrumb(null, 1 /* Campaign */, this.currentElement.campaign);
    if (this.currentElement.type !== 1 /* Campaign */) {
      response.mainTitle = DataType[this.currentElement.type];
      switch (this.currentElement.type) {
        case 2 /* Adventure */:
          this.generateElementBreadcrumb(response, 2 /* Adventure */, this.currentElement);
          break;
        case 4 /* Session */:
          this.generateSessionBreadcrumb(response, this.currentElement);
          break;
        case 8 /* Scene */:
          this.generateSceneBreadcrumb(response, this.currentElement);
          break;
        default:
          this.generateElementBreadcrumb(response, this.currentElement.type, this.currentElement);
          break;
      }
    }
    return response;
  }
  generateElementBreadcrumb(parent, type, data, linkText = null, isNewLine = false) {
    const response = new ResponseBreadcrumb(this.app);
    response.link = data.link;
    response.title = DataType[type];
    if (linkText != null)
      response.linkText = linkText;
    if (isNewLine)
      response.isInNewLine = isNewLine;
    if (parent != null)
      parent.nextBreadcrumb = response;
    return response;
  }
  generateSessionBreadcrumb(parent, session) {
    const adventureBreadcrumb = this.generateElementBreadcrumb(parent, 2 /* Adventure */, session.adventure);
    const sessionBreadcrumb = this.generateElementBreadcrumb(adventureBreadcrumb, 4 /* Session */, session);
    let previousBreadcrumb = null;
    if (session.previousSession != null)
      previousBreadcrumb = this.generateElementBreadcrumb(sessionBreadcrumb, 4 /* Session */, session.previousSession, "<< prev session", true);
    let sessionNotesBreadcrumb;
    if (session.note != null) {
      sessionNotesBreadcrumb = this.generateElementBreadcrumb(previousBreadcrumb != null ? previousBreadcrumb : sessionBreadcrumb, 1024 /* Note */, session.note, "notes");
    } else {
      sessionNotesBreadcrumb = new ResponseBreadcrumb(this.app);
      sessionNotesBreadcrumb.link = "";
      sessionNotesBreadcrumb.linkText = "create session notes";
      sessionNotesBreadcrumb.functionParameters = [this.currentElement, this.app.plugins.getPlugin("rpg-manager").factories.files];
      sessionNotesBreadcrumb.function = this.noteCreator;
      if (previousBreadcrumb != null) {
        previousBreadcrumb.nextBreadcrumb = sessionNotesBreadcrumb;
      } else {
        sessionNotesBreadcrumb.isInNewLine = true;
        sessionBreadcrumb.nextBreadcrumb = sessionNotesBreadcrumb;
      }
    }
    let nextBreadcrumb = null;
    if (session.nextSession != null)
      nextBreadcrumb = this.generateElementBreadcrumb(sessionNotesBreadcrumb, 4 /* Session */, session.nextSession, "next session >>");
    return nextBreadcrumb != null ? nextBreadcrumb : sessionNotesBreadcrumb;
  }
  generateSceneBreadcrumb(parent, scene) {
    const adventureBreadcrumb = this.generateElementBreadcrumb(parent, 2 /* Adventure */, scene.adventure);
    const sessionBreadcrumb = this.generateElementBreadcrumb(adventureBreadcrumb, 4 /* Session */, scene.session);
    const sceneBreadcrumb = this.generateElementBreadcrumb(sessionBreadcrumb, 8 /* Scene */, scene);
    let previousBreadcrumb = null;
    if (scene.previousScene != null)
      previousBreadcrumb = this.generateElementBreadcrumb(sceneBreadcrumb, 8 /* Scene */, scene.previousScene, "<< prev scene", true);
    let nextBreadcrumb = null;
    if (scene.nextScene != null) {
      nextBreadcrumb = this.generateElementBreadcrumb(previousBreadcrumb != null ? previousBreadcrumb : sceneBreadcrumb, 8 /* Scene */, scene.nextScene, "next scene >>", previousBreadcrumb != null ? false : true);
    } else {
      const newSceneBreadcrumb = new ResponseBreadcrumb(this.app);
      newSceneBreadcrumb.link = "";
      newSceneBreadcrumb.linkText = "+ add scene >>";
      newSceneBreadcrumb.functionParameters = [this.currentElement, this.app.plugins.getPlugin("rpg-manager").factories.files];
      newSceneBreadcrumb.function = this.sceneCreator;
      if (previousBreadcrumb == null) {
        newSceneBreadcrumb.isInNewLine = true;
        sceneBreadcrumb.nextBreadcrumb = newSceneBreadcrumb;
      } else {
        previousBreadcrumb.nextBreadcrumb = newSceneBreadcrumb;
      }
    }
    return nextBreadcrumb != null ? nextBreadcrumb : previousBreadcrumb != null ? previousBreadcrumb : sceneBreadcrumb;
  }
};

// src/data/responses/ResponseData.ts
var ResponseData = class {
  constructor() {
    this.elements = [];
  }
  addElement(element, position = null) {
    if (element != null) {
      if (position == null) {
        this.elements.push(element);
      } else {
        this.elements.splice(position, 0, element);
      }
    }
  }
};

// src/models/AdventureModel.ts
var AdventureModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "SessionTable", this.io.readListParametrised(void 0, 4 /* Session */, this.currentElement.campaign.campaignId, this.currentElement.adventureId).sort(function(leftData, rightData) {
        if (leftData.sessionId > rightData.sessionId)
          return -1;
        if (leftData.sessionId < rightData.sessionId)
          return 1;
        return 0;
      })));
      return response;
    });
  }
};

// src/models/CampaignModel.ts
var CampaignModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.settings, "AdventureTable", this.io.readListParametrised(void 0, 2 /* Adventure */, this.currentElement.campaignId).sort(function(leftData, rightData) {
        if (leftData.adventureId > rightData.adventureId)
          return -1;
        if (leftData.adventureId < rightData.adventureId)
          return 1;
        return 0;
      })));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.settings, "SessionTable", this.io.readListParametrised(void 0, 4 /* Session */, this.currentElement.campaignId).sort(function(leftData, rightData) {
        if (leftData.sessionId > rightData.sessionId)
          return -1;
        if (leftData.sessionId < rightData.sessionId)
          return 1;
        return 0;
      })));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.settings, "CharacterTable", this.io.readListParametrised(void 0, 16 /* Character */ | 32 /* NonPlayerCharacter */, this.currentElement.campaignId).sort(function(leftData, rightData) {
        if (leftData.name > rightData.name)
          return 1;
        if (leftData.name < rightData.name)
          return -1;
        return 0;
      })));
      return response;
    });
  }
};

// src/models/CampaignNavigationModel.ts
var CampaignNavigationModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      var _a;
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.settings, "Banner", this.currentElement));
      if (((_a = this.sourceMeta) == null ? void 0 : _a.abt) != null) {
        response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.settings, "AbtPlot", this.currentElement, null, this.sourceMeta.abt));
      }
      return response;
    });
  }
};

// src/models/ClueModel.ts
var ClueModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */ | 32 /* NonPlayerCharacter */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "EventTable", this.currentElement.getRelationships(128 /* Event */, true)));
      return response;
    });
  }
};

// src/models/ErrorModel.ts
var ErrorModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      const status = new ResponseLine(this.app);
      status.content = this.app.plugins.getPlugin("rpg-manager").factories.contents.create('<span class="rpgm-missing">The selected function does not exist in Rpg Manager</span>', 4 /* Markdown */);
      response.addElement(status);
      return response;
    });
  }
};

// src/models/EventModel.ts
var EventModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */ | 32 /* NonPlayerCharacter */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "ClueTable", this.currentElement.getRelationships(256 /* Clue */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false)));
      return response;
    });
  }
};

// src/models/FactionModel.ts
var FactionModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */ | 32 /* NonPlayerCharacter */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false)));
      return response;
    });
  }
};

// src/models/LocationModel.ts
var LocationModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */ | 32 /* NonPlayerCharacter */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "EventTable", this.currentElement.getRelationships(128 /* Event */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "ClueTable", this.currentElement.getRelationships(256 /* Clue */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false), "Contained locations"));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, true), "Part of locations"));
      return response;
    });
  }
};

// src/models/NoteModel.ts
var NoteModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "SceneTable", this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 8 /* Scene */, this.currentElement.campaign.campaignId, this.currentElement.adventure.adventureId, this.currentElement.sessionId)));
      return response;
    });
  }
};

// src/models/NpcModel.ts
var NpcModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "FactionTable", this.currentElement.getRelationships(512 /* Faction */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */ | 32 /* NonPlayerCharacter */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "EventTable", this.currentElement.getRelationships(128 /* Event */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "ClueTable", this.currentElement.getRelationships(256 /* Clue */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false)));
      return response;
    });
  }
};

// src/models/PcModel.ts
var PcModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "FactionTable", this.currentElement.getRelationships(512 /* Faction */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */ | 32 /* NonPlayerCharacter */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false)));
      return response;
    });
  }
};

// src/models/SceneModel.ts
var SceneModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "MusicTable", this.currentElement.getRelationships(4096 /* Music */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "CharacterTable", this.currentElement.getRelationships(16 /* Character */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "FactionTable", this.currentElement.getRelationships(512 /* Faction */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "ClueTable", this.currentElement.getRelationships(256 /* Clue */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "LocationTable", this.currentElement.getRelationships(64 /* Location */, false)));
      return response;
    });
  }
};

// src/models/SceneNavigationModel.ts
var SceneNavigationModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement, null, this.sourceMeta));
      return response;
    });
  }
};

// src/models/SessionModel.ts
var SessionModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "MusicTable", this.currentElement.getRelationships(4096 /* Music */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "SceneTable", this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 8 /* Scene */, this.currentElement.campaign.campaignId, this.currentElement.adventure.adventureId, this.currentElement.sessionId)));
      return response;
    });
  }
};

// src/models/SessionNavigationModel.ts
var SessionNavigationModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      var _a, _b;
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      if (((_a = this.sourceMeta) == null ? void 0 : _a.abt) != null) {
        response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "AbtPlot", this.currentElement, null, this.sourceMeta.abt));
      }
      if (((_b = this.sourceMeta) == null ? void 0 : _b.storycircle) != null) {
        response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "StoryCirclePlot", this.currentElement, null, this.sourceMeta.storycircle));
      }
      return response;
    });
  }
};

// src/data/responses/TimelineResponse.ts
var TimelineResponse = class extends AbstractResponse {
  constructor(app2) {
    super(app2);
    this.responseType = 6 /* Timeline */;
    this.elements = [];
  }
  sort() {
    this.elements.sort((a, b) => {
      return a.fullDate.valueOf() - b.fullDate.valueOf();
    });
  }
};

// src/data/responses/TimelineElementResponse.ts
var TimelineElementResponse = class {
  constructor(fullDate, date, time, type, synopsis, link) {
    this.fullDate = fullDate;
    this.date = date;
    this.time = time;
    this.type = type;
    this.synopsis = synopsis;
    this.link = link;
  }
};

// src/models/TimelineModel.ts
var TimelineModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Banner", this.currentElement));
      const timeline = new TimelineResponse(this.app);
      if (this.sourceMeta.events === true) {
        this.addEvents(timeline);
      }
      if (this.sourceMeta.clues === true) {
        this.addClues(timeline);
      }
      if (this.sourceMeta.births === true) {
        this.addBirths(timeline);
      }
      if (this.sourceMeta.deaths === true) {
        this.addDeaths(timeline);
      }
      if (this.sourceMeta.sessions === true) {
        this.addSessions(timeline);
      }
      timeline.sort();
      response.addElement(timeline);
      return response;
    });
  }
  addEvents(timeline) {
    const events = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 128 /* Event */, this.currentElement.campaign.campaignId);
    events.filter((data) => data.date != null).forEach((event) => {
      var _a;
      if (event.date != null) {
        let time = event.date.toLocaleTimeString();
        time = time.substring(0, time.length - 3);
        timeline.elements.push(new TimelineElementResponse(event.date, event.date.toDateString(), time, "event", (_a = event.synopsis) != null ? _a : "", event.link));
      }
    });
  }
  addClues(timeline) {
    const clues = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 256 /* Clue */, this.currentElement.campaign.campaignId);
    clues.filter((data) => data.isFound === true).forEach((clue) => {
      var _a;
      if (clue.found != null) {
        timeline.elements.push(new TimelineElementResponse(clue.found, clue.found.toDateString(), "00:00", "clue", (_a = clue.synopsis) != null ? _a : "", clue.link));
      }
    });
  }
  addBirths(timeline) {
    const characters = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 16 /* Character */ | 32 /* NonPlayerCharacter */, this.currentElement.campaign.campaignId);
    characters.filter((data) => data.dob != null).forEach((character) => {
      var _a;
      if (character.dob != null) {
        timeline.elements.push(new TimelineElementResponse(character.dob, character.dob.toDateString(), "00:00", "birth", (_a = character.synopsis) != null ? _a : "", character.link));
      }
    });
  }
  addDeaths(timeline) {
    const characters = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 16 /* Character */ | 32 /* NonPlayerCharacter */, this.currentElement.campaign.campaignId);
    characters.filter((data) => data.death != null).forEach((character) => {
      var _a;
      if (character.death != null) {
        timeline.elements.push(new TimelineElementResponse(character.death, character.death.toDateString(), "00:00", "death", (_a = character.synopsis) != null ? _a : "", character.link));
      }
    });
  }
  addSessions(timeline) {
    const sessions = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 4 /* Session */, this.currentElement.campaign.campaignId);
    sessions.filter((data) => data.date != null).forEach((session) => {
      var _a;
      if (session.date != null) {
        timeline.elements.push(new TimelineElementResponse(session.date, session.date.toDateString(), "00:00", "session", (_a = session.synopsis) != null ? _a : "", session.link));
      }
    });
  }
};

// src/models/AdventureNavigationModel.ts
var AdventureNavigationModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      var _a;
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      if (((_a = this.sourceMeta) == null ? void 0 : _a.abt) != null) {
        response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "AbtPlot", this.currentElement, null, this.sourceMeta.abt));
      }
      return response;
    });
  }
};

// src/settings/Raw/enums/RawEndpoint.ts
var RawEndpoint = /* @__PURE__ */ ((RawEndpoint2) => {
  RawEndpoint2[RawEndpoint2["Characters"] = 0] = "Characters";
  return RawEndpoint2;
})(RawEndpoint || {});

// src/settings/Raw/helpers/RawApi.ts
var RawApi = class {
  static get(apiCampaignKey, parentEndpoint, parentId = null, childEndpoint = null, childId = null) {
    return __async(this, null, function* () {
      const server = "https://api.raw.dev.carlonicora.com/v1.0";
      let endpoint = "/" + RawEndpoint[parentEndpoint];
      if (parentId != null) {
        endpoint += "/" + parentId;
        if (childEndpoint != null) {
          endpoint += "/" + RawEndpoint[childEndpoint];
          if (childId != null)
            endpoint += "/" + childId;
        }
      }
      const data = yield fetch(server + endpoint, {
        method: "GET",
        headers: {
          Authorization: "Bearer " + (apiCampaignKey != null ? apiCampaignKey : "")
        }
      });
      const response = yield data.json();
      return response;
    });
  }
};

// src/settings/Raw/models/RawNpcModel.ts
var RawNpcModel = class extends NpcModel {
  generateData() {
    return __async(this, null, function* () {
      var _a, _b, _c, _d, _e, _f;
      const response = __superGet(RawNpcModel.prototype, this, "generateData").call(this);
      if (((_c = (_b = (_a = this.sourceMeta) == null ? void 0 : _a.raw) == null ? void 0 : _b.character) == null ? void 0 : _c.id) != null) {
        const id = (_f = (_e = (_d = this.sourceMeta) == null ? void 0 : _d.raw) == null ? void 0 : _e.character) == null ? void 0 : _f.id;
        const apiCampaignKey = this.currentElement.campaign.apiCampaignKey;
        const character = yield RawApi.get(apiCampaignKey, 0 /* Characters */, id);
        this.sourceMeta.raw.character = character;
        this.sourceMeta.raw.character.id = id;
      }
      this.addCharacterRecordSheet(response);
      return response;
    });
  }
  addCharacterRecordSheet(response) {
    return __async(this, null, function* () {
      response.then((response2) => {
        this.app.plugins.getPlugin("rpg-manager").factories.components.create(1 /* Raw */, "CharacterRecordSheet", this.currentElement, null, this.sourceMeta).then((component) => {
          response2.addElement(component, 2);
        });
      });
    });
  }
};

// src/models/MusicModel.ts
var MusicModel = class extends AbstractModel {
  generateData() {
    return __async(this, null, function* () {
      const response = new ResponseData();
      response.addElement(this.generateBreadcrumb());
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "Header", this.currentElement));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "MusicTable", this.currentElement.getRelationships(4096 /* Music */, false)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "SceneTable", this.currentElement.getRelationships(8 /* Scene */, true)));
      response.addElement(yield this.app.plugins.getPlugin("rpg-manager").factories.components.create(this.currentElement.campaign.settings, "SessionTable", this.currentElement.getRelationships(4 /* Session */, true)));
      return response;
    });
  }
};

// src/factories/ModelFactory.ts
var ModelsMap = {
  AgnosticAdventure: AdventureModel,
  AgnosticAdventureNavigation: AdventureNavigationModel,
  AgnosticCampaign: CampaignModel,
  AgnosticCampaignNavigation: CampaignNavigationModel,
  AgnosticClue: ClueModel,
  AgnosticError: ErrorModel,
  AgnosticEvent: EventModel,
  AgnosticFaction: FactionModel,
  AgnosticLocation: LocationModel,
  AgnosticNote: NoteModel,
  AgnosticNpc: NpcModel,
  AgnosticPc: PcModel,
  AgnosticScene: SceneModel,
  AgnosticSceneNavigation: SceneNavigationModel,
  AgnosticSession: SessionModel,
  AgnosticSessionNavigation: SessionNavigationModel,
  AgnosticTimeline: TimelineModel,
  RawNpc: RawNpcModel,
  AgnosticMusic: MusicModel
};
var ModelFactory = class extends AbstractFactory {
  create(settings, modelName, currentElement, source, sourcePath, sourceMeta) {
    let modelKey = CampaignSetting[settings] + modelName;
    if (ModelsMap[modelKey] == null && settings !== 0 /* Agnostic */) {
      modelKey = CampaignSetting[0 /* Agnostic */] + modelName;
    }
    return new ModelsMap[modelKey](this.app, currentElement, source, sourcePath, sourceMeta);
  }
};

// src/factories/PronounFactory.ts
var PronounFactory = class extends AbstractFactory {
  create(pronoun) {
    let response = null;
    if (pronoun != null) {
      switch (pronoun.toLowerCase()) {
        case "t":
        case "they":
          response = 0 /* they */;
          break;
        case "s":
        case "she":
          response = 1 /* she */;
          break;
        case "h":
        case "he":
          response = 2 /* he */;
          break;
        default:
          response = null;
          break;
      }
    }
    return response;
  }
  readPronoun(pronoun) {
    switch (pronoun) {
      case 0 /* they */:
        return "They/Them";
        break;
      case 1 /* she */:
        return "She/Her";
        break;
      case 2 /* he */:
        return "He/Him";
        break;
    }
  }
};

// src/abstracts/AbstractTemplateFactory.ts
var import_obsidian8 = require("obsidian");

// src/helpers/FileContentManager.ts
var import_obsidian7 = require("obsidian");
var FileContentManager = class {
  constructor(app2, templateFileName) {
    this.app = app2;
    this.templateFileName = templateFileName;
  }
  parse() {
    return __async(this, null, function* () {
      const templateFile = this.app.vault.getAbstractFileByPath(this.templateFileName);
      const content = yield this.app.vault.read(templateFile);
      const templateContentLines = content.split("\n").map(String);
      let frontmatterContent = "";
      let frontMatterStarted = false;
      let frontMatterCompleted = false;
      templateContentLines.forEach((content2) => {
        if (!frontMatterCompleted) {
          if (content2 === "---") {
            if (frontMatterStarted) {
              frontMatterCompleted = true;
            } else {
              frontMatterStarted = true;
            }
          } else {
            if (frontMatterStarted && !frontMatterCompleted) {
              frontmatterContent += content2 + "\n";
            }
          }
        } else if (!frontMatterStarted) {
          frontMatterStarted = true;
          frontMatterCompleted = true;
          if (this.templateContent === void 0)
            this.templateContent = "";
          this.templateContent += content2 + "\n";
        } else {
          if (this.templateContent === void 0)
            this.templateContent = "";
          this.templateContent += content2 + "\n";
        }
      });
      if (frontmatterContent !== "") {
        this.templateFrontMatter = (0, import_obsidian7.parseYaml)(frontmatterContent);
      }
    });
  }
};

// src/abstracts/AbstractTemplate.ts
var AbstractTemplate = class {
  constructor(app2, name, campaignId, adventureId, sessionId, sceneId, additionalInformation) {
    this.app = app2;
    this.name = name;
    this.campaignId = campaignId;
    this.adventureId = adventureId;
    this.sessionId = sessionId;
    this.sceneId = sceneId;
    this.additionalInformation = additionalInformation;
  }
};

// src/templates/CampaignTemplate.ts
var CampaignTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Notes\n\n";
  }
};

// src/templates/AdventureTemplate.ts
var AdventureTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Notes\n\n";
  }
};

// src/templates/CharacterTemplate.ts
var CharacterTemplate = class extends AbstractTemplate {
  getContent() {
    return `## Questionnaire
**Where and when were you born?**
>

**Who are/were your parents?**
>

**Do you have any siblings?**
>

**Write a full physical description of yourself.**
>

**To which social class do you belong?**
>

**Do you have any allergies, diseases or other physical or mental weaknesses?**
>

**Are you right-handed or left-handed?**
>

**What do you have in your pockets?**
1. 
2. 
3. 
4. 
5. 

**Do you have any quirks, strange mannerism, annoying habits, or other defining characteristics?**
>

**What are you afraid of?**
>

**What defining moments have you experienced?**
>

**What things matter to you?**
>

**What do you believe in?**
>

**What is your idol?**
>

**What is your desire?**
>

**What is your "normal"?**
>

**What is your "secret"?**
>

**What do you want to do when you "grow up"?**
>

Do you have any enemy or person you don't go on well with?
>

**Write and answer 5 questions about your character.**
1. 
2. 
3. 
4. 
5. 

## Backstory

`;
  }
};

// src/templates/NonPlayerCharacterTemplate.ts
var NonPlayerCharacterTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Notes\n- \n\n## Backstory\n";
  }
};

// src/templates/ClueTemplate.ts
var ClueTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Additional Information\n\n";
  }
};

// src/templates/LocationTemplate.ts
var LocationTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Additional Information\n\n";
  }
};

// src/templates/FactionTemplate.ts
var FactionTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Additional Information\n\n";
  }
};

// src/templates/EventTemplate.ts
var EventTemplate = class extends AbstractTemplate {
  getContent() {
    return "## Additional Information\n\n";
  }
};

// src/templates/NoteTemplate.ts
var NoteTemplate = class extends AbstractTemplate {
  getContent() {
    const characters = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 16 /* Character */ | 32 /* NonPlayerCharacter */, this.campaignId);
    let possibleRecappers = "";
    (characters || []).forEach((character) => {
      possibleRecappers += character.link + "/";
    });
    possibleRecappers = possibleRecappers.substring(0, possibleRecappers.length - 1);
    let response = "---\n";
    response += "Recap: " + possibleRecappers + "\n\n";
    response += "---\n";
    response += "## GM Notes\n- \n\n";
    response += "---\n";
    response += "## Feedback \n";
    response += this.generateFeedback("GM");
    (characters || []).forEach((character) => {
      response += this.generateFeedback(character.link);
    });
    return response;
  }
  generateFeedback(characterName) {
    return "**" + characterName + "**\n- **Notes**: \n- **Wish**: \n- **Rose**: \n\n";
  }
};

// src/templates/TimelineTemplate.ts
var TimelineTemplate = class extends AbstractTemplate {
  getContent() {
    return "";
  }
};

// src/abstracts/AbstractTemplateFactory.ts
var AbstractTemplateFactory = class {
  constructor(app2, templateName, name, campaignId, adventureId, sessionId, sceneId, additionalInformation) {
    this.app = app2;
    this.templateName = templateName;
    this.name = name;
    this.campaignId = campaignId;
    this.adventureId = adventureId;
    this.sessionId = sessionId;
    this.sceneId = sceneId;
    this.additionalInformation = additionalInformation;
  }
  generateData() {
    return __async(this, null, function* () {
      let templateFrontmatter;
      let templateContent;
      if (this.templateName != null && this.templateName != "") {
        if (this.templateName.startsWith("internal")) {
          switch (DataType[this.templateName.substring(8)]) {
            case 1 /* Campaign */:
              this.internalTemplate = new CampaignTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 2 /* Adventure */:
              this.internalTemplate = new CampaignTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 4 /* Session */:
              this.internalTemplate = new CampaignTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 8 /* Scene */:
              this.internalTemplate = new AdventureTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 16 /* Character */:
              this.internalTemplate = new CharacterTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 32 /* NonPlayerCharacter */:
              this.internalTemplate = new NonPlayerCharacterTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 256 /* Clue */:
              this.internalTemplate = new ClueTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 64 /* Location */:
              this.internalTemplate = new LocationTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 512 /* Faction */:
              this.internalTemplate = new FactionTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 128 /* Event */:
              this.internalTemplate = new EventTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 1024 /* Note */:
              this.internalTemplate = new NoteTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
            case 2048 /* Timeline */:
              this.internalTemplate = new TimelineTemplate(this.app, this.name, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.additionalInformation);
              break;
          }
        } else {
          const templateContentManager = new FileContentManager(this.app, this.templateName);
          yield templateContentManager.parse();
          templateFrontmatter = templateContentManager.templateFrontMatter;
          templateContent = templateContentManager.templateContent;
        }
      }
      const frontmatter = {
        alias: [],
        tags: [],
        completed: false
      };
      this.addFrontmatterData(frontmatter);
      this.mergeFrontmatters(frontmatter, templateFrontmatter);
      const initialCodeblock = this.generateInitialCodeBlock();
      const lastCodeblock = this.generateLastCodeBlock();
      if (this.internalTemplate !== void 0) {
        templateContent = this.internalTemplate.getContent();
      }
      return this.generateResponse(frontmatter, initialCodeblock, templateContent, lastCodeblock);
    });
  }
  generateResponse(frontmatter, initialCodeBlock, mainContent, lastCodeBlock) {
    let response = "";
    const frontmatterString = (0, import_obsidian8.stringifyYaml)(frontmatter);
    const frontmatterParsedString = frontmatterString.replaceAll("{}", "");
    response = "---\n" + frontmatterParsedString + "\n---\n";
    if (initialCodeBlock !== void 0)
      response += initialCodeBlock.toString();
    response += mainContent != null ? mainContent : "\n";
    if (lastCodeBlock !== void 0)
      response += lastCodeBlock.toString();
    return response;
  }
  mergeFrontmatters(frontmatter, additionalFrontMatter) {
    if (additionalFrontMatter !== void 0) {
      Object.entries(frontmatter).forEach(([frontmatterElementName, frontmatterElementValue]) => {
        if (typeof frontmatterElementValue !== "object") {
          if (additionalFrontMatter[frontmatterElementName] != null)
            frontmatter[frontmatterElementName] = additionalFrontMatter[frontmatterElementName];
        } else {
          if (this.isArray(frontmatterElementValue)) {
            if (additionalFrontMatter[frontmatterElementName] != null) {
              if (this.isArray(additionalFrontMatter[frontmatterElementName])) {
                Object.entries(additionalFrontMatter[frontmatterElementName]).forEach(([additionalFrontmatterElementName, additionalFrontmatterElementValue]) => {
                  let index;
                  Object.entries(frontmatterElementValue).forEach(([frontmatterSubElementName, frontmatterSubElementValue]) => {
                    if (additionalFrontmatterElementValue === frontmatterSubElementValue)
                      index = +frontmatterSubElementName;
                  });
                  if (index === void 0) {
                    if (!additionalFrontmatterElementValue.startsWith("rpgm/template/"))
                      frontmatterElementValue[frontmatterElementValue.length] = additionalFrontmatterElementValue;
                  }
                });
              } else {
                this.mergeFrontmatters(frontmatterElementValue, additionalFrontMatter[frontmatterElementName]);
              }
            }
          } else {
            this.mergeFrontmatters(frontmatterElementValue, additionalFrontMatter[frontmatterElementName]);
          }
        }
        if (typeof frontmatter[frontmatterElementValue] === "object" && additionalFrontMatter[frontmatterElementName] != null) {
          frontmatter[frontmatterElementName] = additionalFrontMatter[frontmatterElementName];
        }
      });
      Object.entries(additionalFrontMatter).forEach(([name, childFrontmatter]) => {
        if (frontmatter[name] == null && !childFrontmatter.startsWith("rpgm/template")) {
          frontmatter[name] = childFrontmatter;
        }
      });
    }
  }
  isArray(list) {
    let response = false;
    Object.entries(list).forEach(([index, value]) => {
      if (!isNaN(+index)) {
        response = true;
      }
    });
    return response;
  }
  generateInitialCodeBlock() {
    return void 0;
  }
  generateLastCodeBlock() {
    return void 0;
  }
};

// src/helpers/RpgCodeBlock.ts
var import_obsidian9 = require("obsidian");
var RpgCodeBlock = class {
  constructor(model, additionalInformation = void 0) {
    this.model = model;
    this.additionalInformation = additionalInformation;
  }
  toString() {
    let response = "```RpgManager\n";
    response += this.model + "\n";
    if (this.additionalInformation !== void 0) {
      response += (0, import_obsidian9.stringifyYaml)(this.additionalInformation);
    }
    response += "```\n";
    return response;
  }
};

// src/factories/templates/CampaignTemplateFactory.ts
var CampaignTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    var _a;
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.campaignTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.settings = "Agnostic";
    frontmatter.dates = {
      current: {}
    };
    if (this.additionalInformation != null && this.additionalInformation.current != null && this.additionalInformation.current != "") {
      frontmatter.dates.current = (_a = this == null ? void 0 : this.additionalInformation) == null ? void 0 : _a.current;
    }
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("campaignNavigation", {
      abt: {
        need: "",
        and: "",
        but: "",
        therefore: ""
      }
    });
  }
  generateLastCodeBlock() {
    return new RpgCodeBlock("campaign");
  }
};

// src/factories/templates/AdventureTemplateFactory.ts
var AdventureTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.adventureTag + "/" + this.campaignId + "/" + this.adventureId);
    frontmatter.synopsis = "";
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("adventureNavigation", {
      abt: {
        need: "",
        and: "",
        but: "",
        therefore: ""
      }
    });
  }
  generateLastCodeBlock() {
    return new RpgCodeBlock("adventure");
  }
};

// src/factories/templates/SessionTemplateFactory.ts
var SessionTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    var _a;
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.sessionTag + "/" + this.campaignId + "/" + this.adventureId + "/" + this.sessionId);
    let synopsis = (_a = this == null ? void 0 : this.additionalInformation) == null ? void 0 : _a.synopsis;
    if (synopsis === void 0) {
      synopsis = "";
    } else {
      synopsis = synopsis.replaceAll('"', '\\"');
    }
    frontmatter.synopsis = synopsis;
    frontmatter.dates = {
      session: {},
      irl: {}
    };
    frontmatter.relationships = {
      musics: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("sessionNavigation", {
      abt: {
        need: "",
        and: "",
        but: "",
        therefore: ""
      },
      storycircle: {
        you: "",
        need: "",
        go: "",
        search: "",
        find: "",
        take: "",
        return: "",
        change: ""
      }
    });
  }
  generateLastCodeBlock() {
    return new RpgCodeBlock("session");
  }
};

// src/factories/templates/SceneTemplateFactory.ts
var SceneTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.sceneTag + "/" + this.campaignId + "/" + this.adventureId + "/" + this.sessionId + "/" + this.sceneId);
    frontmatter.synopsis = "";
    frontmatter.relationships = {
      clues: {},
      characters: {},
      locations: {},
      musics: {}
    };
    frontmatter.times = {
      start: {},
      end: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("sceneNavigation", {
      trigger: "",
      action: ""
    });
  }
  generateLastCodeBlock() {
    return new RpgCodeBlock("scene");
  }
};

// src/factories/templates/CharacterTemplateFactory.ts
var CharacterTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.pcTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.relationships = {
      characters: {},
      locations: {},
      factions: {}
    };
    frontmatter.pronoun = "";
    frontmatter.dates = {
      dob: {},
      death: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("pc");
  }
};

// src/factories/templates/NonPlayerCharacterTemplateFactory.ts
var NonPlayerCharacterTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.npcTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.goals = "", frontmatter.relationships = {
      characters: {},
      locations: {},
      factions: {}
    };
    frontmatter.pronoun = "";
    frontmatter.dates = {
      dob: {},
      death: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("npc");
  }
  generateLastCodeBlock() {
    return void 0;
  }
};

// src/factories/templates/LocationTemplateFactory.ts
var LocationTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.locationTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.address = "";
    frontmatter.relationships = {
      locations: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("location");
  }
};

// src/factories/templates/EventTemplateFactory.ts
var EventTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.eventTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.relationships = {
      characters: {},
      clues: {},
      locations: {}
    };
    frontmatter.dates = {
      event: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("event");
  }
};

// src/factories/templates/ClueTemplateFactory.ts
var ClueTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.clueTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.relationships = {
      characters: {},
      locations: {}
    };
    frontmatter.dates = {
      found: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("clue");
  }
};

// src/factories/templates/FactionTemplateFactory.ts
var FactionTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.factionTag + "/" + this.campaignId);
    frontmatter.synopsis = "";
    frontmatter.relationships = {
      locations: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("faction");
  }
};

// src/factories/templates/NoteTemplateFactory.ts
var NoteTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.noteTag + "/" + this.campaignId + "/" + this.adventureId + "/" + this.sessionId);
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("note");
  }
};

// src/factories/templates/TimelineTemplateFactory.ts
var TimelineTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.timelineTag + "/" + this.campaignId);
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("timeline", {
      sessions: true,
      events: true,
      births: false,
      deaths: true,
      clues: true
    });
  }
};

// src/settings/Vampire/templates/VampireCharacterTemplate.ts
var VampireCharacterTemplate = class extends CharacterTemplateFactory {
  addFrontmatterData(frontmatter) {
  }
  generateInitialCodeBlock() {
    return void 0;
  }
  generateLastCodeBlock() {
    return void 0;
  }
};

// src/settings/Vampire/templates/VampireNonPlayerCharacterTemplate.ts
var VampireNonPlayerCharacterTemplate = class extends NonPlayerCharacterTemplateFactory {
  addFrontmatterData(frontmatter) {
  }
  generateInitialCodeBlock() {
    return void 0;
  }
  generateLastCodeBlock() {
    return void 0;
  }
};

// src/settings/Raw/templates/RawCampaignTemplate.ts
var RawCampaignTemplate = class extends CampaignTemplateFactory {
  addFrontmatterData(frontmatter) {
  }
  generateInitialCodeBlock() {
    return void 0;
  }
  generateLastCodeBlock() {
    return void 0;
  }
};

// src/settings/Vampire/templates/VampireCampaignTemplate.ts
var VampireCampaignTemplate = class extends CampaignTemplateFactory {
  addFrontmatterData(frontmatter) {
  }
  generateInitialCodeBlock() {
    return void 0;
  }
  generateLastCodeBlock() {
    return void 0;
  }
};

// src/factories/templates/MusicTemplateFactory.ts
var MusicTemplateFactory = class extends AbstractTemplateFactory {
  addFrontmatterData(frontmatter) {
    var _a, _b;
    frontmatter.tags.push(this.app.plugins.getPlugin("rpg-manager").settings.musicTag + "/" + this.campaignId);
    frontmatter.url = (_b = (_a = this == null ? void 0 : this.additionalInformation) == null ? void 0 : _a.url) != null ? _b : "";
    frontmatter.synopsis = "";
    frontmatter.relationships = {
      music: {}
    };
  }
  generateInitialCodeBlock() {
    return new RpgCodeBlock("music");
  }
};

// src/factories/TemplateFactory.ts
var TemplatesMap = {
  AgnosticCampaign: CampaignTemplateFactory,
  AgnosticAdventure: AdventureTemplateFactory,
  AgnosticSession: SessionTemplateFactory,
  AgnosticScene: SceneTemplateFactory,
  AgnosticCharacter: CharacterTemplateFactory,
  AgnosticNonPlayerCharacter: NonPlayerCharacterTemplateFactory,
  AgnosticLocation: LocationTemplateFactory,
  AgnosticEvent: EventTemplateFactory,
  AgnosticClue: ClueTemplateFactory,
  AgnosticFaction: FactionTemplateFactory,
  AgnosticNote: NoteTemplateFactory,
  AgnosticTimeline: TimelineTemplateFactory,
  VampireCharacter: VampireCharacterTemplate,
  VampireNonPlayerCharacter: VampireNonPlayerCharacterTemplate,
  RawCampaign: RawCampaignTemplate,
  VampireCampaign: VampireCampaignTemplate,
  AgnosticMusic: MusicTemplateFactory
};
var TemplateFactory = class extends AbstractFactory {
  create(settings, type, templateName, name, campaignId, adventureId, sessionId, sceneId, additionalInformation = null) {
    let templateKey = CampaignSetting[settings] + DataType[type];
    if (TemplatesMap[templateKey] == null && settings !== 0 /* Agnostic */) {
      templateKey = CampaignSetting[0 /* Agnostic */] + DataType[type];
    }
    return new TemplatesMap[templateKey](this.app, templateName, name, campaignId, adventureId, sessionId, sceneId, additionalInformation);
  }
};

// src/abstracts/AbstractView.ts
var AbstractView = class {
  constructor(app2, sourcePath) {
    this.app = app2;
    this.sourcePath = sourcePath;
  }
};

// src/views/StringView.ts
var StringView = class extends AbstractView {
  render(container, data) {
    const divContainer = container.createDiv();
    data.content.fillContent(divContainer, this.sourcePath);
  }
};

// src/views/TableView.ts
var TableView = class extends AbstractView {
  render(container, data) {
    const divContainer = container.createDiv();
    if (data.title != null) {
      divContainer.createEl("h2", { text: data.title });
    }
    if (data.create !== void 0) {
      const createButtonEl = divContainer.createEl("button", { cls: "create-button" });
      switch (data.create) {
        case 2 /* Adventure */:
          createButtonEl.textContent = "Create session from Adventure Plot";
          createButtonEl.addEventListener("click", () => {
            if (data.campaignId !== void 0 && data.adventureId !== void 0) {
              const previousAdventure = this.app.plugins.getPlugin("rpg-manager").database.readSingleParametrised(void 0, 2 /* Adventure */, data.campaignId, data.adventureId - 1);
              let nextSessionId = 1;
              if (previousAdventure != null) {
                const previousAdventureSessions = this.app.plugins.getPlugin("rpg-manager").database.readListParametrised(void 0, 4 /* Session */, data.campaignId, previousAdventure.adventureId);
                previousAdventureSessions.forEach((session) => {
                  if (nextSessionId <= session.sessionId)
                    nextSessionId = session.sessionId + 1;
                });
              }
              data.content.forEach((element) => {
                const content = element[1];
                if (data.campaignId != null) {
                  this.app.plugins.getPlugin("rpg-manager").factories.files.silentCreate(4 /* Session */, "Session " + nextSessionId, data.campaignId, data.adventureId, nextSessionId, void 0, {
                    synopsis: content.content
                  });
                }
                nextSessionId++;
              });
              createButtonEl.style.display = "none";
            }
          });
          break;
      }
    }
    const table = divContainer.createEl("table");
    table.addClass("rpgm-table");
    if (data.class != null) {
      table.addClass(data.class);
    }
    if (data.headers != null && data.headers.length > 0) {
      const header = table.createEl("tr");
      data.headers.forEach((content) => {
        const cell = header.createEl("th");
        content.fillContent(cell, this.sourcePath);
        if (content.isInLine) {
          cell.addClass("inline");
        }
      });
    }
    data.content.forEach((element) => {
      const row = table.createEl("tr");
      element.forEach((content) => {
        const cell = row.createEl("td");
        content.fillContent(cell, this.sourcePath);
        if (content.isInLine) {
          cell.addClass("inline");
        }
      });
    });
  }
};

// src/views/BannerView.ts
var BannerView = class extends AbstractView {
  render(container, data) {
    if (data.image !== null) {
      const bannerContainer = container.createDiv({ cls: "rpg-container" });
      const header = bannerContainer.createDiv({ cls: "rpgm-header" });
      header.style.backgroundImage = "url('" + data.image + "')";
      const overlay = header.createDiv({ cls: "rpgm-header-overlay" });
      overlay.createDiv({ cls: "rpgm-header-title", text: data.title });
      overlay.createDiv({ cls: "rpgm-campaign-name", text: data.subtitle != null ? data.subtitle : "" });
      overlay.createDiv({ cls: "rpgm-current-date", text: data.date !== null ? data.date : "" });
    } else {
      container.createEl("h1", { text: data.title });
    }
  }
};

// src/views/BoxView.ts
var import_obsidian10 = require("obsidian");
var BoxView = class extends AbstractView {
  render(container, data) {
    const boxDiv = container.createDiv();
    boxDiv.addClass("rpgm-box");
    boxDiv.addClass(data.colour);
    const boxTitle = boxDiv.createDiv();
    boxTitle.addClass("title");
    boxTitle.innerText = data.title;
    import_obsidian10.MarkdownRenderer.renderMarkdown(data.content != null && data.content !== "" ? data.content : '<span class="rpgm-missing">Missing ' + data.title + "</span>", boxDiv, this.sourcePath, null);
  }
};

// src/views/BreadcrumbView.ts
var import_obsidian11 = require("obsidian");
var BreadcrumbView = class extends AbstractView {
  render(container, data) {
    const breadcrumbContainer = container.createDiv({ cls: "rpgm-breadcrumb" });
    breadcrumbContainer.createEl("h2").textContent = data.mainTitle;
    const breadcrumbLine = breadcrumbContainer.createDiv({ cls: "line" });
    this.renderBreadcrumb(breadcrumbContainer, breadcrumbLine, data);
  }
  renderBreadcrumb(breadcrumb, line, data, isFirstLine = true) {
    let lineToUse = line;
    if (data.isInNewLine) {
      breadcrumb.createDiv({ cls: "reset" });
      lineToUse = breadcrumb.createDiv({ cls: "line" });
      isFirstLine = false;
    }
    const crumb = lineToUse.createDiv({ cls: "crumb" });
    crumb.createDiv({ cls: "title", text: data.title ? data.title : " " });
    const value = crumb.createDiv({ cls: "value" });
    if (data.function != null) {
      const functionLink = value.createEl("a");
      functionLink.textContent = data.linkText;
      functionLink.addEventListener("click", () => {
        if (data.functionParameters != null) {
          data.function(...data.functionParameters);
        } else {
          data.function();
        }
      });
    } else {
      let link = data.link;
      if (data.linkText != null) {
        if (link.indexOf("|") !== -1) {
          link = link.substring(0, link.indexOf("|") + 1) + data.linkText + "]]";
        } else {
          link = link.substring(0, link.indexOf("]]")) + "|" + data.linkText + "]]";
        }
      }
      import_obsidian11.MarkdownRenderer.renderMarkdown(link, value, this.sourcePath, null);
    }
    if (data.nextBreadcrumb != null) {
      if (data.nextBreadcrumb.isInNewLine === false) {
        const separator = lineToUse.createDiv({ cls: "separator" });
        separator.createDiv({ cls: "title", text: " " });
        const separatorText = separator.createDiv({ cls: "value" });
        separatorText.createEl("p").textContent = isFirstLine ? ">" : "|";
      }
      this.renderBreadcrumb(breadcrumb, lineToUse, data.nextBreadcrumb, isFirstLine);
    } else {
      breadcrumb.createDiv({ cls: "reset" });
    }
  }
};

// src/views/TimelineView.ts
var import_obsidian12 = require("obsidian");
var TimelineView = class extends AbstractView {
  render(container, data) {
    const timeline = container.createDiv({ cls: "rpgm-timeline" });
    const ul = timeline.createEl("ul");
    data.elements.forEach((timeline2) => {
      const li = ul.createEl("li");
      const timeContainer = li.createDiv({ cls: "event-time-container" });
      timeContainer.createDiv({ cls: "event-time", text: timeline2.date + (timeline2.time !== "00:00" ? "\n" + timeline2.time : "") });
      const type = timeContainer.createDiv({ cls: "event-type", text: timeline2.type });
      const bullet = li.createDiv({ cls: "bullet" });
      switch (timeline2.type) {
        case "birth":
          type.addClass("green");
          bullet.addClass("green");
          break;
        case "death":
          type.addClass("red");
          bullet.addClass("red");
          break;
        case "session":
          type.addClass("blue");
          bullet.addClass("blue");
          break;
        case "clue":
          type.addClass("purple");
          bullet.addClass("purple");
          break;
      }
      const details = li.createDiv({ cls: "event-details" });
      const fileLink = details.createEl("h3");
      const synopsis = details.createSpan();
      import_obsidian12.MarkdownRenderer.renderMarkdown(timeline2.synopsis, synopsis, this.sourcePath, null);
      import_obsidian12.MarkdownRenderer.renderMarkdown(timeline2.link.toString(), fileLink, this.sourcePath, null);
    });
  }
};

// src/views/ImageView.ts
var ImageView = class extends AbstractView {
  render(container, data) {
    if (data.imgSrc != null) {
      const divContainer = container.createDiv();
      const image = new Image(data.width, data.height);
      image.src = data.imgSrc;
      image.style.objectFit = "cover";
      divContainer.append(image);
    }
  }
};

// src/views/HeaderView.ts
var HeaderView = class extends AbstractView {
  render(container, data) {
    const crs = container.createDiv({ cls: "rpgm-header-info" });
    const crsTitle = crs.createDiv({ cls: "title" });
    data.link.fillContent(crsTitle, this.sourcePath);
    const crsContainer = crs.createDiv({ cls: "container" });
    const crsInfo = crsContainer.createDiv({ cls: "info" });
    const crsImage = crsContainer.createDiv({ cls: "image" });
    if (data.imgSrc == null) {
      crsImage.addClass("invisible");
      crsInfo.addClass("info-large");
    }
    data.elements.forEach((element) => {
      let prefix = "short";
      let crsContainer2;
      if (element.type === 1 /* Long */) {
        prefix = "long";
        crsContainer2 = crsInfo;
      } else {
        crsContainer2 = crsInfo.createDiv({ cls: "short" });
      }
      crsContainer2.createDiv({ cls: prefix + "Title", text: element.title });
      const contentEl = crsContainer2.createDiv({ cls: prefix + "Text" });
      element.value.fillContent(contentEl, this.sourcePath);
      if (element.type === 0 /* Short */) {
        crsContainer2.createDiv({ cls: "reset" });
      }
    });
    if (data.imgSrc != null) {
      const image = new Image(data.imgWidth, data.imgHeight);
      image.src = data.imgSrc;
      image.style.objectFit = "cover";
      crsImage.append(image);
    }
    crsContainer.createDiv({ cls: "reset" });
  }
};

// src/views/AbtPlotView.ts
var AbtPlotView = class extends AbstractView {
  render(container, data) {
    const titleEl = container.createEl("h2");
    titleEl.textContent = "ABT Plot";
    const plotEl = container.createDiv({ cls: "rpgm-plot-container" });
    const needEl = plotEl.createEl("p");
    data.need.fillContent(needEl, this.sourcePath);
    const andEl = plotEl.createEl("p");
    data.and.fillContent(andEl, this.sourcePath);
    const butEl = plotEl.createEl("p");
    data.but.fillContent(butEl, this.sourcePath);
    const thereforeEl = plotEl.createEl("p");
    data.therefore.fillContent(thereforeEl, this.sourcePath);
  }
};

// src/views/StoryCirclePlotView.ts
var StoryCirclePlotView = class extends AbstractView {
  render(container, data) {
    const titleEl = container.createEl("h2");
    titleEl.textContent = "Story Circle Plot";
    const plotEl = container.createDiv({ cls: "rpgm-plot-container" });
    const youEl = plotEl.createEl("p");
    data.you.fillContent(youEl, this.sourcePath);
    const needEl = plotEl.createEl("p");
    data.need.fillContent(needEl, this.sourcePath);
    const goEl = plotEl.createEl("p");
    data.go.fillContent(goEl, this.sourcePath);
    const searchEl = plotEl.createEl("p");
    data.search.fillContent(searchEl, this.sourcePath);
    const findEl = plotEl.createEl("p");
    data.find.fillContent(findEl, this.sourcePath);
    const takeEl = plotEl.createEl("p");
    data.take.fillContent(takeEl, this.sourcePath);
    const returnEl = plotEl.createEl("p");
    data.return.fillContent(returnEl, this.sourcePath);
    const changeEl = plotEl.createEl("p");
    data.change.fillContent(changeEl, this.sourcePath);
  }
};

// src/settings/Raw/modals/RawDiceRollerModal.ts
var import_obsidian13 = require("obsidian");

// src/settings/Raw/enums/RawRollResult.ts
var RawRollResult = /* @__PURE__ */ ((RawRollResult2) => {
  RawRollResult2[RawRollResult2["Standard"] = 0] = "Standard";
  RawRollResult2[RawRollResult2["CriticalSuccess"] = 1] = "CriticalSuccess";
  RawRollResult2[RawRollResult2["CriticalFailure"] = 2] = "CriticalFailure";
  return RawRollResult2;
})(RawRollResult || {});

// src/helpers/DiceResult.ts
var DiceResult = class {
  constructor(type, result) {
    if (type != null)
      this.type = type;
    if (result != null) {
      this.result = result;
      switch (this.result) {
        case 1:
          this.rollResult = 2 /* CriticalFailure */;
          break;
        case this.type:
          this.rollResult = 1 /* CriticalSuccess */;
          break;
        default:
          this.rollResult = 0 /* Standard */;
          break;
      }
    }
  }
};

// src/helpers/DiceRollerHelper.ts
var DiceRollerHelper = class {
  static rollSingleDice(diceType) {
    return this.roll(1, diceType)[0];
  }
  static roll(numberOfDices, diceType) {
    const response = [];
    for (let diceCount = 0; diceCount < numberOfDices; diceCount++) {
      response.push(new DiceResult(diceType, this.genrateRandomNumber(diceType)));
    }
    return response;
  }
  static genrateRandomNumber(max) {
    Math.ceil(1);
    Math.floor(max);
    return Math.floor(Math.random() * max) + 1;
  }
};

// src/settings/Raw/modals/RawDiceRollerModal.ts
var RawDiceRollerModal = class extends import_obsidian13.Modal {
  constructor(app2, ability) {
    super(app2);
    this.ability = ability;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    const diceRoll = DiceRollerHelper.rollSingleDice(20 /* d20 */);
    let diceResult = diceRoll.result;
    if (diceRoll.rollResult === 1 /* CriticalSuccess */) {
      diceResult = 40;
    } else if (diceRoll.rollResult === 2 /* CriticalFailure */) {
      diceResult = -20;
    }
    const result = diceResult + this.ability.value + this.ability.traitValue;
    const successes = Math.floor(result / 25);
    contentEl.createEl("h2", { text: RawAbility[this.ability.name] });
    contentEl.createDiv({ text: "Ability Value: " + this.ability.value.toString() });
    contentEl.createDiv({ text: "Trait: " + RawTrait[this.ability.trait] });
    contentEl.createDiv({ text: "Trait Value: " + this.ability.traitValue.toString() });
    contentEl.createDiv({ text: "Dice Roll: " + diceRoll.result.toString() + (diceRoll.rollResult !== 0 /* Standard */ ? " " + RawRollResult[diceRoll.rollResult] + " (real roll result: " + diceResult + ")" : "") });
    contentEl.createDiv({ text: "Result: " + result.toString() });
    contentEl.createDiv({ text: "Successes: " + successes.toString() });
    contentEl.createEl("h2", { text: result.toString() });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    super.onClose();
  }
};

// src/settings/Raw/views/RawCharacterRecordSheetView.ts
var import_obsidian15 = require("obsidian");

// src/settings/Raw/modals/RawUpdateRollerModal.ts
var import_obsidian14 = require("obsidian");
var RawUpdateRollerModal = class extends import_obsidian14.Modal {
  constructor(app2, ability, initialAbilityValue, updateRoll) {
    super(app2);
    this.ability = ability;
    this.initialAbilityValue = initialAbilityValue;
    this.updateRoll = updateRoll;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Upgrade attempt for " + RawAbility[this.ability.name] });
    contentEl.createDiv({ text: "Ability Value: " + this.initialAbilityValue.toString() });
    contentEl.createDiv({ text: "Trait: " + RawTrait[this.ability.trait] });
    contentEl.createDiv({ text: "Trait Value: " + this.ability.traitValue.toString() });
    contentEl.createDiv({ text: "Dice Roll: " + this.updateRoll.result.toString() });
    if (this.updateRoll.rollResult === 1 /* CriticalSuccess */) {
      contentEl.createDiv({ text: "Critical Success!" });
    }
    if (this.initialAbilityValue + this.ability.traitValue > this.updateRoll.result) {
      contentEl.createEl("h2", { text: "Failed to upgrade" });
    } else {
      const margin = this.updateRoll.result - (this.initialAbilityValue + this.ability.traitValue);
      contentEl.createDiv({ text: "Success Margin: " + margin.toString() });
      let upgradePoints = Math.floor(margin / 25);
      if (this.updateRoll.rollResult === 1 /* CriticalSuccess */) {
        upgradePoints *= 2;
      }
      contentEl.createDiv({ text: "Upgrade Points: " + upgradePoints.toString() });
      contentEl.createEl("h2", { text: "New ability value: " + this.ability.value.toString() });
    }
  }
};

// src/settings/Raw/views/RawCharacterRecordSheetView.ts
var RawCharacterRecordSheetView = class extends AbstractView {
  render(container, data) {
    let maxAbilities = data.body.abilities.length;
    if (data.mind.abilities.length > maxAbilities)
      maxAbilities = data.mind.abilities.length;
    if (data.spirit.abilities.length > maxAbilities)
      maxAbilities = data.spirit.abilities.length;
    container.createEl("h2", { text: "RAW Character Record Sheet" });
    this.characterRecordSheetContainerEl = container.createDiv({ cls: "rpgm-raw-character-record-shet-container" });
    const lifePointsEl = this.characterRecordSheetContainerEl.createEl("p");
    lifePointsEl.textContent = "Life Points: " + data.lifePoints.toString();
    const damagesEl = this.characterRecordSheetContainerEl.createEl("p");
    damagesEl.textContent = "Damages: " + data.damages.toString();
    const table = this.characterRecordSheetContainerEl.createEl("table");
    table.addClass("rpgm-table");
    const header = table.createEl("tr");
    header.createEl("th", { cls: "raw", text: RawTrait[0 /* Body */].toString() });
    header.createEl("th", { cls: "raw", text: data.body.value.toString() });
    header.createEl("th", { cls: "raw", text: RawTrait[1 /* Mind */].toString() });
    header.createEl("th", { cls: "raw", text: data.mind.value.toString() });
    header.createEl("th", { cls: "raw", text: RawTrait[2 /* Spirit */].toString() });
    header.createEl("th", { cls: "raw", text: data.spirit.value.toString() });
    for (let rowCount = 0; rowCount < maxAbilities; rowCount++) {
      const row = table.createEl("tr");
      this.addTraitCells(row, data.body.abilities[rowCount]);
      this.addTraitCells(row, data.mind.abilities[rowCount]);
      this.addTraitCells(row, data.spirit.abilities[rowCount]);
    }
  }
  addTraitCells(row, ability) {
    if (ability != null) {
      const abilityEl = row.createEl("td", { cls: ability.value === -10 ? "untrained" : "", text: RawAbility[ability.name] + (ability.specialisation ? "/" + ability.specialisation : "") });
      const abilityValueEl = row.createEl("td", {
        cls: ability.value === -10 ? "untrained" : "",
        text: ability.value.toString()
      });
      abilityEl.addEventListener("click", () => {
        this.upgradeStats(ability, abilityValueEl);
      });
      abilityValueEl.addEventListener("click", () => {
        new RawDiceRollerModal(this.app, ability).open();
      });
    } else {
      row.createEl("td", { text: "" });
      row.createEl("td", { text: "" });
    }
  }
  upgradeStats(ability, valueEl) {
    return __async(this, null, function* () {
      var _a;
      const activeView = app.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
      if (activeView != null) {
        const editor = activeView.editor;
        const file = activeView.file;
        const cache = this.app.metadataCache.getFileCache(file);
        (_a = cache == null ? void 0 : cache.sections) == null ? void 0 : _a.forEach((value) => {
          var _a2, _b, _c, _d, _e, _f, _g;
          if (value.type === "code") {
            if (editor.getLine(value.position.start.line) === "```RpgManager" && editor.getLine(value.position.start.line + 1).lastIndexOf("pc") !== -1) {
              const upgradeRoll = DiceRollerHelper.rollSingleDice(100 /* d100 */);
              const abilityToBeat = ability.value + ability.traitValue;
              let difference;
              let update;
              const initialAbilityValue = ability.value;
              if (upgradeRoll.result > abilityToBeat) {
                difference = upgradeRoll.result - abilityToBeat;
                update = Math.floor(difference / 25) + 1;
                if (upgradeRoll.rollResult === 1 /* CriticalSuccess */) {
                  update *= 2;
                }
                ability.value = ability.value === -10 ? update : ability.value + update;
                const start = {
                  line: value.position.start.line + 2,
                  ch: 0
                };
                const end = {
                  line: value.position.end.line,
                  ch: 0
                };
                const range = editor.getRange(start, end);
                const yaml = (_a2 = (0, import_obsidian15.parseYaml)(range)) != null ? _a2 : {};
                if (((_c = (_b = yaml == null ? void 0 : yaml.raw) == null ? void 0 : _b.character) == null ? void 0 : _c.id) != null) {
                } else {
                  if (yaml.length === 0 || (yaml == null ? void 0 : yaml.raw) == null) {
                    this.addRawMetadata(yaml);
                  } else {
                    if (((_d = yaml.raw) == null ? void 0 : _d.character) == null) {
                      this.addCharacterMetadata(yaml);
                    } else {
                      if (((_e = yaml.raw.character) == null ? void 0 : _e.body) == null)
                        this.addTraitMetadata(0 /* Body */, yaml);
                      if (((_f = yaml.raw.character) == null ? void 0 : _f.mind) == null)
                        this.addTraitMetadata(1 /* Mind */, yaml);
                      if (((_g = yaml.raw.character) == null ? void 0 : _g.spirit) == null)
                        this.addTraitMetadata(2 /* Spirit */, yaml);
                    }
                  }
                  const traitName = RawTrait[ability.trait].toLowerCase();
                  const abilityName = RawAbility[ability.name].toLowerCase();
                  if (yaml.raw.character[traitName].abilities[abilityName] == null) {
                    this.addAbilityMetadata(ability, yaml);
                  } else {
                    this.updateAbilityValue(ability, yaml);
                  }
                  editor.replaceRange((0, import_obsidian15.stringifyYaml)(yaml), start, end);
                }
              }
              new RawUpdateRollerModal(this.app, ability, initialAbilityValue, upgradeRoll).open();
            }
          }
        });
      }
    });
  }
  addRawMetadata(yaml) {
    yaml.raw = {};
    this.addCharacterMetadata(yaml);
  }
  addCharacterMetadata(yaml) {
    yaml.raw.character = {
      damages: 0
    };
    this.addTraitMetadata(0 /* Body */, yaml);
    this.addTraitMetadata(1 /* Mind */, yaml);
    this.addTraitMetadata(2 /* Spirit */, yaml);
  }
  addTraitMetadata(trait, yaml) {
    yaml.raw.character[RawTrait[trait].toLowerCase()] = {
      value: 0,
      abilities: {}
    };
  }
  addAbilityMetadata(ability, yaml) {
    yaml.raw.character[RawTrait[ability.trait].toLowerCase()].abilities[RawAbility[ability.name].toLowerCase()] = {
      value: ability.value
    };
    if (ability.specialisation != null) {
      yaml.raw.character[RawTrait[ability.trait].toLowerCase()].abilities[RawAbility[ability.name].toLowerCase()].specialisation = ability.specialisation;
    }
  }
  updateAbilityValue(ability, yaml) {
    yaml.raw.character[RawTrait[ability.trait].toLowerCase()].abilities[RawAbility[ability.name].toLowerCase()].value = ability.value;
  }
};

// src/factories/ViewFactory.ts
var ViewsMap = {
  AgnosticString: StringView,
  AgnosticTable: TableView,
  AgnosticBanner: BannerView,
  AgnosticBox: BoxView,
  AgnosticBreadcrumb: BreadcrumbView,
  AgnosticTimeline: TimelineView,
  AgnosticImage: ImageView,
  AgnosticHeader: HeaderView,
  AgnosticAbtPlot: AbtPlotView,
  AgnosticStoryCirclePlot: StoryCirclePlotView,
  RawRawCharacterRecordSheet: RawCharacterRecordSheetView
};
var ViewFactory = class extends AbstractFactory {
  create(settings, type, sourcePath) {
    let viewKey = CampaignSetting[settings] + ResponseType[type];
    if (ViewsMap[viewKey] == null && settings !== 0 /* Agnostic */) {
      viewKey = CampaignSetting[0 /* Agnostic */] + ResponseType[type];
    }
    return new ViewsMap[viewKey](this.app, sourcePath);
  }
};

// src/abstracts/AbstractFetcher.ts
var AbstractFetcher = class {
  constructor(app2) {
    this.app = app2;
  }
};

// src/fetchers/YouTubeImageFetcher.ts
var YouTubeImageFetcher = class extends AbstractFetcher {
  fetchImage(url) {
    return __async(this, null, function* () {
      var _a, _b, _c, _d;
      const youTubeApiKey = this.app.plugins.getPlugin("rpg-manager").settings.YouTubeKey;
      if (youTubeApiKey === "" || youTubeApiKey == null)
        return void 0;
      let apiResponse;
      const playlistIdentifier = "playlist?list=";
      const songIdentifier = "watch?v=";
      const alternativeSongIdentifier = "youtu.be/";
      let playlistId;
      let songId;
      try {
        if (url.indexOf(playlistIdentifier) !== -1) {
          playlistId = url.substring(url.indexOf(playlistIdentifier) + playlistIdentifier.length);
        } else if (url.indexOf(songIdentifier) !== -1) {
          songId = url.substring(url.indexOf(songIdentifier) + songIdentifier.length);
        } else if (url.indexOf(alternativeSongIdentifier) !== -1) {
          songId = url.substring(url.indexOf(alternativeSongIdentifier) + alternativeSongIdentifier.length);
        }
        if (playlistId !== void 0) {
          apiResponse = yield fetch("https://www.googleapis.com/youtube/v3/playlistItems?key=" + youTubeApiKey + "&part=snippet&playlistId=" + playlistId);
        } else if (songId !== void 0) {
          apiResponse = yield fetch("https://www.googleapis.com/youtube/v3/videos?key=" + youTubeApiKey + "&part=snippet&id=" + songId);
        }
        if (apiResponse === void 0)
          return void 0;
        const jsonData = yield apiResponse.json();
        if (jsonData === void 0)
          return void 0;
        return (_d = (_c = (_b = (_a = jsonData.items[0]) == null ? void 0 : _a.snippet) == null ? void 0 : _b.thumbnails) == null ? void 0 : _c.high) == null ? void 0 : _d.url;
      } catch (e) {
        return void 0;
      }
    });
  }
};

// src/factories/FetcherFactory.ts
var FetcherFactory = class extends AbstractFactory {
  constructor(app2) {
    super(app2);
    this.fetchers = /* @__PURE__ */ new Map();
    this.fetchers.set(0 /* YouTubeImage */, YouTubeImageFetcher);
  }
  create(type) {
    const fetcher = this.fetchers.get(type);
    if (fetcher === void 0)
      throw new Error("Fetcher " + FetcherType[type] + "not configured");
    return new fetcher(this.app);
  }
};

// src/factories/RelationshipFactory.ts
var RelationshipFactory = class {
  constructor(app2) {
    this.app = app2;
  }
  read(file, relationship) {
    return __async(this, null, function* () {
      return this.app.vault.read(file).then((fileContent) => {
        return fileContent.split("\n");
      }).then((fileContent) => {
        const body = this.parseContent(fileContent, false);
        const frontmatter = this.parseContent(fileContent, true);
        this.readBodyRelationships(body, relationship);
        this.readFrontmatterRelationships(frontmatter, relationship);
        return relationship;
      });
    });
  }
  readBodyRelationships(bodyContent, relationships) {
    for (let fileContentLineCounter = 0; fileContentLineCounter < bodyContent.length; fileContentLineCounter++) {
      let line = bodyContent[fileContentLineCounter];
      while (line.indexOf("[[") !== -1) {
        line = line.substring(line.indexOf("[[") + 2);
        const endLinkIndex = line.indexOf("]]");
        if (endLinkIndex === -1)
          break;
        let name = "";
        const nameAndAlias = line.substring(0, endLinkIndex);
        const aliasIndex = nameAndAlias.indexOf("|");
        if (aliasIndex === -1) {
          name = nameAndAlias;
        } else {
          name = nameAndAlias.substring(0, aliasIndex);
        }
        if (relationships.get(name) === void 0)
          relationships.set(name, { component: void 0, description: "", isReverse: false, isInFrontmatter: false });
      }
    }
  }
  readFrontmatterRelationships(frontmatterContent, relationships) {
    for (let fileContentLineCounter = 0; fileContentLineCounter < frontmatterContent.length; fileContentLineCounter++) {
      let line = frontmatterContent[fileContentLineCounter];
      if (line.indexOf("[[") !== -1) {
        line = line.substring(line.indexOf("[[") + 2);
        const endLinkIndex = line.indexOf("]]");
        if (endLinkIndex === -1)
          break;
        let name = "";
        let description = "";
        const nameAndAlias = line.substring(0, endLinkIndex);
        const aliasIndex = nameAndAlias.indexOf("|");
        if (aliasIndex === -1) {
          name = nameAndAlias;
        } else {
          name = nameAndAlias.substring(0, aliasIndex);
        }
        const remainingFrontmatter = line.substring(endLinkIndex + 2);
        if (remainingFrontmatter[0] === ":") {
          description = remainingFrontmatter.substring(1).trimStart();
          if (description !== "" && description[0] === description[description.length - 1] && (description[0] === '"' || description[0] === "'")) {
            description = description.substring(1, description.length - 1).replaceAll("\\", "");
            this.readBodyRelationships([description], relationships);
          }
        }
        relationships.set(name, { component: void 0, description: "", isReverse: false, isInFrontmatter: true });
      }
    }
  }
  parseContent(fileContent, isFrontMatter) {
    const response = [];
    let hasFrontmatterRelationshipStarted = false;
    let frontmatterRelationshipLevel = 0;
    let frontmatterRelationshipIndentation = 0;
    let hasFrontmatterReadStarted = false;
    let hasFrontmatterReadEnded = false;
    const containsFrontMatter = fileContent[0] === "---";
    if (isFrontMatter && !containsFrontMatter)
      return [];
    for (let fileContentLineCounter = 0; fileContentLineCounter < fileContent.length; fileContentLineCounter++) {
      let line = fileContent[fileContentLineCounter];
      let addLine = false;
      if (line === "---") {
        if (!containsFrontMatter) {
          addLine = true;
        } else {
          if (isFrontMatter) {
            if (hasFrontmatterReadStarted)
              break;
            hasFrontmatterReadStarted = true;
            continue;
          } else {
            if (!hasFrontmatterReadStarted) {
              hasFrontmatterReadStarted = true;
              continue;
            }
            if (hasFrontmatterReadStarted && !hasFrontmatterReadEnded) {
              hasFrontmatterReadEnded = true;
              continue;
            }
            if (hasFrontmatterReadEnded)
              addLine = true;
          }
        }
      } else {
        if (isFrontMatter || !isFrontMatter && hasFrontmatterReadEnded)
          addLine = true;
        if (isFrontMatter && hasFrontmatterRelationshipStarted) {
          if (!line.startsWith(" ")) {
            hasFrontmatterRelationshipStarted = false;
          } else {
            let index = 0;
            while (line[index] === " ") {
              index++;
            }
            if (frontmatterRelationshipIndentation > index)
              frontmatterRelationshipLevel--;
            if (frontmatterRelationshipIndentation < index)
              frontmatterRelationshipLevel++;
            frontmatterRelationshipIndentation = index;
            if (frontmatterRelationshipLevel === 2) {
              const indexOfSeparator = line.indexOf(":");
              line = " ".repeat(index) + "[[" + line.substring(index, indexOfSeparator) + "]]" + line.substring(indexOfSeparator);
            }
          }
        }
        if (isFrontMatter && line.toLowerCase().startsWith("relationships:"))
          hasFrontmatterRelationshipStarted = true;
      }
      if (addLine)
        response.push(line);
    }
    return response;
  }
};

// src/RpgFactories.ts
var RpgFactories = class {
  constructor(app2) {
    this.app = app2;
    this.components = new ComponentFactory(this.app);
    this.contents = new ContentFactory(this.app);
    this.data = new DataFactory(this.app);
    this.errors = new ErrorFactory(this.app);
    this.files = new FileFactory(this.app);
    this.modals = new ModalFactory(this.app);
    this.models = new ModelFactory(this.app);
    this.pronouns = new PronounFactory(this.app);
    this.templates = new TemplateFactory(this.app);
    this.views = new ViewFactory(this.app);
    this.fetchers = new FetcherFactory(this.app);
    this.relationships = new RelationshipFactory(this.app);
  }
};

// src/modals/CreationModal.ts
var import_obsidian16 = require("obsidian");
var CreationModal = class extends import_obsidian16.Modal {
  constructor(app2, type, create = true, name = null, campaignId = null, adventureId = null, sessionId = null) {
    super(app2);
    this.app = app2;
    this.type = type;
    this.create = create;
    this.name = name;
    this.settings = 0 /* Agnostic */;
    this.availableSpecificTemplates = [];
    this.availableGenericTemplates = [];
    if (campaignId != null)
      this.campaignId = campaignId;
    if (adventureId != null)
      this.adventureId = adventureId;
    if (sessionId != null)
      this.sessionId = sessionId;
    this.app.vault.getFiles().filter((file) => file.parent.path === this.app.plugins.getPlugin("rpg-manager").settings.templateFolder).forEach((file) => {
      var _a, _b;
      const metadata = this.app.metadataCache.getFileCache(file);
      if (metadata != null) {
        const tags = this.app.plugins.getPlugin("rpg-manager").tagManager.sanitiseTags((_a = metadata.frontmatter) == null ? void 0 : _a.tags);
        if (tags.length > 0) {
          const tags2 = this.app.plugins.getPlugin("rpg-manager").tagManager.sanitiseTags((_b = metadata.frontmatter) == null ? void 0 : _b.tags);
          const templateType = this.app.plugins.getPlugin("rpg-manager").tagManager.getTemplateDataType(tags2);
          if (templateType == void 0)
            this.availableGenericTemplates.push(file);
          if (templateType === this.type)
            this.availableSpecificTemplates.push(file);
        } else {
          this.availableGenericTemplates.push(file);
        }
      }
    });
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("rpgm-modal");
    if (!this.create && this.app.workspace.getActiveViewOfType(import_obsidian16.MarkdownView) == null) {
      contentEl.createEl("h2", { cls: "rpgm-modal-title", text: "Error" });
      contentEl.createSpan({ cls: "", text: "To fill a note with a RPG Manager element you must have a valid file opened." });
      return;
    }
    contentEl.createEl("h2", { cls: "rpgm-modal-title", text: "Create New " + DataType[this.type] });
    const gridEl = contentEl.createDiv({ cls: "rpgm-grid" });
    const navigationEl = gridEl.createDiv({ cls: "navigation" });
    this.additionalInformationEl = gridEl.createDiv({ cls: "additionalElements" });
    const titleEl = navigationEl.createDiv({ cls: "rpgm-input-title" });
    titleEl.createEl("label", { text: "Title of your new " + DataType[this.type] });
    this.title = titleEl.createEl("input", { type: "text" });
    if (this.name !== null) {
      this.title.value = this.name;
    }
    this.titleError = navigationEl.createEl("p", { cls: "error", text: "Please specify a valid title" });
    const selectionTitleEl = navigationEl.createDiv({ cls: "rpgm-input-title" });
    selectionTitleEl.createEl("label", { text: "Template to use" });
    this.templateEl = selectionTitleEl.createEl("select");
    this.templateEl.createEl("option", {
      text: "",
      value: ""
    });
    this.templateEl.createEl("option", {
      text: "RpgManager default " + DataType[this.type] + " template",
      value: "internal" + DataType[this.type]
    }).selected = true;
    this.templateEl.createEl("option", {
      text: "",
      value: ""
    });
    if (this.availableSpecificTemplates.length > 0) {
      const templateOptionEl = this.templateEl.createEl("option", {
        text: DataType[this.type] + "-specific templates"
      });
      templateOptionEl.disabled = true;
      this.availableSpecificTemplates.forEach((file) => {
        this.templateEl.createEl("option", {
          text: file.basename,
          value: file.path
        });
      });
      this.templateEl.createEl("option", {
        text: "",
        value: ""
      });
    }
    if (this.availableGenericTemplates.length > 0) {
      const templateOptionEl = this.templateEl.createEl("option", {
        text: "Generic templates"
      });
      templateOptionEl.disabled = true;
      this.availableGenericTemplates.forEach((file) => {
        this.templateEl.createEl("option", {
          text: file.basename,
          value: file.path
        });
      });
    }
    this.campaignModal = this.app.plugins.getPlugin("rpg-manager").factories.modals.create(this.settings, 1 /* Campaign */, this);
    const childElement = navigationEl.createDiv();
    this.button = contentEl.createEl("button", { cls: "mod-cta", text: "Create" });
    if (this.type !== 1 /* Campaign */) {
      this.button.disabled = true;
    }
    this.button.addEventListener("click", (e) => {
      this.save();
    });
    this.campaignModal.addElement(childElement);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    super.onClose();
  }
  save() {
    return __async(this, null, function* () {
      if (this.title.value === "") {
        this.titleError.style.display = "block";
        return;
      }
      if (!this.campaignModal.validate())
        return;
      if (this.adventureModal != null && !this.adventureModal.validate())
        return;
      if (this.sessionModal != null && !this.sessionModal.validate())
        return;
      if (this.sceneModal != null && !this.sceneModal.validate())
        return;
      if (this.elementModal != null && !this.elementModal.validate())
        return;
      this.saver.save(this.settings, this.type, this.create, this.templateEl.value, this.title.value, this.campaignId, this.adventureId, this.sessionId, this.sceneId, this.saver.prepareAdditionalInformation());
      this.close();
    });
  }
  enableButton() {
    this.button.disabled = false;
  }
  getContentEl() {
    const { contentEl } = this;
    return contentEl;
  }
};

// src/errors/TagMisconfiguredError.ts
var TagMisconfiguredError = class extends RpgError {
  showErrorMessage() {
    let response = super.showErrorMessage();
    response += "**The RPG Manager is not correctly configured**\n";
    let requiredIds = "";
    switch (this.type) {
      case 8 /* Scene */:
        requiredIds = "/{sceneId}" + requiredIds;
      case 4 /* Session */:
      case 1024 /* Note */:
        requiredIds = "/{sessionId}" + requiredIds;
      case 2 /* Adventure */:
        requiredIds = "/{adventureId}" + requiredIds;
    }
    requiredIds = "/{campaignId}" + requiredIds;
    response += "The correct format MUST be: `" + this.app.plugins.getPlugin("rpg-manager").tagManager.dataSettings.get(this.type) + requiredIds + "` (_with all the ids being numbers_)\n";
    return response;
  }
};

// src/helpers/TagManager.ts
var TagManager = class {
  constructor(app2) {
    this.app = app2;
    const settings = this.app.plugins.getPlugin("rpg-manager").settings;
    this.dataSettings = /* @__PURE__ */ new Map();
    this.dataSettings.set(1 /* Campaign */, settings.campaignTag);
    this.dataSettings.set(2 /* Adventure */, settings.adventureTag);
    this.dataSettings.set(4 /* Session */, settings.sessionTag);
    this.dataSettings.set(8 /* Scene */, settings.sceneTag);
    this.dataSettings.set(16 /* Character */, settings.pcTag);
    this.dataSettings.set(256 /* Clue */, settings.clueTag);
    this.dataSettings.set(128 /* Event */, settings.eventTag);
    this.dataSettings.set(512 /* Faction */, settings.factionTag);
    this.dataSettings.set(64 /* Location */, settings.locationTag);
    this.dataSettings.set(32 /* NonPlayerCharacter */, settings.npcTag);
    this.dataSettings.set(1024 /* Note */, settings.noteTag);
    this.dataSettings.set(2048 /* Timeline */, settings.timelineTag);
    this.dataSettings.set(4096 /* Music */, settings.musicTag);
    this.requiredIds = /* @__PURE__ */ new Map();
    this.requiredIds.set(1 /* Campaign */, [1 /* Campaign */]);
    this.requiredIds.set(2 /* Adventure */, [1 /* Campaign */]);
    this.requiredIds.set(4 /* Session */, [1 /* Campaign */, 2 /* Adventure */]);
    this.requiredIds.set(8 /* Scene */, [1 /* Campaign */, 2 /* Adventure */, 4 /* Session */, 8 /* Scene */]);
    this.requiredIds.set(16 /* Character */, [1 /* Campaign */]);
    this.requiredIds.set(256 /* Clue */, [1 /* Campaign */]);
    this.requiredIds.set(128 /* Event */, [1 /* Campaign */]);
    this.requiredIds.set(512 /* Faction */, [1 /* Campaign */]);
    this.requiredIds.set(64 /* Location */, [1 /* Campaign */]);
    this.requiredIds.set(32 /* NonPlayerCharacter */, [1 /* Campaign */]);
    this.requiredIds.set(1024 /* Note */, [1 /* Campaign */, 2 /* Adventure */, 4 /* Session */]);
    this.requiredIds.set(2048 /* Timeline */, [1 /* Campaign */]);
    this.requiredIds.set(4096 /* Music */, [4096 /* Music */]);
  }
  sanitiseTags(tags) {
    if (tags === void 0)
      return [];
    let response;
    if (typeof tags === "string") {
      response = tags.split(",");
      response.forEach((tag) => {
        tag = tag.replaceAll(" ", "").replaceAll("#", "");
      });
    } else {
      response = tags;
    }
    return response;
  }
  getTemplateDataType(tags) {
    if (tags == null)
      return void 0;
    let response;
    tags.forEach((tag) => {
      if (tag.startsWith("rpgm/template/" + DataType[1 /* Campaign */].toLowerCase()))
        response = 1 /* Campaign */;
      if (tag.startsWith("rpgm/template/" + DataType[2 /* Adventure */].toLowerCase()))
        response = 2 /* Adventure */;
      if (tag.startsWith("rpgm/template/" + DataType[4 /* Session */].toLowerCase()))
        response = 4 /* Session */;
      if (tag.startsWith("rpgm/template/" + DataType[8 /* Scene */].toLowerCase()))
        response = 8 /* Scene */;
      if (tag.startsWith("rpgm/template/" + DataType[32 /* NonPlayerCharacter */].toLowerCase()))
        response = 32 /* NonPlayerCharacter */;
      if (tag.startsWith("rpgm/template/" + DataType[16 /* Character */].toLowerCase()))
        response = 16 /* Character */;
      if (tag.startsWith("rpgm/template/" + DataType[256 /* Clue */].toLowerCase()))
        response = 256 /* Clue */;
      if (tag.startsWith("rpgm/template/" + DataType[64 /* Location */].toLowerCase()))
        response = 64 /* Location */;
      if (tag.startsWith("rpgm/template/" + DataType[512 /* Faction */].toLowerCase()))
        response = 512 /* Faction */;
      if (tag.startsWith("rpgm/template/" + DataType[128 /* Event */].toLowerCase()))
        response = 128 /* Event */;
      if (tag.startsWith("rpgm/template/" + DataType[2048 /* Timeline */].toLowerCase()))
        response = 2048 /* Timeline */;
      if (tag.startsWith("rpgm/template/" + DataType[1024 /* Note */].toLowerCase()))
        response = 1024 /* Note */;
      if (tag.startsWith("rpgm/template/" + DataType[4096 /* Music */].toLowerCase()))
        response = 4096 /* Music */;
    });
    return response;
  }
  getDataTag(tags) {
    if (tags == null)
      return void 0;
    let response;
    if (typeof tags === "object") {
      tags.forEach((tag) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
        if (tag !== null && typeof tag === "string") {
          if (tag.startsWith((_a = this.dataSettings.get(1 /* Campaign */)) != null ? _a : "?"))
            response = tag;
          if (tag.startsWith((_b = this.dataSettings.get(2 /* Adventure */)) != null ? _b : "?"))
            response = tag;
          if (tag.startsWith((_c = this.dataSettings.get(4 /* Session */)) != null ? _c : "?"))
            response = tag;
          if (tag.startsWith((_d = this.dataSettings.get(8 /* Scene */)) != null ? _d : "?"))
            response = tag;
          if (tag.startsWith((_e = this.dataSettings.get(32 /* NonPlayerCharacter */)) != null ? _e : "?"))
            response = tag;
          if (tag.startsWith((_f = this.dataSettings.get(16 /* Character */)) != null ? _f : "?"))
            response = tag;
          if (tag.startsWith((_g = this.dataSettings.get(256 /* Clue */)) != null ? _g : "?"))
            response = tag;
          if (tag.startsWith((_h = this.dataSettings.get(64 /* Location */)) != null ? _h : "?"))
            response = tag;
          if (tag.startsWith((_i = this.dataSettings.get(512 /* Faction */)) != null ? _i : "?"))
            response = tag;
          if (tag.startsWith((_j = this.dataSettings.get(128 /* Event */)) != null ? _j : "?"))
            response = tag;
          if (tag.startsWith((_k = this.dataSettings.get(2048 /* Timeline */)) != null ? _k : "?"))
            response = tag;
          if (tag.startsWith((_l = this.dataSettings.get(1024 /* Note */)) != null ? _l : "?"))
            response = tag;
          if (tag.startsWith((_m = this.dataSettings.get(4096 /* Music */)) != null ? _m : "?"))
            response = tag;
        }
      });
    }
    return response;
  }
  getDataType(tags = void 0, tag = void 0) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
    if (tag === void 0 && tags === void 0)
      return void 0;
    if (tags !== void 0)
      tag = this.getDataTag(tags);
    if (tag === void 0)
      return void 0;
    let response;
    if (tag.startsWith((_a = this.dataSettings.get(1 /* Campaign */)) != null ? _a : "?"))
      response = 1 /* Campaign */;
    if (tag.startsWith((_b = this.dataSettings.get(2 /* Adventure */)) != null ? _b : "?"))
      response = 2 /* Adventure */;
    if (tag.startsWith((_c = this.dataSettings.get(4 /* Session */)) != null ? _c : "?"))
      response = 4 /* Session */;
    if (tag.startsWith((_d = this.dataSettings.get(8 /* Scene */)) != null ? _d : "?"))
      response = 8 /* Scene */;
    if (tag.startsWith((_e = this.dataSettings.get(32 /* NonPlayerCharacter */)) != null ? _e : "?"))
      response = 32 /* NonPlayerCharacter */;
    if (tag.startsWith((_f = this.dataSettings.get(16 /* Character */)) != null ? _f : "?"))
      response = 16 /* Character */;
    if (tag.startsWith((_g = this.dataSettings.get(256 /* Clue */)) != null ? _g : "?"))
      response = 256 /* Clue */;
    if (tag.startsWith((_h = this.dataSettings.get(64 /* Location */)) != null ? _h : "?"))
      response = 64 /* Location */;
    if (tag.startsWith((_i = this.dataSettings.get(512 /* Faction */)) != null ? _i : "?"))
      response = 512 /* Faction */;
    if (tag.startsWith((_j = this.dataSettings.get(128 /* Event */)) != null ? _j : "?"))
      response = 128 /* Event */;
    if (tag.startsWith((_k = this.dataSettings.get(2048 /* Timeline */)) != null ? _k : "?"))
      response = 2048 /* Timeline */;
    if (tag.startsWith((_l = this.dataSettings.get(1024 /* Note */)) != null ? _l : "?"))
      response = 1024 /* Note */;
    if (tag.startsWith((_m = this.dataSettings.get(4096 /* Music */)) != null ? _m : "?"))
      response = 4096 /* Music */;
    return response;
  }
  getOptionalId(type, tag = void 0, tags = void 0) {
    try {
      return this.getId(type, tag, tags);
    } catch (e) {
      return void 0;
    }
  }
  getId(type, tag = void 0, tags = void 0) {
    if (tags === void 0 && tag === void 0)
      throw new Error("Either a tag or a list of tags should be defined");
    if (tags !== void 0)
      tag = this.getDataTag(tags);
    if (tag === void 0)
      throw new Error("The tags do not contain a valid RPG Manager outline or element tag");
    const dataType = this.getDataType(void 0, tag);
    if (dataType === void 0)
      throw new Error("The tags do not contain a valid RPG Manager outline or element tag");
    const dataSettingsTag = this.dataSettings.get(dataType);
    if (dataSettingsTag === void 0)
      throw new Error("The tags do not contain a valid RPG Manager outline or element tag");
    const ids = tag.substring(dataSettingsTag.length + 1).split("/").map(Number);
    const variables = /* @__PURE__ */ new Map();
    if (!isNaN(ids[0]))
      variables.set(1 /* Campaign */, ids[0]);
    switch (dataType) {
      case 8 /* Scene */:
        if (!isNaN(ids[3]))
          variables.set(8 /* Scene */, ids[3]);
      case 4 /* Session */:
      case 1024 /* Note */:
        if (!isNaN(ids[2]))
          variables.set(4 /* Session */, ids[2]);
      case 2 /* Adventure */:
        if (!isNaN(ids[1]))
          variables.set(2 /* Adventure */, ids[1]);
        break;
    }
    const response = variables.get(type);
    if (response == null) {
      throw new TagMisconfiguredError(this.app, dataType, tag);
    }
    return response;
  }
};

// src/database/Database.ts
var import_obsidian18 = require("obsidian");

// src/modals/MisconfiguredDataModal.ts
var import_obsidian17 = require("obsidian");
var MisconfiguredDataModal = class extends import_obsidian17.Modal {
  constructor(app2, misconfiguredTags, singleError = void 0) {
    super(app2);
    this.misconfiguredTags = misconfiguredTags;
    this.singleError = singleError;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h1", { cls: "error", text: "Error" });
    if (this.misconfiguredTags !== void 0) {
      contentEl.createEl("p", { text: "One or more of the tags that define an outline or an element are not correctly misconfigured and can't be read!" });
      contentEl.createEl("p", { text: "Please double check the errors and correct them." });
      const listEl = contentEl.createEl("ul");
      this.misconfiguredTags.forEach((error, data) => {
        const listItemEl = listEl.createEl("li");
        import_obsidian17.MarkdownRenderer.renderMarkdown("**" + data.name + "**\n" + error.showErrorMessage(), listItemEl, data.path, null);
      });
      const actionEl = contentEl.createEl("button", { text: "Open all the misconfigured files" });
      actionEl.addEventListener("click", () => {
        (this.misconfiguredTags || /* @__PURE__ */ new Map()).forEach((error, data) => {
          const leaf = app.workspace.getLeaf(true);
          leaf.openFile(data.file);
        });
        this.close();
      });
    }
    if (this.singleError !== void 0) {
      const errorEl = contentEl.createEl("p");
      import_obsidian17.MarkdownRenderer.renderMarkdown(this.singleError.showErrorMessage(), errorEl, "", null);
    }
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/errors/HiddenError.ts
var HiddenError = class extends RpgError {
  showErrorMessage() {
    return "";
  }
};

// src/errors/ElementNotFoundError.ts
var ElementNotFoundError = class extends RpgError {
  showErrorMessage() {
    let response = super.showErrorMessage();
    if (this.tag != void 0)
      response += "tag: _" + this.tag + "_\n";
    response += "**The " + DataType[this.type] + " identifier used in the tag does not exist.**\n";
    return response;
  }
};

// src/helpers/Logger.ts
var AbstractLogMessage = class {
  constructor(type, messageType, message = "", object = void 0) {
    this.type = type;
    this.messageType = messageType;
    this.message = message;
    this.object = object;
    Logger.log(this);
  }
};
var InfoLog = class extends AbstractLogMessage {
  constructor(mesageType, message = "", object = void 0) {
    super(1 /* Info */, mesageType, message, object);
  }
};
var WarningLog = class extends AbstractLogMessage {
  constructor(mesageType, message = "", object = void 0) {
    super(2 /* Warning */, mesageType, message, object);
  }
};
var ErrorLog = class extends AbstractLogMessage {
  constructor(mesageType, message = "", object = void 0) {
    super(4 /* Error */, mesageType, message, object);
  }
};
var Logger = class {
  static initialise(version, debuggableTypes = void 0) {
    if (version.indexOf("-") !== -1) {
      this.isDebug = true;
      this.debuggableMessageTypes = 4 /* DatabaseInitialisation */;
      if (debuggableTypes === void 0) {
        this.debuggableTypes = 1 /* Info */ | 2 /* Warning */ | 4 /* Error */;
      } else {
        this.debuggableTypes = debuggableTypes;
      }
      new InfoLog(1 /* System */, "Logger active");
    } else {
      this.isDebug = false;
    }
  }
  static log(message) {
    if (!this.isDebug)
      return;
    if ((message.type & this.debuggableTypes) !== message.type)
      return;
    let data = [message.message + "\n"];
    if (message.object !== void 0)
      data.push(message.object);
    switch (message.type) {
      case 1 /* Info */:
        console.info(...data);
        break;
      case 4 /* Error */:
        console.error(...data);
        break;
      default:
        console.warn(...data);
        break;
    }
  }
};

// src/database/Database.ts
var _Database = class extends import_obsidian18.Component {
  constructor(app2) {
    super();
    this.app = app2;
    this.elements = [];
  }
  static initialise(app2) {
    return __async(this, null, function* () {
      yield new InfoLog(4 /* DatabaseInitialisation */, "Initialisation started");
      this.app = app2;
      this.misconfiguredTags = yield /* @__PURE__ */ new Map();
      this.database = yield new _Database(this.app);
      const temporaryDatabase = yield new _Database(this.app);
      yield this.loadCampaignSettings();
      yield new InfoLog(4 /* DatabaseInitialisation */, "Campaign settings read");
      const markdownFiles = app2.vault.getMarkdownFiles();
      for (let index = 0; index < markdownFiles.length; index++) {
        const data = yield this.createComponent(markdownFiles[index]);
        new InfoLog(4 /* DatabaseInitialisation */, "Temporary database initialised", temporaryDatabase);
        if (data !== void 0) {
          try {
            if (data instanceof AbstractOutlineData)
              yield data.checkDuplicates(temporaryDatabase);
            yield temporaryDatabase.create(data);
          } catch (e) {
            if (e instanceof RpgError) {
              const isHidden = e instanceof HiddenError;
              if (!isHidden)
                this.misconfiguredTags.set(data, e);
            } else {
              throw e;
            }
          }
        }
      }
      new InfoLog(4 /* DatabaseInitialisation */, "Temporary database initialised", temporaryDatabase);
      yield this.buildHierarchyAndRelationships(temporaryDatabase);
      if (this.misconfiguredTags.size > 0) {
        new MisconfiguredDataModal(this.app, this.misconfiguredTags).open();
      }
      return this.database;
    });
  }
  ready() {
    return __async(this, null, function* () {
      this.registerEvent(this.app.metadataCache.on("resolve", (file) => this.onSave(file)));
      this.registerEvent(this.app.vault.on("rename", (file, oldPath) => this.onRename(file, oldPath)));
      this.registerEvent(this.app.vault.on("delete", (file) => this.onDelete(file)));
      yield new InfoLog(2 /* Database */, "Database ready");
      this.app.workspace.trigger("rpgmanager:index-complete");
      this.app.workspace.trigger("rpgmanager:refresh-views");
    });
  }
  create(data) {
    let isNew = true;
    for (let elementCount = 0; elementCount < this.elements.length; elementCount++) {
      if (this.elements[elementCount].path === data.path) {
        this.elements[elementCount] = data;
        isNew = false;
      }
    }
    if (isNew) {
      this.elements.push(data);
    }
  }
  read(query = void 0, comparison = void 0) {
    const response = this.elements.filter(query !== null ? query : true);
    if (comparison !== void 0) {
      this.internalSort(response, comparison);
    }
    return response;
  }
  update(data) {
    this.create(data);
  }
  delete(data) {
    const key = typeof data === "string" ? data : data.path;
    let index = void 0;
    for (let dataCounter = 0; dataCounter < this.elements.length; dataCounter++) {
      if (this.elements[dataCounter].path === key) {
        index = dataCounter;
        break;
      }
    }
    if (index !== void 0)
      this.elements.splice(index, 1);
    return index !== void 0;
  }
  internalSort(data, comparison) {
  }
  readByName(database, name) {
    const list = (database !== void 0 ? database : this).read((data) => data.path === name, void 0);
    return list.length === 1 ? list[0] : void 0;
  }
  readSingleParametrised(database, dataType, campaignId, adventureId = void 0, sessionId = void 0, sceneId = void 0) {
    const result = (database !== void 0 ? database : this).read(this.generateQuery(dataType, false, void 0, void 0, campaignId, adventureId, sessionId, sceneId), void 0);
    if (result.length === 0)
      throw new ElementNotFoundError(this.app, dataType, void 0, campaignId, adventureId, sessionId, sceneId);
    if (result.length > 1)
      throw new ElementDuplicatedError(this.app, dataType, void 0, campaignId, adventureId, sessionId, sceneId);
    return result[0];
  }
  readSingle(database, dataType, tag, overloadId = void 0) {
    const result = (database !== void 0 ? database : this).read(this.generateQuery(dataType, false, tag, overloadId), void 0);
    if (result.length === 0)
      throw new ElementNotFoundError(this.app, dataType, tag);
    if (result.length > 1)
      throw new ElementDuplicatedError(this.app, dataType, tag);
    return result[0];
  }
  readListParametrised(database, dataType, campaignId = void 0, adventureId = void 0, sessionId = void 0, sceneId = void 0, comparison = void 0) {
    return (database !== void 0 ? database : this).read(this.generateQuery(dataType, true, void 0, void 0, campaignId, adventureId, sessionId, sceneId), comparison);
  }
  readList(database, dataType, comparison = void 0, tag, overloadId = void 0) {
    return (database !== void 0 ? database : this).read(this.generateQuery(dataType, true, tag, overloadId), comparison);
  }
  onDelete(file) {
    return __async(this, null, function* () {
      if (this.delete(file.path)) {
        this.refreshRelationships();
        this.app.workspace.trigger("rpgmanager:refresh-views");
      }
    });
  }
  onRename(file, oldPath) {
    return __async(this, null, function* () {
      const metadata = this.app.metadataCache.getFileCache(file);
      const data = this.read((data2) => data2.name === oldPath, void 0);
      if (data.length === 1 && metadata != null) {
        data[0].reload(file, metadata);
        this.refreshRelationships();
        this.app.workspace.trigger("rpgmanager:refresh-views");
      }
    });
  }
  onSave(file) {
    return __async(this, null, function* () {
      const recordset = this.read((data) => data.name === file.path, void 0);
      let component = this.readByName(this, file.path);
      if (component === void 0) {
        try {
          component = yield _Database.createComponent(file);
          if (component !== void 0) {
            if (component instanceof AbstractOutlineData) {
              component.checkDuplicates(this);
              component.loadHierarchy(this);
            }
            this.create(component);
          }
        } catch (e) {
          if (e instanceof RpgError) {
            const isHidden = e instanceof HiddenError;
            if (!isHidden)
              new MisconfiguredDataModal(this.app, void 0, e).open();
          } else {
            throw e;
          }
          return;
        }
        yield this.refreshRelationships();
        this.app.workspace.trigger("rpgmanager:refresh-views");
      }
    });
  }
  refreshRelationships() {
    return __async(this, null, function* () {
      for (let index = 0; index < this.elements.length; index++) {
        yield this.elements[index].loadRelationships(this);
      }
      for (let index = 0; index < this.elements.length; index++) {
        if (!this.elements[index].isOutline)
          yield this.elements[index].loadReverseRelationships(this);
      }
    });
  }
  generateQuery(dataType, isList, tag, overloadId, campaignId = void 0, adventureId = void 0, sessionId = void 0, sceneId = void 0) {
    if (tag !== void 0) {
      campaignId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(1 /* Campaign */, tag);
      adventureId = this.app.plugins.getPlugin("rpg-manager").tagManager.getOptionalId(2 /* Adventure */, tag);
      sessionId = this.app.plugins.getPlugin("rpg-manager").tagManager.getOptionalId(4 /* Session */, tag);
      sceneId = this.app.plugins.getPlugin("rpg-manager").tagManager.getOptionalId(8 /* Scene */, tag);
    }
    switch (dataType) {
      case 1 /* Campaign */:
        if (overloadId !== void 0)
          campaignId = overloadId;
        return (data) => (dataType & data.type) === data.type && (isList ? true : data.campaignId === campaignId);
        break;
      case 2 /* Adventure */:
        if (overloadId !== void 0)
          adventureId = overloadId;
        return (data) => (dataType & data.type) === data.type && data.campaign.campaignId === campaignId && (isList ? true : data.adventureId === adventureId);
        break;
      case 4 /* Session */:
      case 1024 /* Note */:
        if (overloadId !== void 0)
          sessionId = overloadId;
        return (data) => (dataType & data.type) === data.type && data.campaign.campaignId === campaignId && (adventureId !== void 0 ? data.adventure.adventureId === adventureId : true) && (isList ? true : data.sessionId === sessionId);
        break;
      case 8 /* Scene */:
        if (overloadId !== void 0)
          sceneId = overloadId;
        return (data) => (dataType & data.type) === data.type && data.campaign.campaignId === campaignId && (adventureId !== void 0 ? data.adventure.adventureId === adventureId : true) && data.session.sessionId === sessionId && (isList ? true : data.sceneId === sceneId);
        break;
      default:
        if (overloadId !== void 0)
          campaignId = overloadId;
        return (data) => (dataType & data.type) === data.type && data.campaign.campaignId === campaignId;
        break;
    }
  }
  static loadCampaignSettings() {
    this.app.vault.getMarkdownFiles().forEach((file) => {
      var _a, _b, _c;
      const metadata = this.app.metadataCache.getFileCache(file);
      if (metadata !== null) {
        const dataTags = this.app.plugins.getPlugin("rpg-manager").tagManager.sanitiseTags((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.tags);
        if (this.app.plugins.getPlugin("rpg-manager").tagManager.getDataType(dataTags) === 1 /* Campaign */) {
          const campaignId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(1 /* Campaign */, void 0, dataTags);
          if (campaignId !== void 0) {
            const settings = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.settings) !== void 0 ? CampaignSetting[(_c = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _c.settings] : 0 /* Agnostic */;
            this.campaignSettings.set(campaignId, settings);
          }
        }
      }
    });
  }
  static createComponent(file) {
    return __async(this, null, function* () {
      var _a;
      let response;
      const metadata = this.app.metadataCache.getFileCache(file);
      new InfoLog(4 /* DatabaseInitialisation */, "Record TFile metadata read", metadata);
      if (metadata == null)
        return;
      const dataTags = this.app.plugins.getPlugin("rpg-manager").tagManager.sanitiseTags((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.tags);
      new InfoLog(4 /* DatabaseInitialisation */, "Record tags initialised", dataTags);
      const dataTag = this.app.plugins.getPlugin("rpg-manager").tagManager.getDataTag(dataTags);
      new InfoLog(4 /* DatabaseInitialisation */, "Record tag initialised", dataTag);
      if (dataTag == void 0)
        return;
      const dataType = this.app.plugins.getPlugin("rpg-manager").tagManager.getDataType(void 0, dataTag);
      if (dataType === void 0) {
        new WarningLog(4 /* DatabaseInitialisation */, "TFile is not a record");
        return;
      }
      ;
      new InfoLog(4 /* DatabaseInitialisation */, "Record type initialised", DataType[dataType]);
      const campaignId = this.app.plugins.getPlugin("rpg-manager").tagManager.getId(1 /* Campaign */, dataTag);
      if (campaignId === void 0)
        new ErrorLog(4 /* DatabaseInitialisation */, "Campaign Id not found", dataTag);
      const settings = this.campaignSettings.get(campaignId);
      if (settings === void 0)
        new ErrorLog(4 /* DatabaseInitialisation */, "Settings Missing!");
      if (campaignId !== void 0 && settings !== void 0) {
        response = yield this.app.plugins.getPlugin("rpg-manager").factories.data.create(settings, dataTag, dataType, file);
        yield response.initialise();
        new InfoLog(4 /* DatabaseInitialisation */, "Record Created", response);
      }
      return response;
    });
  }
  static buildHierarchyAndRelationships(temporaryDatabase) {
    return __async(this, null, function* () {
      new InfoLog(4 /* DatabaseInitialisation */, "Building Hierarchy", temporaryDatabase);
      return this.addHierarchy(temporaryDatabase, 1 /* Campaign */).then(() => {
        new InfoLog(4 /* DatabaseInitialisation */, "Hierarchy built", temporaryDatabase);
        return this.buildRelationships(temporaryDatabase).then(() => {
          new InfoLog(4 /* DatabaseInitialisation */, "Relationships connected", temporaryDatabase);
          return;
        });
      });
    });
  }
  static addHierarchy(temporaryDatabase, dataType) {
    return __async(this, null, function* () {
      new InfoLog(4 /* DatabaseInitialisation */, "Loading hierarchy", dataType !== void 0 ? DataType[dataType] : "Elements");
      const data = temporaryDatabase.read((data2) => dataType !== void 0 ? (dataType & data2.type) === data2.type : data2.isOutline === false, void 0);
      for (let index = 0; index < data.length; index++) {
        yield data[index].loadHierarchy(this.database);
        try {
          this.database.create(data[index]);
        } catch (e) {
          if (e instanceof RpgError) {
            const isHidden = e instanceof HiddenError;
            if (!isHidden)
              this.misconfiguredTags.set(data[index], e);
          } else {
            throw e;
          }
        }
      }
      if (dataType === void 0)
        return;
      switch (dataType) {
        case 1 /* Campaign */:
          return yield this.addHierarchy(temporaryDatabase, 2 /* Adventure */);
          break;
        case 2 /* Adventure */:
          return yield this.addHierarchy(temporaryDatabase, 4 /* Session */);
          break;
        case 4 /* Session */:
          return yield this.addHierarchy(temporaryDatabase, 8 /* Scene */);
          break;
        case 8 /* Scene */:
          return yield this.addHierarchy(temporaryDatabase, 1024 /* Note */);
          break;
        case 1024 /* Note */:
          return yield this.addHierarchy(temporaryDatabase, void 0);
          break;
        default:
          return;
          break;
      }
    });
  }
  static buildRelationships(database) {
    return __async(this, null, function* () {
      for (let index = 0; index < database.elements.length; index++) {
        yield database.elements[index].loadRelationships(database);
      }
      for (let index = 0; index < database.elements.length; index++) {
        if (!database.elements[index].isOutline)
          yield database.elements[index].loadReverseRelationships(database);
      }
    });
  }
};
var Database = _Database;
Database.campaignSettings = /* @__PURE__ */ new Map();
Database.misconfiguredTags = /* @__PURE__ */ new Map();

// src/main.ts
var RpgManager = class extends import_obsidian19.Plugin {
  constructor() {
    super(...arguments);
    this.ready = false;
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Loading RpgManager " + this.manifest.version);
      yield Logger.initialise(this.manifest.version, 4 /* Error */ | 2 /* Warning */);
      yield this.loadSettings();
      (0, import_obsidian19.addIcon)("d20", '<g cx="50" cy="50" r="50" fill="currentColor" g transform="translate(0.000000,0.000000) scale(0.018)" stroke="none"><path d="M1940 4358 l-612 -753 616 -3 c339 -1 893 -1 1232 0 l616 3 -612 753 c-337 413 -616 752 -620 752 -4 0 -283 -339 -620 -752z"/><path d="M1180 4389 c-399 -231 -731 -424 -739 -428 -9 -6 3 -17 40 -38 30 -17 152 -87 271 -156 l217 -126 476 585 c261 321 471 584 467 583 -4 0 -333 -189 -732 -420z"/><path d="M3676 4225 c457 -562 477 -585 498 -572 11 8 133 78 269 157 l249 143 -29 17 c-62 39 -1453 840 -1458 840 -2 0 210 -263 471 -585z"/><path d="M281 2833 c0 -472 4 -849 8 -838 24 58 520 1362 523 1373 3 12 -168 116 -474 291 l-58 32 1 -858z"/><path d="M4571 3536 c-145 -84 -264 -156 -264 -160 -1 -4 118 -320 263 -701 l265 -694 3 430 c1 237 1 621 0 854 l-3 424 -264 -153z"/><path d="M1272 3290 c7 -20 1283 -2229 1288 -2229 5 0 1281 2209 1288 2229 2 7 -451 10 -1288 10 -837 0 -1290 -3 -1288 -10z"/><path d="M1025 3079 c-2 -8 -158 -416 -345 -906 -187 -491 -340 -897 -340 -903 0 -5 4 -10 8 -10 5 0 415 -65 913 -145 497 -80 928 -149 957 -154 l52 -8 -23 41 c-85 150 -1202 2083 -1208 2090 -5 6 -10 3 -14 -5z"/><path d="M3470 2028 c-337 -585 -614 -1066 -616 -1069 -2 -3 7 -4 19 -2 12 2 445 71 962 154 517 82 941 152 943 154 3 2 -1 19 -7 37 -33 93 -675 1774 -681 1781 -4 4 -283 -471 -620 -1055z"/><path d="M955 842 c17 -11 336 -196 710 -412 374 -216 695 -401 713 -412 l32 -20 0 314 0 314 -707 113 c-390 62 -724 115 -743 118 l-35 5 30 -20z"/><path d="M3428 741 l-718 -116 0 -313 0 -314 33 20 c17 11 347 201 732 422 385 222 704 407 710 412 16 14 -22 8 -757 -111z"/></g>');
      this.addSettingTab(new RpgManagerSettingTab(this.app, this));
      app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
    });
  }
  initialise() {
    return __async(this, null, function* () {
      const reloadStart = Date.now();
      this.functions = new RpgFunctions(this.app);
      this.factories = new RpgFactories(this.app);
      this.tagManager = new TagManager(this.app);
      Database.initialise(this.app).then((database) => {
        this.database = database;
        this.registerEvents();
        this.app.workspace.trigger("rpgmanager:refresh-views");
        console.log(`RPG Manager: ${this.database.elements.length} outlines and elements have been indexed in ${(Date.now() - reloadStart) / 1e3}s.`);
      });
      this.registerCodeBlock();
      this.registerCommands();
    });
  }
  onLayoutReady() {
    return __async(this, null, function* () {
      yield this.initialise();
    });
  }
  onunload() {
    return __async(this, null, function* () {
      __superGet(RpgManager.prototype, this, "onunload").call(this);
      this.app.workspace.off("resolved", this.refreshViews);
      this.app.workspace.off("modify", this.refreshViews);
    });
  }
  refreshViews() {
    this.app.workspace.trigger("rpgmanager:refresh-views");
  }
  createRpgView(source, el, component, sourcePath) {
    return __async(this, null, function* () {
      component.addChild(new RpgController(this.app, el, source, component, sourcePath));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  updateSettings(settings) {
    return __async(this, null, function* () {
      Object.assign(this.settings, settings);
      yield this.saveData(this.settings);
    });
  }
  registerEvents() {
    this.registerEvent(this.app.metadataCache.on("resolved", this.refreshViews.bind(this)));
    this.registerEvent(this.app.workspace.on("file-open", this.refreshViews.bind(this)));
  }
  registerCodeBlock() {
    this.registerMarkdownCodeBlockProcessor("RpgManager", (source, el, ctx) => __async(this, null, function* () {
      return this.createRpgView(source, el, ctx, ctx.sourcePath);
    }));
  }
  registerCommands() {
    Object.keys(DataType).filter((v) => isNaN(Number(v))).forEach((type, index) => {
      this.addCommand({
        id: "rpg-manager-create-" + type.toLowerCase(),
        name: "Create a new " + type,
        callback: () => {
          new CreationModal(this.app, DataType[type]).open();
        }
      });
      this.addCommand({
        id: "rpg-manager-fill-" + type.toLowerCase(),
        name: "Fill with " + type,
        callback: () => {
          let name = null;
          const activeFile = app.workspace.getActiveFile();
          if (activeFile != null) {
            name = activeFile.basename;
          }
          new CreationModal(this.app, DataType[type], false, name).open();
        }
      });
    });
  }
};
var DEFAULT_SETTINGS = {
  campaignTag: "rpgm/outline/campaign",
  adventureTag: "rpgm/outline/adventure",
  sessionTag: "rpgm/outline/session",
  sceneTag: "rpgm/outline/scene",
  npcTag: "rpgm/element/character/npc",
  pcTag: "rpgm/element/character/pc",
  locationTag: "rpgm/element/location",
  factionTag: "rpgm/element/faction",
  eventTag: "rpgm/element/event",
  clueTag: "rpgm/element/clue",
  timelineTag: "rpgm/element/timeline",
  noteTag: "rpgm/outline/note",
  automaticMove: true,
  templateFolder: "",
  musicTag: "rpgm/element/music",
  YouTubeKey: ""
};
var RpgManagerSettingTab = class extends import_obsidian19.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  fillOptionsWithFolders(dropdown, parent = void 0) {
    let folderList = [];
    if (parent != void 0) {
      folderList = parent.children.filter((file) => file instanceof import_obsidian19.TFolder);
    } else {
      folderList = this.app.vault.getRoot().children.filter((file) => file instanceof import_obsidian19.TFolder);
    }
    folderList.forEach((folder) => {
      dropdown.addOption(folder.path, folder.path);
      this.fillOptionsWithFolders(dropdown, folder);
    });
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "CampaignSetting for Role Playing Game Manager" });
    containerEl.createEl("h3", { text: "Templates" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Manage the folder RPG Manager can read the templates from");
      frag.createEl("br");
      frag.appendText(" ");
    }) });
    new import_obsidian19.Setting(this.containerEl).setName("Templates folder").setDesc(createFragment((frag) => {
      frag.appendText("Select the folder in which you keep the templates for RPG Manager.");
      frag.createEl("br");
      frag.appendText("If you leave this value empty, the creation of outlines and elements won't have any additional information apart from the frontmatter and the codeblocks");
      frag.createEl("br");
      frag.appendText(" ");
    })).addDropdown((dropdown) => {
      dropdown.addOption("", "");
      this.fillOptionsWithFolders(dropdown);
      dropdown.setValue(this.plugin.settings.templateFolder);
      dropdown.onChange((value) => __async(this, null, function* () {
        return yield this.plugin.updateSettings({ templateFolder: value });
      }));
    });
    containerEl.createEl("h3", { text: "Automations" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Set your preferences for the automations RPG Manager offers.");
      frag.createEl("br");
      frag.appendText(" ");
    }) });
    new import_obsidian19.Setting(this.containerEl).setName("Auto Organisation of Notes").setDesc(createFragment((frag) => {
      frag.createEl("br");
      frag.appendText("RPG Manager automatically organise created or filled outlines and elements in separate folders.");
      frag.createEl("br");
      frag.appendText("You can avoid the automatical move of your notes by disabling this setting.");
      frag.createEl("br");
      frag.appendText(" ");
    })).addToggle((toggle) => toggle.setValue(this.plugin.settings.automaticMove).onChange((value) => __async(this, null, function* () {
      return yield this.plugin.updateSettings({ automaticMove: value });
    })));
    containerEl.createEl("h2", { text: "External Services" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Use this area to setup the information relative to third party services");
      frag.createEl("br");
      frag.createEl("p", { text: "ATTENTION: the configurations are saved in a file in your vault. If you share your vault, any secret key might be shared!" }).style.color = "var(--text-error)";
      frag.createEl("br");
      frag.appendText(" ");
    }) });
    new import_obsidian19.Setting(this.containerEl).setName("YouTube API Key").setDesc(createFragment((frag) => {
      frag.appendText("If you want to use the automation included in the `Music` element through YouTube, please generate a YouTube Api Key and add it here");
      frag.createEl("br");
      frag.appendText("To generate your YouTube Api key you can follow the instructions in ");
      frag.createEl("a", { text: "this link", href: "https://rapidapi.com/blog/how-to-get-youtube-api-key/" });
      frag.createEl("br");
      frag.appendText("/{campaignId}");
    })).addText((text) => text.setPlaceholder("Your YouTube API Key").setValue(this.plugin.settings.YouTubeKey).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ YouTubeKey: value });
    })));
    containerEl.createEl("h3", { text: "Outlines" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Outlines are the plot part of the campaign.");
      frag.createEl("br");
      frag.appendText("The outlines are organised as campaigns > adventures > sessions > scenes");
      frag.createEl("br");
      frag.appendText("Each tag that identifies an outline should be followed by the ids of the parent outlines and end with a unique identifier for the current outline");
      frag.createEl("br");
      frag.createEl("span");
      frag.appendText(" ");
    }) });
    new import_obsidian19.Setting(this.containerEl).setName("Campaign Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying the campaign");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/campaign").setValue(this.plugin.settings.campaignTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ campaignTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Adventure Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying an Adventure");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}/{adventureId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/adventure").setValue(this.plugin.settings.adventureTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ adventureTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Session Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying a Session");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}/{adventureId}/{sessionId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/session").setValue(this.plugin.settings.sessionTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ sessionTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Scenes Outline Tag").setDesc(createFragment((frag) => {
      frag.appendText("The tag identifying a Scene");
      frag.createEl("br");
      frag.appendText("Required ids:");
      frag.createEl("br");
      frag.appendText("/{campaignId}/{adventureId}/{sessionId}/{sceneId}");
    })).addText((text) => text.setPlaceholder("rpgm/outline/scene").setValue(this.plugin.settings.sceneTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ sceneTag: value });
    })));
    containerEl.createEl("h3", { text: "Elements" });
    containerEl.createEl("span", { text: createFragment((frag) => {
      frag.appendText("Elements are all the parts of the campaign which are not a plot.");
      frag.createEl("br");
      frag.appendText("The elements do not have a hyerarchical structure, but they only identify the campaign they belong to.");
      frag.createEl("br");
      frag.appendText("Each tag that identifies an element should be followed by the {campaignId}");
      frag.createEl("br");
      frag.appendText(" ");
    }) });
    new import_obsidian19.Setting(this.containerEl).setName("Player Character Tag").addText((text) => text.setPlaceholder("rpgm/element/character/pc").setValue(this.plugin.settings.pcTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ pcTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Non Player Character Tag").addText((text) => text.setPlaceholder("rpgm/element/character/npc").setValue(this.plugin.settings.npcTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ npcTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Location Tag").addText((text) => text.setPlaceholder("rpgm/element/location").setValue(this.plugin.settings.locationTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ locationTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Faction Tag").addText((text) => text.setPlaceholder("rpgm/element/faction").setValue(this.plugin.settings.factionTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ factionTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Event Tag").addText((text) => text.setPlaceholder("rpgm/element/event").setValue(this.plugin.settings.eventTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ eventTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Clue Tag").addText((text) => text.setPlaceholder("rpgm/element/clue").setValue(this.plugin.settings.clueTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ clueTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Timeline Tag").addText((text) => text.setPlaceholder("rpgm/element/timeline").setValue(this.plugin.settings.timelineTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ timelineTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Note Tag").addText((text) => text.setPlaceholder("rpgm/element/note").setValue(this.plugin.settings.noteTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ noteTag: value });
    })));
    new import_obsidian19.Setting(this.containerEl).setName("Music Tag").addText((text) => text.setPlaceholder("rpgm/element/music").setValue(this.plugin.settings.musicTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.updateSettings({ musicTag: value });
    })));
  }
};
