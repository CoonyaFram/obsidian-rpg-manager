/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __reflectGet = Reflect.get;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RpgManager
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/api.ts
var import_obsidian = require("obsidian");

// src/abstracts/AbstractData.ts
var AbstractData = class {
  constructor(api, data) {
    this.api = api;
    this.data = data;
    this.link = data.file.link;
    this.name = data.file.name;
    this.path = data.file.path;
  }
};
var AbstractImageData = class extends AbstractData {
  constructor(api, data) {
    super(api, data);
    this.imageSrc = api.getImageLink(data);
    this.image = this.imageSrc !== null ? api.getImage(data) : "";
  }
  getImage(width = 75, height = 75) {
    if (this.imageSrc === null)
      return "";
    return this.api.getImage(this.data, width, height);
  }
};
var AbstractDataList = class {
  constructor(campaign) {
    this.campaign = campaign;
  }
  add(data) {
    this.elements.push(data);
  }
  map(data) {
    const response = /* @__PURE__ */ new Map();
    const character = this.elements.find((t) => t.link === data.link);
    if (character !== void 0) {
      Object.entries(character).forEach(([key, value]) => {
        response.set(key, value);
      });
    }
    return response;
  }
};

// src/data/SessionData.ts
var SessionList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var SessionData = class extends AbstractData {
  constructor(api, data, campaign = null, adventure = null, previousSession = null, nextSession = null) {
    super(api, data);
    this.campaign = campaign;
    this.adventure = adventure;
    this.previousSession = previousSession;
    this.nextSession = nextSession;
    this.id = this.api.getId(data.tags, this.api.settings.sessionTag);
    this.adventureId = this.api.getParentId(data.tags, this.api.settings.sessionTag);
    this.synopsis = data.synopsis;
    if (data.dates.session !== null && data.dates.session !== void 0)
      this.date = this.api.formatDate(data.dates.session, "short");
    if (data.dates.irl !== null && data.dates.irl !== void 0)
      this.irl = this.api.formatDate(data.dates.irl);
  }
};
SessionData.frontmatter = {
  "synopsis": true,
  "ids": {
    "adventure": true,
    "session": true
  },
  "dates": {
    "session": true,
    "irl": false
  }
};

// src/data/AdventureData.ts
var AdventureList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var AdventureData = class extends AbstractData {
  constructor(api, data) {
    super(api, data);
    this.id = this.api.getId(data.tags, this.api.settings.adventureTag);
    this.synopsis = data.synopsis;
  }
};
AdventureData.frontmatter = {
  "synopsis": true,
  "ids": {
    "adventure": true
  }
};

// src/data/CharacterData.ts
var CharacterList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var CharacterData = class extends AbstractImageData {
  constructor(api, data, campaign, useAdditionalInformation = null) {
    super(api, data);
    this.campaign = campaign;
    this.age = "";
    this.image = this.api.getImage(data);
    if (campaign !== null)
      this.age = this.api.calculateAge(data, campaign.currentDate);
    this.isDead = data.dates.death != void 0;
    this.goals = data.goals != void 0 ? data.goals : null;
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};
CharacterData.frontmatter = {
  "pc": {
    "dates": {
      "dob": true,
      "death": true
    },
    "relationships": {
      "characters": true,
      "factions": true,
      "locations": true
    }
  },
  "npc": {
    "synopsis": true,
    "goals": true,
    "dates": {
      "dob": true,
      "death": true
    },
    "relationships": {
      "characters": true,
      "factions": true,
      "locations": true
    }
  }
};

// src/data/ClueData.ts
var ClueList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var ClueData = class extends AbstractImageData {
  constructor(api, data, useAdditionalInformation = null) {
    super(api, data);
    this.image = this.api.getImage(data);
    if (data.dates.found !== null && data.dates.found !== void 0 && data.dates.found !== false) {
      this.found = this.api.formatDate(data.dates.found, "long");
    } else {
      this.found = false;
    }
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};
ClueData.frontmatter = {
  "synopsis": true,
  "dates": {
    "found": false
  },
  "relationships": {
    "characters": true,
    "locations": true
  }
};

// src/data/ImageData.ts
var ImageData = class extends AbstractImageData {
  constructor(api, data, width = 75, height = 75) {
    super(api, data);
    this.image = this.imageSrc !== null ? this.api.getImage(data, width, height) : "";
  }
};

// src/data/SynopsisData.ts
var SynopsisData = class extends AbstractData {
  constructor(api, data, title = null) {
    var _a, _b;
    super(api, data);
    this.title = title;
    this.synopsis = data.synopsis !== null ? data.synopsis : "";
    this.death = ((_a = data.dates) == null ? void 0 : _a.death) !== void 0 && ((_b = data.dates) == null ? void 0 : _b.death) !== void 0 ? this.api.formatDate(data.dates.death, "short") : "";
    this.isCharacter = data.tags.indexOf("character/npc") !== -1;
  }
};

// src/data/LocationData.ts
var LocationList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var LocationData = class extends AbstractImageData {
  constructor(api, data, useAdditionalInformation = null) {
    super(api, data);
    this.address = data.address;
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};
LocationData.frontmatter = {
  "synopsis": true,
  "address": false
};

// src/data/index.ts
var data_exports = {};
__export(data_exports, {
  AdventureData: () => AdventureData,
  AdventureList: () => AdventureList,
  CampaignData: () => CampaignData,
  CharacterData: () => CharacterData,
  CharacterList: () => CharacterList,
  ClueData: () => ClueData,
  ClueList: () => ClueList,
  EventData: () => EventData,
  EventList: () => EventList,
  FactionData: () => FactionData,
  FactionList: () => FactionList,
  ImageData: () => ImageData,
  LocationData: () => LocationData,
  LocationList: () => LocationList,
  SceneData: () => SceneData,
  SceneList: () => SceneList,
  SessionData: () => SessionData,
  SessionList: () => SessionList,
  SynopsisData: () => SynopsisData,
  TimelineData: () => TimelineData,
  TimelineList: () => TimelineList
});

// src/data/CampaignData.ts
var CampaignData = class extends AbstractImageData {
  constructor(api, data) {
    super(api, data);
    this.currentDate = data.dates.current;
    this.id = this.api.getId(data.tags, api.settings.campaignTag);
  }
};
CampaignData.frontmatter = {
  "dates": {
    "current": true
  }
};

// src/data/EventData.ts
var EventList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var EventData = class extends AbstractImageData {
  constructor(api, data, campaign, useAdditionalInformation = null) {
    super(api, data);
    this.campaign = campaign;
    if (data.dates.event != null)
      this.date = this.api.formatDate(data.dates.event, "short");
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};
EventData.frontmatter = {
  "synopsis": true,
  "dates": {
    "event": true
  },
  "relationships": {
    "characters": true,
    "clues": true,
    "locations": true
  }
};

// src/data/FactionData.ts
var FactionList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var FactionData = class extends AbstractImageData {
  constructor(api, data, campaign, useAdditionalInformation = null) {
    super(api, data);
    this.campaign = campaign;
    this.synopsis = useAdditionalInformation !== null ? useAdditionalInformation : data.synopsis;
  }
};
FactionData.frontmatter = {
  "synopsis": true,
  "relationships": {
    "locations": true
  }
};

// src/data/SceneData.ts
var SceneList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
};
var SceneData = class extends AbstractImageData {
  constructor(api, data, session = null, adventure = null, previousScene = null, nextScene = null, campaign = null) {
    var _a;
    super(api, data);
    this.session = session;
    this.adventure = adventure;
    this.previousScene = previousScene;
    this.nextScene = nextScene;
    this.campaign = campaign;
    this.duration = "";
    this.action = data.action != void 0 ? data.action : "";
    this.synopsis = data.synopsis != void 0 ? data.synopsis : "";
    this.sessionId = ((_a = data.ids) == null ? void 0 : _a.session) != void 0 ? data.ids.session : 0;
    this.sessionId = this.api.getParentId(data.tags, this.api.settings.sceneTag);
    this.startTime = this.api.formatTime(data.time.start);
    this.endTime = this.api.formatTime(data.time.end);
    if (this.startTime !== "" && this.endTime !== "") {
      this.duration = this.api.calculateDuration(data.time.start, data.time.end);
    }
  }
};
SceneData.frontmatter = {
  "synopsis": true,
  "action": true,
  "ids": {
    "session": true,
    "scene": true
  },
  "relationships": {
    "characters": true,
    "clues": true,
    "locations": true
  },
  "time": {
    "start": false,
    "end": false
  }
};

// src/data/TimelineData.ts
var TimelineList = class extends AbstractDataList {
  constructor(campaign) {
    super(campaign);
    this.elements = [];
  }
  sort() {
    this.elements.sort((a, b) => {
      return a.datetime - b.datetime;
    });
  }
};
var TimelineData = class extends AbstractImageData {
  constructor(api, data, type) {
    super(api, data);
    this.type = type;
    this.image = this.api.getImage(data, 70);
    this.synopsis = data.synopsis;
    switch (type) {
      case "event":
        this.datetime = data.dates.event;
        break;
      case "death":
        this.datetime = data.dates.death;
        break;
      case "birth":
        this.datetime = data.dates.dob;
        break;
      case "session":
        this.datetime = data.dates.session;
        break;
      case "clue":
        this.datetime = data.dates.found;
        break;
    }
    this.date = this.api.formatDate(this.datetime, "short");
    this.time = this.api.formatTime(this.datetime);
  }
  getEventColour() {
    switch (this.type) {
      case "event":
        return "";
        break;
      case "birth":
        return " green";
        break;
      case "death":
        return " red";
        break;
      case "session":
        return " blue";
        break;
      case "clue":
        return " purple";
        break;
    }
    return "";
  }
};

// src/factories/DataFactory.ts
var DataFactory = class {
  static create(type, api, campaign, current, record, additionalInformation) {
    return this["create" + DataType[type]](api, campaign, current, record, additionalInformation);
  }
  static createCharacter(api, campaign, current, record, additionalInformation) {
    return new CharacterData(api, record, campaign, additionalInformation);
  }
  static createLocation(api, campaign, current, record, additionalInformation) {
    return new LocationData(api, record, additionalInformation);
  }
  static createEvent(api, campaign, current, record, additionalInformation) {
    return new EventData(api, record, campaign, additionalInformation);
  }
  static createClue(api, campaign, current, record, additionalInformation) {
    return new ClueData(api, record, additionalInformation);
  }
  static createFaction(api, campaign, current, record, additionalInformation) {
    return new FactionData(api, record, campaign, additionalInformation);
  }
};

// src/io/IoData.ts
var DataType = /* @__PURE__ */ ((DataType2) => {
  DataType2[DataType2["Campaign"] = 0] = "Campaign";
  DataType2[DataType2["Adventure"] = 1] = "Adventure";
  DataType2[DataType2["Session"] = 2] = "Session";
  DataType2[DataType2["Scene"] = 3] = "Scene";
  DataType2[DataType2["Character"] = 4] = "Character";
  DataType2[DataType2["NonPlayerCharacter"] = 5] = "NonPlayerCharacter";
  DataType2[DataType2["Location"] = 6] = "Location";
  DataType2[DataType2["Event"] = 7] = "Event";
  DataType2[DataType2["Clue"] = 8] = "Clue";
  DataType2[DataType2["Faction"] = 9] = "Faction";
  return DataType2;
})(DataType || {});
var IoData = class {
  constructor(api, campaign, dv, current) {
    this.api = api;
    this.campaign = campaign;
    this.dv = dv;
    this.current = current;
    this.id = null;
    var _a;
    this.outlinks = [];
    this.readOutlinks();
    const corePlugin = (_a = this.api.app.internalPlugins) == null ? void 0 : _a.plugins["templates"];
    this.templateFolder = corePlugin.instance.options.folder;
    this.current.tags.forEach((tag) => {
      if (tag.startsWith(this.api.settings.campaignTag)) {
        this.getId(this.api.settings.campaignTag);
      } else if (tag.startsWith(this.api.settings.adventureTag)) {
        this.getId(this.api.settings.adventureTag);
      } else if (tag.startsWith(this.api.settings.sessionTag)) {
        this.getId(this.api.settings.sessionTag);
      } else if (tag.startsWith(this.api.settings.sceneTag)) {
        this.getId(this.api.settings.sceneTag);
      }
    });
  }
  readOutlinks() {
    if (this.current != void 0) {
      this.current.file.outlinks.forEach((file) => {
        const page = this.dv.page(file.path);
        if (page != void 0) {
          this.outlinks.push(page);
        }
      });
    }
  }
  isAlreadyPresent(list, element) {
    let response = false;
    list.elements.forEach((existingElement) => {
      if (element.file.path === existingElement.path) {
        response = true;
        return true;
      }
    });
    return response;
  }
  hasMainTag(page, type) {
    if (page.tags == void 0) {
      return false;
    }
    switch (type) {
      case 4 /* Character */:
        return page.tags.indexOf(this.api.settings.npcTag) !== -1 || page.tags.indexOf(this.api.settings.pcTag) !== -1;
        break;
      case 8 /* Clue */:
        return page.tags.indexOf(this.api.settings.clueTag) !== -1;
        break;
      case 6 /* Location */:
        return page.tags.indexOf(this.api.settings.locationTag) !== -1;
        break;
      case 9 /* Faction */:
        return page.tags.indexOf(this.api.settings.factionTag) !== -1;
        break;
      case 7 /* Event */:
        return page.tags.indexOf(this.api.settings.eventTag) !== -1;
        break;
      default:
        return false;
        break;
    }
  }
  getCorrectTag(type) {
    var _a;
    let response = "";
    switch (type) {
      case 4 /* Character */:
        response = "(#" + this.api.settings.npcTag + " or #" + this.api.settings.pcTag + ")";
        break;
      case 8 /* Clue */:
        response = "#" + this.api.settings.clueTag;
        break;
      case 6 /* Location */:
        response = "#" + this.api.settings.locationTag;
        break;
      case 9 /* Faction */:
        response = "#" + this.api.settings.factionTag;
        break;
      case 7 /* Event */:
        response = "#" + this.api.settings.eventTag;
        break;
    }
    response += " and #" + this.api.settings.campaignIdentifier + "/" + ((_a = this.campaign) == null ? void 0 : _a.id);
    return response;
  }
  getId(identifyingTag) {
    this.current.tags.forEach((tag) => {
      if (tag.startsWith(identifyingTag)) {
        this.id = tag.substring(tag.lastIndexOf("/") + 1);
      }
    });
  }
  getAdventureList() {
    const response = new AdventureList(this.campaign);
    if (this.campaign !== null) {
      const query = "#" + this.api.settings.adventureTag + " and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
      this.dv.pages(query).where((adventure) => adventure.file.folder !== this.templateFolder).sort((adventure) => -adventure.ids.adventure).forEach((adventure) => {
        response.add(new AdventureData(this.api, adventure));
      });
    }
    return response;
  }
  getAdventure(adventureId) {
    let response = null;
    if (this.campaign !== null) {
      const query = "#" + this.api.settings.adventureTag + "/" + adventureId + " and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
      const adventures = this.dv.pages(query);
      if (adventures !== null && adventures.length === 1) {
        response = new AdventureData(this.api, adventures[0]);
      }
    }
    return response;
  }
  getSession(adventureId, sessionId) {
    let response = null;
    if (this.campaign !== null) {
      const query = "#" + this.api.settings.sessionTag + "/" + adventureId + "/" + sessionId + " and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
      const sessions = this.dv.pages(query);
      if (sessions !== null && sessions.length === 1) {
        response = new SessionData(this.api, sessions[0], this.campaign);
      }
    }
    return response;
  }
  getSessionList(adventureId = null) {
    const response = new SessionList(this.campaign);
    if (this.campaign !== null) {
      const query = "#" + this.api.settings.sessionTag + (adventureId !== null ? "/" + adventureId : "") + " and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
      this.dv.pages(query).where((session) => session.file.folder !== this.templateFolder).sort((session) => -this.api.getId(session.tags, this.api.settings.sessionTag)).forEach((session) => {
        response.add(new SessionData(this.api, session));
      });
    }
    return response;
  }
  getSceneList() {
    const response = new SceneList(this.campaign);
    if (this.campaign !== null) {
      const query = "#" + this.api.settings.sceneTag + "/" + this.id + " and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
      this.dv.pages(query).where((page) => page.file.folder !== this.templateFolder).sort((scene) => this.api.getId(scene.tags, this.api.settings.sceneTag)).forEach((scene) => {
        response.add(new SceneData(this.api, scene));
      });
    }
    return response;
  }
  getCharacterList() {
    const response = new CharacterList(this.campaign);
    if (this.campaign !== null) {
      const query = "(#" + this.api.settings.npcTag + " or #" + this.api.settings.pcTag + ") and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
      this.dv.pages(query).where((character) => character.file.folder !== this.templateFolder).sort((character) => character.file.name).forEach((character) => {
        response.add(new CharacterData(this.api, character, this.campaign));
      });
    }
    return response;
  }
  getClue() {
    return new ClueData(this.api, this.current);
  }
  getImage(width = 75, height = 75) {
    return new ImageData(this.api, this.current, width, height);
  }
  getSynopsis(title = null) {
    return new SynopsisData(this.api, this.current, title);
  }
  getScene(adventureId = null, sessionId = null, sceneId = null) {
    let response = null;
    if (adventureId === null || sessionId === null || sceneId === null) {
      response = new SceneData(this.api, this.current);
    } else {
      if (this.campaign !== null) {
        const query = "#" + this.api.settings.sceneTag + "/" + adventureId + "/" + sessionId + "/" + sceneId + " and #" + this.api.settings.campaignIdentifier + "/" + this.campaign.id;
        const scenes = this.dv.pages(query);
        if (scenes !== null && scenes.length === 1) {
          response = new SceneData(this.api, scenes[0]);
        }
      }
    }
    return response;
  }
  getRelationshipList(type, parentType = null, sorting = null) {
    const response = new data_exports[DataType[type] + "List"](this.campaign);
    if (this.campaign !== null) {
      this.variableSingular = DataType[type].toLowerCase();
      this.variablePlural = this.variableSingular + "s";
      const defaultSorting = function(page) {
        return page.file.name;
      };
      let comparison;
      if (parentType === null) {
        comparison = function(page) {
          return page.file.folder !== this.templateFolder && this.current.relationships != void 0 && this.current.relationships[this.variablePlural] != void 0 && this.current.relationships[this.variablePlural][page.file.name] !== void 0;
        }.bind(this);
      } else {
        this.variableParentSingular = DataType[parentType].toLowerCase();
        this.variableParentPlural = this.variableParentSingular + "s";
        comparison = function(page) {
          return page.file.folder !== this.templateFolder && page.relationships != void 0 && page.relationships[this.variableParentPlural] != void 0 && page.relationships[this.variableParentPlural][this.current.file.name] !== void 0;
        }.bind(this);
      }
      const query = this.getCorrectTag(type);
      this.dv.pages(query).where(comparison).sort(sorting !== null ? sorting : defaultSorting).forEach((page) => {
        response.add(DataFactory.create(type, this.api, this.campaign, this.current, page, parentType === null ? this.current.relationships[this.variablePlural][page.file.name] : page.relationships[DataType[parentType].toLowerCase() + "s"][this.current.file.name]));
      });
      this.outlinks.forEach((page) => {
        if (this.hasMainTag(page, type) && !this.isAlreadyPresent(response, page)) {
          response.add(DataFactory.create(type, this.api, this.campaign, this.current, page, "_in main description_"));
        }
      });
    }
    return response;
  }
};

// src/views/templates/index.ts
var templates_exports = {};
__export(templates_exports, {
  AdventureTemplate: () => AdventureTemplate,
  CampaignTemplate: () => CampaignTemplate,
  CharacterTemplate: () => CharacterTemplate,
  ClueTemplate: () => ClueTemplate,
  EventTemplate: () => EventTemplate,
  FactionTemplate: () => FactionTemplate,
  LocationTemplate: () => LocationTemplate,
  NonPlayerCharacterTemplate: () => NonPlayerCharacterTemplate,
  SceneTemplate: () => SceneTemplate,
  SessionTemplate: () => SessionTemplate
});

// src/abstracts/AbstractTemplate.ts
var AbstractTemplate = class {
  constructor(settings) {
    this.settings = settings;
  }
  generateData() {
    let response = "";
    response += this.generateFrontmatter();
    response += this.generateTemplate();
    return response;
  }
  generateFrontmatter() {
    let response = "---\n";
    response += "alias: []\n";
    response += this.generateFrontmatterTags();
    response += this.generateFrontmatterSynopsis();
    response += this.generateFrontmatterAction();
    response += this.generateFrontmatterGoals();
    response += this.generateFrontmatterAddress();
    const dates = this.generateFrontmatterDates();
    if (dates !== null) {
      response += "dates:\n" + dates;
    }
    const times = this.generateFrontmatterTimes();
    if (times !== null) {
      response += "times:\n" + times;
    }
    const relationships = this.generateFrontmatterRelationships();
    if (relationships !== null) {
      response += "relationships: \n" + relationships;
    }
    response += "completed: false\n";
    response += "---\n";
    return response;
  }
  generateFrontmatterRelationships() {
    return null;
  }
  generateFrontmatterDates() {
    return null;
  }
  generateFrontmatterTimes() {
    return null;
  }
  generateFrontmatterSynopsis() {
    return "";
  }
  generateFrontmatterAddress() {
    return "";
  }
  generateFrontmatterAction() {
    return "";
  }
  generateFrontmatterGoals() {
    return "";
  }
};

// src/views/templates/FactionTemplate.ts
var FactionTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.factionTag + ", " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterRelationships() {
    return " locations: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your faction\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Remove these tasks\n\n\n\n---\n```RpgManager\nfaction\n```\n---\n\n## Additional Information\n";
  }
};

// src/views/templates/LocationTemplate.ts
var LocationTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.locationTag + ", " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterAddress() {
    return 'address: ""\n';
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your location\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Remove these tasks\n\n\n\n---\n```RpgManager\nlocation\n```\n---\n\n## Additional Information\n";
  }
};

// src/views/templates/ClueTemplate.ts
var ClueTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.clueTag + ", " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterRelationships() {
    return " characters: \n locations: \n";
  }
  generateFrontmatterDates() {
    return " found: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your clue\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Remove these tasks\n\n\n\n---\n```RpgManager\nclue\n```\n---\n\n## Additional Information\n";
  }
};

// src/views/templates/EventTemplate.ts
var EventTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.eventTag + ", " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterRelationships() {
    return " characters: \n clues: \n locations: \n";
  }
  generateFrontmatterDates() {
    return " event: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your event\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Remove these tasks\n\n\n\n---\n```RpgManager\nevent\n```\n---\n\n## Additional Information\n";
  }
};

// src/views/templates/NonPlayerCharacterTemplate.ts
var NonPlayerCharacterTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.npcTag + ", " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterGoals() {
    return 'goals: ""\n';
  }
  generateFrontmatterRelationships() {
    return " characters: \n factions: \n locations: \n";
  }
  generateFrontmatterDates() {
    return " dob: \n death: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your non player character\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Remove these tasks\n\n\n---\n```RpgManager\nnpc\n```\n---\n\n## Notes\n\n\n## Story\n";
  }
};

// src/views/templates/CharacterTemplate.ts
var CharacterTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.pcTag + ", " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterRelationships() {
    return " characters: \n factions: \n locations: \n";
  }
  generateFrontmatterDates() {
    return " dob: \n death: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your player character\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + '/**{campaignId}**) with an existing campaign id\n- [ ] Remove these tasks\n\n---\n```RpgManager\npc\n```\n---\n\n## Backstory\n\n## Questionnaire\nWhere and when were you born?\n>\n\nWho are/were your parents?\n>1.  \n>2.  \n\nDo you have any siblings?\n>\n\nWrite a full physical description of yourself.\n>\n\nTo which social class do you belong?\n>\n\nDo you have any allergies, diseases or other physical or mental weaknesses?\n>\n\nAre you right-handed or left-handed?\n>\n\nWhat do you have in your pockets?\n> 1. \n> 2. \n> 3. \n> 4.\n\nDo you have any quirks, strange mannerism, annoying habits, or other defining characteristics?\n>\n\nWhat are you afraid of?\n>\n\nWhat defining moments have you experienced?\n>\n\nWhat things matter to you?\n>\n\nWhat do you believe in?\n>\n\nWhat is your idol?\n>\n\nWhat is your desire?\n>\n\nWhat is your "normal"?\n>\n\nWhat is your "secret"?\n>\n\nWhat do you want to do when you "grow up"?\n>\n\nWrite and answer 5 questions about your character.\n 1. \n 2. \n 3. \n 4. \n\nDo you have any allergy?\n>';
  }
};

// src/views/templates/SceneTemplate.ts
var SceneTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.sceneTag + "/{adventureId}/{sessionId}/{sceneId}, " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterAction() {
    return 'action: ""\n';
  }
  generateFrontmatterRelationships() {
    return " clues: \n characters: \n locations: \n";
  }
  generateFrontmatterTimes() {
    return " start: \n end: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your scene\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Replace the `{adventureId}` of the scene tag (" + this.settings.sceneTag + "/**{adventureId}**/{sessionId}/{sceneId}) with an existing adventure id\n- [ ] Replace the `{sessionId}` of the scene tag (" + this.settings.sceneTag + "/{adventureId}/**{sessionId}**/{sceneId}) with an existing session id\n- [ ] Replace the `{sceneId}` of the scene tag (" + this.settings.sceneTag + "/{adventureId}/{sessionId}/**{sceneId}**) with a valid number unique to the session\n- [ ] Remove these tasks\n\n\n---\n```RpgManager\nsceneNavigation\n```\n---\n## Trigger\n\n\n## Notes\n- \n\n---\n```RpgManager\nscene\n```\n---\n";
  }
};

// src/views/templates/SessionTemplate.ts
var SessionTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.sessionTag + "/{adventureId}/{sessionId}, " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateFrontmatterDates() {
    return " session: \n irl: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your session\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Replace the `{adventureId}` of the session tag (" + this.settings.sessionTag + "/**{adventureId}**/{sessionId}) with an existing adventure id\n- [ ] Replace the `{sessionId}` of the session tag (" + this.settings.sessionTag + "/{adventureId}/**{sessionId}**) with a valid number unique to the adventure\n- [ ] Remove these tasks\n\n---\n```RpgManager\nsessionNavigation\n```\n---\n## Introduction\n\n## Plot\n### ABT Plot\n\n>\n>\n>\n>**AND** \n>\n>**BUT** \n>\n>**THEREFORE** \n>\n\n### Story Circle Plot\n\n>\n>**YOU**: \n>**NEED**: \n>**GO**: \n>**SEARCH**: \n>**FIND**: \n>**TAKE**: \n>**RETURN**: \n>**CHANGE**: \n>\n\n---\n```RpgManager\nsession\n```\n---\n";
  }
};

// src/views/templates/AdventureTemplate.ts
var AdventureTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.adventureTag + "/{adventureId}, " + this.settings.campaignIdentifier + "/{campaignId}]\n";
  }
  generateFrontmatterSynopsis() {
    return 'synopsis: ""\n';
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your adventure\n- [ ] Replace the `{campaignId}` of the campaign tag identifier (" + this.settings.campaignIdentifier + "/**{campaignId}**) with an existing campaign id\n- [ ] Replace the `{adventureId}` of the adventure tag (" + this.settings.adventureTag + "/**{adventureId}**) with a valid number unique to the campaign\n- [ ] Remove these tasks\n\n## Plot\n\n>\n>\n>\n>**AND** \n>\n>**BUT** \n>\n>**THEREFORE** \n>\n\n## Notes\n- \n\n---\n```RpgManager\nadventure\n```";
  }
};

// src/views/templates/CampaignTemplate.ts
var CampaignTemplate = class extends AbstractTemplate {
  generateFrontmatterTags() {
    return "tags: [" + this.settings.campaignTag + "/{campaignId}]\n";
  }
  generateFrontmatterDates() {
    return " current: \n";
  }
  generateTemplate() {
    return "\n- [ ] Update the name of your campaign\n- [ ] Replace the `{campaignId}` of the campaign tag (" + this.settings.campaignTag + "/**{campaignId}**) with a valid number unique to the vault\n- [ ] Remove these tasks\n\n## Plot\n\n>\n>\n>\n>**AND** \n>\n>**BUT** \n>\n>**THEREFORE** \n>\n\n---\n```RpgManager\ncampaign\n```";
  }
};

// src/factories/FileFactory.ts
var FileFactory = class {
  constructor(api) {
    this.api = api;
  }
  create(type) {
    return __async(this, null, function* () {
      const template = new templates_exports[DataType[type] + "Template"](this.api.settings);
      const data = template.generateData();
      const newFile = yield this.api.app.vault.create(DataType[type] + ".md", data);
      const leaf = this.api.app.workspace.getLeaf(false);
      yield leaf.openFile(newFile);
    });
  }
};

// src/api.ts
var Api = class extends import_obsidian.Component {
  constructor(app, settings) {
    super();
    this.app = app;
    this.settings = settings;
    this.initialiseRoots();
    this.fileFactory = new FileFactory(this);
  }
  initialiseRoots() {
    const filePath = this.app.vault.getFiles()[0].path;
    let slashCount = 0;
    let p = filePath.indexOf("/");
    while (p !== -1) {
      slashCount++;
      p = filePath.indexOf("/", p + 1);
    }
    slashCount++;
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      this.root = this.app.vault.getResourcePath(file);
    }
    if (this.root === null) {
      console.log("Rpg Manager failed to find the root folder!");
      return;
    }
    if (this.root.includes("?")) {
      this.root = this.root.substring(0, this.root.lastIndexOf("?"));
    }
    for (let removedSlash = slashCount; removedSlash > 0; removedSlash--) {
      this.root = this.root.slice(0, this.root.lastIndexOf("/"));
    }
    if (!this.root.endsWith("/")) {
      this.root += "/";
    }
    this.attachmentRoot = this.root + this.app.vault.config.attachmentFolderPath + "/";
  }
  fileExists(path) {
    const abstractFile = this.app.vault.getAbstractFileByPath(path);
    let response = false;
    if (abstractFile instanceof import_obsidian.TAbstractFile) {
      response = abstractFile ? true : false;
    }
    return response;
  }
  getImageLink(page) {
    const imageExtensions = ["jpeg", "jpg", "png", "webp"];
    for (let extensionCount = 0; extensionCount < imageExtensions.length; extensionCount++) {
      const fileName = this.app.vault.config.attachmentFolderPath + "/" + (page == null ? void 0 : page.file.name) + "." + imageExtensions[extensionCount];
      if (this.fileExists(fileName)) {
        return this.root + fileName;
      }
    }
    return null;
  }
  getImage(page, width = 75, height = 75) {
    let imageFile = null;
    if (page !== void 0) {
      imageFile = this.getImageLink(page);
    }
    let minimalDimensions = false;
    let dimensions = "width: " + width + "px; height: " + height + "px;";
    if (width !== 75 && height === 75) {
      dimensions = "width: " + width + "px;";
    } else if (width === 75 && height !== 75) {
      dimensions = "height: " + height + "px;";
    } else if (width === 75 && height === 75) {
      minimalDimensions = true;
    }
    if (imageFile === null) {
      if (!minimalDimensions) {
        return "";
      } else {
        return '<div style="' + dimensions + '"></div>';
      }
    }
    return '<img src="' + imageFile + '" style="object-fit: cover;' + dimensions + '">';
  }
  getId(tags, elementTag) {
    let response = "";
    tags.forEach((tag) => {
      if (response === "" && tag.startsWith(elementTag)) {
        response = tag.substring(tag.lastIndexOf("/") + 1);
      }
    });
    return +response;
  }
  getParentId(tags, elementTag) {
    let response = "";
    tags.forEach((tag) => {
      if (response === "" && tag.startsWith(elementTag)) {
        tag = tag.substring(0, tag.lastIndexOf("/"));
        response = tag.substring(tag.lastIndexOf("/") + 1);
      }
    });
    return +response;
  }
  getGrandParentId(tags, elementTag) {
    let response = "";
    tags.forEach((tag) => {
      if (response === "" && tag.startsWith(elementTag)) {
        tag = tag.substring(0, tag.lastIndexOf("/"));
        tag = tag.substring(0, tag.lastIndexOf("/"));
        response = tag.substring(tag.lastIndexOf("/") + 1);
      }
    });
    return +response;
  }
  formatDate(date, type = null) {
    if (!date || date === void 0)
      return "";
    let options = null;
    if (type === "long") {
      options = {
        day: "numeric",
        month: "long",
        year: "numeric"
      };
      return date.toLocaleString(options);
    }
    if (type === "short") {
      options = {
        weekday: "short",
        month: "short",
        day: "numeric",
        year: "numeric"
      };
    }
    if (options !== null) {
      return date.toLocaleString(options);
    } else {
      return date.toISODate();
    }
  }
  formatTime(date) {
    if (!date || date === void 0)
      return "";
    const options = {
      hour12: false,
      hour: "2-digit",
      minute: "2-digit"
    };
    return date.toLocaleString(options);
  }
  calculateDuration(start, end) {
    if (!start || !end)
      return "";
    const dtStart = new Date(start);
    const dtEnd = new Date(end);
    const difference = dtEnd.valueOf() - dtStart.valueOf();
    const minutes = difference / 6e4;
    const remaining = difference - minutes * 6e4;
    const seconds = remaining > 0 ? remaining / 1e3 : 0;
    return minutes + ":" + (seconds < 10 ? "0" + seconds : seconds);
  }
  getDeathStatus(page) {
    return page.dates.death !== null ? "<br/>_(Deceased " + this.formatDate(page.dates.death) + ")_ " : "";
  }
  calculateAge(page, currentDate) {
    if (page === void 0)
      return "";
    if (!(page == null ? void 0 : page.dates.dob))
      return "";
    const end = page.dates.death || currentDate;
    const startDate = new Date(page.dates.dob);
    const endDate = new Date(end);
    const ageDifMs = endDate.valueOf() - startDate.valueOf();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970).toString();
  }
};

// src/models/index.ts
var models_exports = {};
__export(models_exports, {
  AdventureModel: () => AdventureModel,
  CampaignModel: () => CampaignModel,
  ClueModel: () => ClueModel,
  ErrorModel: () => ErrorModel,
  EventModel: () => EventModel,
  FactionModel: () => FactionModel,
  LocationModel: () => LocationModel,
  NotesModel: () => NotesModel,
  NpcModel: () => NpcModel,
  PcModel: () => PcModel,
  SceneModel: () => SceneModel,
  SceneNavigationModel: () => SceneNavigationModel,
  SessionModel: () => SessionModel,
  SessionNavigationModel: () => SessionNavigationModel,
  TimelineModel: () => TimelineModel
});

// src/abstracts/AbstractModel.ts
var import_obsidian4 = require("obsidian");

// src/views/index.ts
var views_exports = {};
__export(views_exports, {
  AdventureListView: () => AdventureListView,
  CharacterInfoView: () => CharacterInfoView,
  CharacterListView: () => CharacterListView,
  ClueListView: () => ClueListView,
  ClueStatusView: () => ClueStatusView,
  EventListView: () => EventListView,
  FactionListView: () => FactionListView,
  ImageView: () => ImageView,
  LocationListView: () => LocationListView,
  SceneActionView: () => SceneActionView,
  SceneListView: () => SceneListView,
  SceneNavigationView: () => SceneNavigationView,
  SessionListView: () => SessionListView,
  SessionNavigatorView: () => SessionNavigatorView,
  SynopsisView: () => SynopsisView,
  TimelineView: () => TimelineView
});

// src/abstracts/AbstractSingleView.ts
var AbstractSingleView = class {
  constructor(api, dv) {
    this.api = api;
    this.dv = dv;
    this.container = dv.container;
  }
  spacer() {
    this.dv.span('<div style="height: 20px"></div>');
  }
};

// src/views/SessionNavigatorView.ts
var SessionNavigatorView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      const tableElements = [];
      tableElements.push(["Adventure", data.adventure ? data.adventure.link : ""]);
      tableElements.push(["Introduction", "[[#Introduction]]"]);
      tableElements.push(["ABT Plot", "[[#ABT Plot]]"]);
      tableElements.push(["Story Circle Plot", "[[#Story Circle Plot]]"]);
      tableElements.push(["Notes", "[[Notes - " + data.name + "]]"]);
      if (data.previousSession != null) {
        tableElements.push(["<< Previous Session", data.previousSession.link]);
      }
      if (data.nextSession != null) {
        tableElements.push(["Next Session >>", data.nextSession.link]);
      }
      const table = this.dv.markdownTable(["Campaign", "" + data.campaign.link], tableElements);
      this.dv.paragraph(table);
      this.spacer();
    });
  }
};

// src/views/SceneNavigationView.ts
var SceneNavigationView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      const tableElements = [];
      tableElements.push(["Adventure", data.adventure != void 0 ? data.adventure.link : ""]);
      tableElements.push(["Session", data.session != void 0 ? data.session.link : ""]);
      tableElements.push(["Session Notes", data.session != void 0 ? "[[Notes - " + data.session.name + "]]" : ""]);
      if (data.previousScene != void 0) {
        tableElements.push(["<< Previous Scene", data.previousScene.link]);
      }
      if (data.nextScene != void 0) {
        tableElements.push(["Next Scene >>", data.nextScene.link]);
      }
      const table = this.dv.markdownTable(["Campaign", "" + data.campaign.link], tableElements);
      this.dv.paragraph(table);
      this.spacer();
    });
  }
};

// src/abstracts/AbstractListView.ts
var AbstractListView = class {
  constructor(api, dv) {
    this.api = api;
    this.dv = dv;
    this.container = dv.container;
  }
  spacer() {
    this.dv.span('<div style="height: 20px"></div>');
  }
};

// src/views/Lists/FactionListView.ts
var FactionListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Factions");
      this.dv.table(["", "Faction", "Synopsis"], data.elements.map((clue) => [
        clue.image,
        clue.link,
        clue.synopsis
      ]));
      this.spacer();
    });
  }
};

// src/views/CharacterInfoView.ts
var CharacterInfoView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.table(["**" + data.name + "**", ""], [
        ["Status", data.isDead ? "Dead" : "Alive"],
        [data.isDead ? "Age at Death" : "Age", data.age !== "" ? data.age : "==Dob or campaign date missing=="],
        ["Goals", data.goals ? data.goals : "==Goals missing=="]
      ]);
      this.spacer();
    });
  }
};

// src/views/Lists/ClueListView.ts
var ClueListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Clues");
      this.dv.table(["", "Clue", "Found", "Synopsis"], data.elements.map((clue) => [
        clue.image,
        clue.link,
        clue.found === false ? "==no==" : clue.found,
        clue.synopsis
      ]));
      this.spacer();
    });
  }
};

// src/views/Lists/EventListView.ts
var EventListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Events");
      this.dv.table(["", "Name", "Date", "Synopsis"], data.elements.map((event) => [
        event.image,
        event.link,
        event.date,
        event.synopsis
      ]));
      this.spacer();
    });
  }
};

// src/views/Lists/SynopsisView.ts
var SynopsisView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      if (data.death !== "") {
        this.dv.span("_Deceased " + data.death + "_<br/>");
      }
      if (data.title !== null) {
        this.dv.span("## " + data.title);
      }
      let response = "";
      if (data.synopsis !== "") {
        if (data.isCharacter) {
          response = data.link + (data.death !== "" ? " was " : " is ") + data.synopsis;
        } else {
          response = data.synopsis;
        }
      } else {
        response = "==Synopsis missing==";
      }
      this.dv.span(response);
      this.spacer();
    });
  }
};

// src/views/ImageView.ts
var ImageView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      if (data.image !== "") {
        this.dv.span(data.image);
        this.spacer();
      }
    });
  }
};

// src/views/ClueStatusView.ts
var ClueStatusView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span((data.found === false ? "==Clue **NOT** found by the player characters==" : "_clue found by the player characters on " + data.found + "_") + "<br/>&nbsp;<br/>");
    });
  }
};

// src/views/Lists/SessionListView.ts
var SessionListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Sessions");
      this.dv.table(["&#35;", "Session", "Synopsis", "Date", "Play Date", "Notes"], data.elements.map((session) => [
        session.id,
        session.link,
        session.synopsis,
        session.date,
        session.irl,
        "[[Notes - " + session.name + "|>>]]"
      ]));
      this.spacer();
    });
  }
};

// src/views/Lists/AdventureListView.ts
var AdventureListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Adventures");
      this.dv.table(["", "Adventure", "Synopsis"], data.elements.map((adventure) => [
        adventure.id,
        adventure.link,
        adventure.synopsis
      ]));
      this.spacer();
    });
  }
};

// src/views/TimelineView.ts
var import_obsidian2 = require("obsidian");
var TimelineView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      let response = this.header(data.campaign);
      data.elements.forEach((timeline) => {
        const fileLink = document.createElement("h3");
        const synopsis = document.createElement("span");
        import_obsidian2.MarkdownRenderer.renderMarkdown(timeline.synopsis, synopsis, this.dv.currentFilePath, null);
        import_obsidian2.MarkdownRenderer.renderMarkdown("[[" + timeline.name + "]]", fileLink, this.dv.currentFilePath, null);
        response += '<li><div class="bullet' + timeline.getEventColour() + '"></div><div class="event-time">' + timeline.date + (timeline.time !== "00:00" ? "<br/>" + timeline.time : "") + '</div><div class="event-type' + timeline.getEventColour() + '">' + timeline.type + '</div><div class="event-details">' + fileLink.outerHTML + synopsis.outerHTML + "</div></li>";
      });
      response += this.footer();
      this.dv.container.innerHTML = response;
    });
  }
  header(campaign) {
    const campaignImage = (campaign == null ? void 0 : campaign.imageSrc) != null ? `style="background-image: url('` + campaign.imageSrc + `');"` : "";
    return '<div class="rpgm-container"><div class="rpgm-header"' + campaignImage + '><div class="rpgm-header-overlay"><div class="rpgm-header-title">Timeline</div><div class="rpgm-campaign-name">' + (campaign !== null ? campaign.name : "Campaign") + '</div><div class="rpgm-current-date">' + (campaign !== null ? this.api.formatDate(campaign.currentDate, "long") : "") + '</div></div></div><div class="rpgm-timeline"><ul>';
  }
  footer() {
    return "</ul></div></div>";
  }
};

// src/views/Lists/CharacterListView.ts
var CharacterListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Characters");
      this.dv.table(["", "Name", "Age", "Synopsis"], data.elements.map((character) => [
        character.image,
        character.link,
        character.age,
        character.synopsis
      ]));
      this.spacer();
    });
  }
};

// src/views/Lists/LocationListView.ts
var LocationListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Locations");
      this.dv.table(["", "Name", "Synopsis"], data.elements.map((character) => [
        character.image,
        character.link,
        character.synopsis
      ]));
      this.spacer();
    });
  }
};

// src/views/Lists/SceneListView.ts
var SceneListView = class extends AbstractListView {
  render(data) {
    return __async(this, null, function* () {
      this.dv.span("## Sessions");
      this.dv.table(["&#35;", "Scene", "Synopsis", "Start", "End", "Duration"], data.elements.map((scene) => [
        scene.id,
        scene.link,
        scene.synopsis,
        scene.startTime,
        scene.endTime,
        scene.duration
      ]));
      this.spacer();
    });
  }
};

// src/views/SceneActionView.ts
var import_obsidian3 = require("obsidian");
var SceneActionView = class extends AbstractSingleView {
  render(data) {
    return __async(this, null, function* () {
      const goalDiv = this.container.createDiv();
      goalDiv.addClass("rpgm-scene-goal");
      const goalTitle = goalDiv.createDiv();
      goalTitle.addClass("title");
      goalTitle.innerText = "Scene Goal";
      import_obsidian3.MarkdownRenderer.renderMarkdown(data.synopsis !== "" ? data.synopsis : "==Missing Scene Synopsis (Goal)==", goalDiv, this.dv.currentFilePath, null);
      const actionDiv = this.container.createDiv();
      actionDiv.addClass("rpgm-scene-action");
      const actionTitle = actionDiv.createDiv();
      actionTitle.addClass("title");
      actionTitle.innerText = "Player Character's Action";
      import_obsidian3.MarkdownRenderer.renderMarkdown(data.action !== "" ? data.action : "==Missing Scene Action==", actionDiv, this.dv.currentFilePath, null);
    });
  }
};

// src/factories/RpgViewFactory.ts
var viewType = /* @__PURE__ */ ((viewType2) => {
  viewType2[viewType2["AdventureList"] = 0] = "AdventureList";
  viewType2[viewType2["CharacterList"] = 1] = "CharacterList";
  viewType2[viewType2["Timeline"] = 2] = "Timeline";
  viewType2[viewType2["SessionList"] = 3] = "SessionList";
  viewType2[viewType2["ClueStatus"] = 4] = "ClueStatus";
  viewType2[viewType2["Image"] = 5] = "Image";
  viewType2[viewType2["Synopsis"] = 6] = "Synopsis";
  viewType2[viewType2["ClueRelationshipList"] = 7] = "ClueRelationshipList";
  viewType2[viewType2["LocationList"] = 8] = "LocationList";
  viewType2[viewType2["EventList"] = 9] = "EventList";
  viewType2[viewType2["ClueList"] = 10] = "ClueList";
  viewType2[viewType2["CharacterInfo"] = 11] = "CharacterInfo";
  viewType2[viewType2["FactionList"] = 12] = "FactionList";
  viewType2[viewType2["SessionNavigator"] = 13] = "SessionNavigator";
  viewType2[viewType2["SceneList"] = 14] = "SceneList";
  viewType2[viewType2["SceneNavigation"] = 15] = "SceneNavigation";
  viewType2[viewType2["SceneAction"] = 16] = "SceneAction";
  return viewType2;
})(viewType || {});
var RpgViewFactory = class {
  static initialise(api) {
    this.api = api;
  }
  static createList(viewName, dv) {
    return new views_exports[viewType[viewName] + "View"](this.api, dv);
  }
  static createSingle(viewName, dv) {
    return new views_exports[viewType[viewName] + "View"](this.api, dv);
  }
};

// src/abstracts/AbstractModel.ts
var AbstractModel = class extends import_obsidian4.MarkdownRenderChild {
  constructor(api, container, source, component, sourcePath) {
    super(container);
    this.api = api;
    this.container = container;
    this.source = source;
    this.component = component;
    this.sourcePath = sourcePath;
    this.redrawContainer = () => {
      if (this.isActivePage()) {
        this.renderComponent();
      }
    };
  }
  renderComponent(wait = 500) {
    return __async(this, null, function* () {
      setTimeout(() => {
        this.dv = this.api.app.plugins.plugins.dataview.localApi(this.sourcePath, this.component, this.container);
        const current = this.dv.current();
        if (current != null) {
          this.current = current;
        } else {
          return;
        }
        let campaignId = null;
        this.current.tags.forEach((tag) => {
          if (tag.startsWith(this.api.settings.campaignTag)) {
            campaignId = tag.substring(this.api.settings.campaignTag.length + 1);
          } else if (tag.startsWith(this.api.settings.campaignIdentifier)) {
            campaignId = tag.substring(this.api.settings.campaignIdentifier.length + 1);
          }
        });
        if (campaignId !== null) {
          const campaigns = this.dv.pages("#" + this.api.settings.campaignTag + "/" + campaignId);
          if (campaigns.length === 1) {
            this.campaign = new CampaignData(this.api, campaigns[0]);
          }
        }
        this.io = new IoData(this.api, this.campaign, this.dv, this.current);
        this.container.innerHTML = "";
        this.render();
      }, wait);
    });
  }
  onload() {
    this.renderComponent(0);
    this.registerEvent(this.api.app.workspace.on("rpgmanager:refresh-views", this.redrawContainer));
  }
  isActivePage() {
    var _a, _b, _c, _d;
    const views = this.api.app.workspace.getLayout().main.children;
    for (let viewCounter = 0; viewCounter < views.length; viewCounter++) {
      if (((_b = (_a = views[viewCounter].state) == null ? void 0 : _a.state) == null ? void 0 : _b.file) !== void 0 && ((_d = (_c = views[viewCounter].state) == null ? void 0 : _c.state) == null ? void 0 : _d.file) === this.sourcePath) {
        return true;
      }
    }
    return false;
  }
  writeList(data, typeOfView) {
    if (data.elements.length > 0) {
      const view = RpgViewFactory.createList(typeOfView, this.dv);
      view.render(data);
    }
  }
  writeData(data, typeOfView) {
    const view = RpgViewFactory.createSingle(typeOfView, this.dv);
    view.render(data);
  }
  image(width = 75, height = 75) {
    this.writeData(this.io.getImage(width, height), 5 /* Image */);
  }
  synopsis(title = null) {
    this.writeData(this.io.getSynopsis(title), 6 /* Synopsis */);
  }
};

// src/models/AdventureModel.ts
var AdventureModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      const adventure = new AdventureData(this.api, this.current);
      this.sessionList(adventure.id);
    });
  }
  sessionList(adventureId) {
    return __async(this, null, function* () {
      this.writeList(this.io.getSessionList(adventureId), 3 /* SessionList */);
    });
  }
};

// src/models/CampaignModel.ts
var CampaignModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.adventureList();
      this.sessionList();
      this.characterList();
    });
  }
  adventureList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getAdventureList(), 0 /* AdventureList */);
    });
  }
  sessionList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getSessionList(), 3 /* SessionList */);
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getCharacterList(), 1 /* CharacterList */);
    });
  }
};

// src/models/ClueModel.ts
var ClueModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.status();
      this.image(450);
      this.synopsis();
      this.characterList();
      this.locationList();
      this.eventList();
    });
  }
  status() {
    this.writeData(this.io.getClue(), 4 /* ClueStatus */);
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */), 1 /* CharacterList */);
    });
  }
  locationList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(6 /* Location */), 8 /* LocationList */);
    });
  }
  eventList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(7 /* Event */, 8 /* Clue */), 9 /* EventList */);
    });
  }
};

// src/models/ErrorModel.ts
var ErrorModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.container.innerText = "The selected function does not exist in Rpg Manager";
    });
  }
};

// src/models/EventModel.ts
var EventModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.image(450);
      this.synopsis();
      this.characterList();
      this.clueList();
      this.locationList();
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */), 1 /* CharacterList */);
    });
  }
  clueList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(8 /* Clue */), 10 /* ClueList */);
    });
  }
  locationList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(6 /* Location */), 8 /* LocationList */);
    });
  }
};

// src/models/FactionModel.ts
var FactionModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.synopsis();
      this.image(200);
      this.characterList();
      this.locationList();
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */, 9 /* Faction */), 1 /* CharacterList */);
    });
  }
  locationList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(6 /* Location */), 8 /* LocationList */);
    });
  }
};

// src/models/LocationModel.ts
var LocationModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      var _a, _b;
      this.synopsis(((_a = this.dv.current()) == null ? void 0 : _a.address) ? (_b = this.dv.current()) == null ? void 0 : _b.address : null);
      this.image(450);
      this.characterList();
      this.eventList();
      this.clueList();
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */, 6 /* Location */), 1 /* CharacterList */);
    });
  }
  eventList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(7 /* Event */, 6 /* Location */), 9 /* EventList */);
    });
  }
  clueList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(8 /* Clue */, 6 /* Location */), 10 /* ClueList */);
    });
  }
};

// src/models/NotesModel.ts
var NotesModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
    });
  }
};

// src/models/NpcModel.ts
var NpcModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.synopsis();
      this.image(300, 300);
      this.info();
      this.factionList();
      this.characterList();
      this.eventList();
      this.clueList();
      this.locationList();
    });
  }
  info() {
    return __async(this, null, function* () {
      const current = this.dv.current();
      if (current !== void 0) {
        const data = new CharacterData(this.api, current, this.campaign);
        const view = RpgViewFactory.createSingle(11 /* CharacterInfo */, this.dv);
        view.render(data);
      }
    });
  }
  factionList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(9 /* Faction */), 12 /* FactionList */);
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */), 1 /* CharacterList */);
    });
  }
  eventList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(7 /* Event */, 4 /* Character */), 9 /* EventList */);
    });
  }
  clueList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(8 /* Clue */, 4 /* Character */), 10 /* ClueList */);
    });
  }
  locationList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(6 /* Location */), 8 /* LocationList */);
    });
  }
};

// src/models/PcModel.ts
var PcModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.image(300, 300);
      this.factionList();
      this.characterList();
      this.locationList();
    });
  }
  factionList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(9 /* Faction */), 12 /* FactionList */);
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */), 1 /* CharacterList */);
    });
  }
  locationList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(6 /* Location */), 8 /* LocationList */);
    });
  }
};

// src/models/SceneModel.ts
var SceneModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.characterList();
      this.locationList();
      this.clueList();
    });
  }
  characterList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(4 /* Character */), 1 /* CharacterList */);
    });
  }
  locationList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(6 /* Location */), 8 /* LocationList */);
    });
  }
  clueList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getRelationshipList(8 /* Clue */), 10 /* ClueList */);
    });
  }
};

// src/models/SessionModel.ts
var SessionModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.sceneList();
    });
  }
  sceneList() {
    return __async(this, null, function* () {
      this.writeList(this.io.getSceneList(), 14 /* SceneList */);
    });
  }
};

// src/models/SessionNavigationModel.ts
var SessionNavigationModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.synopsis();
      this.sessionNavigator();
    });
  }
  sessionNavigator() {
    return __async(this, null, function* () {
      const adventureId = this.api.getParentId(this.current.tags, this.api.settings.sessionTag);
      const sessionId = this.api.getId(this.current.tags, this.api.settings.sessionTag);
      const adventure = this.io.getAdventure(adventureId);
      const previousSession = this.io.getSession(adventureId, sessionId - 1);
      const nextSession = this.io.getSession(adventureId, sessionId + 1);
      const data = new SessionData(this.api, this.current, this.campaign, adventure, previousSession, nextSession);
      const view = RpgViewFactory.createSingle(13 /* SessionNavigator */, this.dv);
      view.render(data);
    });
  }
};

// src/models/TimelineModel.ts
var TimelineModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      var _a, _b, _c, _d;
      const data = new TimelineList(this.campaign);
      let query = "#" + this.api.settings.eventTag + " and #" + this.api.settings.campaignIdentifier + "/" + ((_a = this.campaign) == null ? void 0 : _a.id);
      const events = this.dv.pages(query).where((event) => {
        var _a2, _b2;
        return ((_a2 = event == null ? void 0 : event.dates) == null ? void 0 : _a2.event) !== void 0 && ((_b2 = event == null ? void 0 : event.dates) == null ? void 0 : _b2.event) !== null;
      });
      events.forEach((event) => {
        data.add(new TimelineData(this.api, event, "event"));
      });
      query = "(#" + this.api.settings.npcTag + " or #" + this.api.settings.pcTag + ") and #" + this.api.settings.campaignIdentifier + "/" + ((_b = this.campaign) == null ? void 0 : _b.id);
      let characters = this.dv.pages(query).where((character) => {
        var _a2, _b2;
        return ((_a2 = character == null ? void 0 : character.dates) == null ? void 0 : _a2.dob) !== void 0 && ((_b2 = character == null ? void 0 : character.dates) == null ? void 0 : _b2.dob) !== null;
      });
      characters.forEach((character) => {
        data.add(new TimelineData(this.api, character, "birth"));
      });
      characters = this.dv.pages("#character").where((character) => {
        var _a2, _b2;
        return ((_a2 = character == null ? void 0 : character.dates) == null ? void 0 : _a2.death) !== void 0 && ((_b2 = character == null ? void 0 : character.dates) == null ? void 0 : _b2.death) !== null;
      });
      characters.forEach((character) => {
        data.add(new TimelineData(this.api, character, "death"));
      });
      query = "#" + this.api.settings.sessionTag + " and #" + this.api.settings.campaignIdentifier + "/" + ((_c = this.campaign) == null ? void 0 : _c.id);
      const sessions = this.dv.pages(query).where((session) => {
        var _a2, _b2;
        return ((_a2 = session == null ? void 0 : session.dates) == null ? void 0 : _a2.session) !== void 0 && ((_b2 = session == null ? void 0 : session.dates) == null ? void 0 : _b2.session) !== null;
      });
      sessions.forEach((session) => {
        data.add(new TimelineData(this.api, session, "session"));
      });
      query = "#" + this.api.settings.clueTag + " and #" + this.api.settings.campaignIdentifier + "/" + ((_d = this.campaign) == null ? void 0 : _d.id);
      const clues = this.dv.pages(query).where((clue) => {
        var _a2, _b2;
        return ((_a2 = clue == null ? void 0 : clue.dates) == null ? void 0 : _a2.found) !== void 0 && ((_b2 = clue == null ? void 0 : clue.dates) == null ? void 0 : _b2.found) !== null;
      });
      clues.forEach((clue) => {
        data.add(new TimelineData(this.api, clue, "clue"));
      });
      data.sort();
      const view = RpgViewFactory.createList(2 /* Timeline */, this.dv);
      view.render(data);
    });
  }
};

// src/models/SceneNavigationModel.ts
var SceneNavigationModel = class extends AbstractModel {
  render() {
    return __async(this, null, function* () {
      this.action();
      this.sceneNavigation();
    });
  }
  action() {
    const scene = this.io.getScene();
    if (scene !== null) {
      this.writeData(scene, 16 /* SceneAction */);
    }
  }
  sceneNavigation() {
    return __async(this, null, function* () {
      const adventureId = this.api.getGrandParentId(this.current.tags, this.api.settings.sceneTag);
      const sessionId = this.api.getParentId(this.current.tags, this.api.settings.sceneTag);
      const sceneId = this.api.getId(this.current.tags, this.api.settings.sceneTag);
      const adventure = this.io.getAdventure(adventureId);
      const session = this.io.getSession(adventureId, sessionId);
      const previousScene = this.io.getScene(adventureId, sessionId, sceneId - 1);
      const nextScene = this.io.getScene(adventureId, sessionId, sceneId + 1);
      const data = new SceneData(this.api, this.current, session, adventure, previousScene, nextScene, this.campaign);
      console.log(data);
      const view = RpgViewFactory.createSingle(15 /* SceneNavigation */, this.dv);
      view.render(data);
    });
  }
};

// src/factories/RpgModelFactory.ts
var RpgModelFactory = class {
  static initialise(api) {
    this.api = api;
  }
  static create(container, source, component, sourcePath) {
    let modelName = source.replace(/[\n\r]/g, "").toLowerCase();
    modelName = modelName[0].toUpperCase() + modelName.substring(1);
    modelName = modelName.replace("navigation", "Navigation");
    try {
      return new models_exports[modelName + "Model"](this.api, container, source, component, sourcePath);
    } catch (e) {
      return new ErrorModel(this.api, container, source, component, sourcePath);
    }
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  campaignTag: "rpgm/outline/campaign",
  campaignIdentifier: "rpgm/campaign",
  adventureTag: "rpgm/outline/adventure",
  sessionTag: "rpgm/outline/session",
  sceneTag: "rpgm/outline/scene",
  npcTag: "rpgm/element/character/npc",
  pcTag: "rpgm/element/character/pc",
  locationTag: "rpgm/element/location",
  factionTag: "rpgm/element/faction",
  eventTag: "rpgm/element/event",
  clueTag: "rpgm/element/clue"
};
var RpgManager = class extends import_obsidian5.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      console.log("Loading RpgManager " + this.manifest.version);
      this.addSettingTab(new RpgManagerSettingTab(this.app, this));
      this.api = new Api(this.app, this.settings);
      RpgViewFactory.initialise(this.api);
      RpgModelFactory.initialise(this.api);
      this.refreshViews = (0, import_obsidian5.debounce)(this.refreshViews, 2500, true);
      this.registerEvent(this.app.metadataCache.on("resolved", function() {
        this.refreshViews();
      }.bind(this)));
      this.registerEvent(this.app.vault.on("modify", function() {
        this.refreshViews();
      }.bind(this)));
      this.registerPriorityCodeblockPostProcessor("RpgManager", -100, (source, el, ctx) => __async(this, null, function* () {
        return this.createRpgView(source, el, ctx, ctx.sourcePath);
      }));
      for (const type in DataType) {
        this.addCommand({
          id: "rpg-manager-create-" + type.toLowerCase(),
          name: "Create a new " + type,
          callback: () => {
            this.api.fileFactory.create(DataType[type]);
          }
        });
      }
    });
  }
  onunload() {
    return __async(this, null, function* () {
      __superGet(RpgManager.prototype, this, "onunload").call(this);
      this.app.workspace.off("resolved", this.refreshViews);
      this.app.workspace.off("modify", this.refreshViews);
    });
  }
  refreshViews() {
    this.app.workspace.trigger("rpgmanager:refresh-views");
  }
  createRpgView(source, el, component, sourcePath) {
    return __async(this, null, function* () {
      this.app.plugins.plugins.dataview.api.index.touch();
      component.addChild(RpgModelFactory.create(el, source, component, sourcePath));
    });
  }
  registerPriorityCodeblockPostProcessor(language, priority, processor) {
    const registered = this.registerMarkdownCodeBlockProcessor(language, processor);
    registered.sortOrder = priority;
  }
  registerPriorityMarkdownPostProcessor(priority, processor) {
    const registered = this.registerMarkdownPostProcessor(processor);
    registered.sortOrder = priority;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
      RpgModelFactory.initialise(this.api);
    });
  }
};
var RpgManagerSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Role Playing Game Manager" });
    new import_obsidian5.Setting(this.containerEl).setName("Campaign Relationship Tag").setDesc("The tag that identifies the Campaign the current note belongs to").addText((text) => text.setPlaceholder("rpgm/campaign").setValue(this.plugin.settings.campaignIdentifier).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Outlines" });
    containerEl.createEl("span", { text: "Outline Tags should always be followed by an id and the id of the parent. Example: `#" + this.plugin.settings.sessionTag + "/{session-id}/{adventure-id}`" });
    new import_obsidian5.Setting(this.containerEl).setName("Campaign Outline Tag").setDesc("The tag identifying a Campaign").addText((text) => text.setPlaceholder("rpgm/outline/campaign").setValue(this.plugin.settings.campaignTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Adventure Outline Tag").setDesc("The tag identifying an Adventure (`#" + this.plugin.settings.adventureTag + "/{adventure-id}`)").addText((text) => text.setPlaceholder("rpgm/outline/adventure").setValue(this.plugin.settings.adventureTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Session Outline Tag").setDesc("The tag identifying a Session (`#" + this.plugin.settings.sessionTag + "/{session-id}/{adventure-id}`)").addText((text) => text.setPlaceholder("rpgm/outline/session").setValue(this.plugin.settings.sessionTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Scenes Outline Tag").setDesc("The tag identifying a Session (`#" + this.plugin.settings.sceneTag + "/{scene-id}/{session-id}`)").addText((text) => text.setPlaceholder("rpgm/outline/scene").setValue(this.plugin.settings.sceneTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Elements" });
    containerEl.createEl("span", { text: "Please Note: Player Characters and Non Player Characters must have the same element prefix (ie: `rpgm/character`)." });
    new import_obsidian5.Setting(this.containerEl).setName("Player Character Tag").setDesc("The tag identifying a Player Character").addText((text) => text.setPlaceholder("rpgm/element/character/pc").setValue(this.plugin.settings.pcTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Non Player Character Tag").setDesc("The tag identifying a Non Player Character").addText((text) => text.setPlaceholder("rpgm/element/character/npc").setValue(this.plugin.settings.npcTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Location Tag").setDesc("The tag identifying a Location").addText((text) => text.setPlaceholder("rpgm/element/location").setValue(this.plugin.settings.locationTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Faction Tag").setDesc("The tag identifying a Faction").addText((text) => text.setPlaceholder("rpgm/element/faction").setValue(this.plugin.settings.factionTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Event Tag").setDesc("The tag identifying an Event").addText((text) => text.setPlaceholder("rpgm/element/event").setValue(this.plugin.settings.eventTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(this.containerEl).setName("Clue Tag").setDesc("The tag identifying a Clue").addText((text) => text.setPlaceholder("rpgm/element/clue").setValue(this.plugin.settings.clueTag).onChange((value) => __async(this, null, function* () {
      if (value.length == 0)
        return;
      yield this.plugin.saveSettings();
    })));
  }
};
